{"version":3,"file":"async-statisticsDashboard.js","mappings":";;;;;;;;;;;;;;;;;;AAAA,CAAmK;AACnK,2CAAK,UAAU,mDAAa,EAAE,gDAAU,EAAE,mDAAa,EAAE,iDAAW,EAAE,oDAAc,EAAE,iDAAW,EAAE,kDAAY,EAAE,wDAAkB,EAAE,gDAAU;AAClG;AACK;AACF;AAChD;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2CAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,6CAA6C,2CAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,2CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,2CAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,2CAAK;AAC/C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qEAAqE,kCAAkC;AACvG;AACA,wCAAwC,2CAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb,4BAA4B,CAAC;AAC7B;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB,6DAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAgD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAc;AAC/C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iEAAiE,uDAAuD;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAa;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA","sources":["webpack://thebudgeteer/../../../../../C\u0000# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/statisticsDashboard.js"],"sourcesContent":["ï»¿import { Chart, BarController, BarElement, CategoryScale, LinearScale, LineController, LineElement, PointElement, DoughnutController, ArcElement} from 'chart.js';\r\nChart.register(BarController, BarElement, CategoryScale, LinearScale, LineController, LineElement, PointElement, DoughnutController, ArcElement);\r\nimport { getRandomColor } from './utilities';\r\nimport { getDatePicker } from './asyncComponents';\r\nimport { getFiscalPlanDataByYear } from './api';\r\n\r\nexport default class StatisticsDashboard {\r\n    #data;\r\n    #initPromise;\r\n    #isLoading;\r\n    #yearPicker\r\n    #sentimentChartYearly;\r\n    #necessityChartYearly;\r\n    #sentimentBarChart;\r\n    #necessityBarChart;\r\n    #overspendingChart;\r\n    #totalSpentChart;\r\n    #overspendingHeading; \r\n\r\n    constructor(id, year) {\r\n        this.#data = null;\r\n        this.#initPromise = this.#init(id, year);\r\n    }\r\n\r\n    async #init(id, year) {\r\n        try {\r\n            this.#isLoading = true;\r\n            this.#initializeDatePicker(id, year);\r\n            this.#sentimentChartYearly = new Chart(document.getElementById('sentimentChartYear'), {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: [\r\n                        'Happy',\r\n                        'Unhappy'\r\n                    ],\r\n                    datasets: [{\r\n                        label: 'Total Amount',\r\n                        data: [0, 0],\r\n                        backgroundColor: [\r\n                            'rgb(25,135,84)',\r\n                            'rgb(220,53,69)'\r\n                        ],\r\n                        hoverOffset: 4\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#necessityChartYearly = new Chart(document.getElementById('necessityChartYear'), {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: [\r\n                        'Necessary',\r\n                        'Unnecessary'\r\n                    ],\r\n                    datasets: [{\r\n                        label: 'Total Amount',\r\n                        data: [0, 0],\r\n                        backgroundColor: [\r\n                            'rgb(25,135,84)',\r\n                            'rgb(220,53,69)'\r\n                        ],\r\n                        hoverOffset: 4\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#sentimentBarChart = new Chart(document.getElementById('sentimentLineChartYear'), {\r\n                type: 'bar',\r\n                data: {\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n                    datasets: [{\r\n                        label: 'Happy',\r\n                        stack: 'Unevaluated',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                        backgroundColor: '#20c997',\r\n                    },\r\n                    {\r\n                        label: 'Unhappy',\r\n                        stack: 'Unevaluated',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                        backgroundColor: 'rgb(220,53,69)'\r\n                    },\r\n                    {\r\n                        label: 'Happy (Eval.)',\r\n                        stack: 'Evaluated',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                        backgroundColor: '#0f7c5c',\r\n                    },\r\n                    {\r\n                        label: 'Unhappy (Eval.)',\r\n                        stack: 'Evaluated',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                        backgroundColor: '#881d27',\r\n                    },\r\n                    {\r\n                        label: 'Unevaluated',\r\n                        stack: 'Evaluated',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                        backgroundColor: '#1c1c1c',\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        y: {\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                color: '#d3d3d3',\r\n                                lineWidth: 0.2,\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                                callback: function (value, index, ticks) {\r\n                                    return window.userNumberFormat.format(value);\r\n                                }\r\n                            }\r\n                        },\r\n                        x: {\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                display: false,\r\n                                tickColor: '#d3d3d3',\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                            }\r\n                        },\r\n                    },\r\n                    plugins: {\r\n                        emptypiechart: false,\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed.y);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#necessityBarChart = new Chart(document.getElementById('necessityLineChartYear'), {\r\n                type: 'bar',\r\n                data: {\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n                    datasets: [{\r\n                        label: 'Necessary',\r\n                        stack: 'Unevaluated',\r\n                        backgroundColor: '#20c997',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n\r\n                    },\r\n                    {\r\n                        label: 'Unnecessary',\r\n                        stack: 'Unevaluated',\r\n                        backgroundColor: 'rgb(220,53,69)',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n\r\n                    },\r\n                    {\r\n                        label: 'Necessary (Eval.)',\r\n                        stack: 'Evaluated',\r\n                        backgroundColor: '#0f7c5c',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n\r\n                    },\r\n                    {\r\n                        label: 'Unnecessary (Eval.)',\r\n                        stack: 'Evaluated',\r\n                        backgroundColor: '#881d27',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                    },\r\n                    {\r\n                        label: 'Unevaluated',\r\n                        stack: 'Evaluated',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                        backgroundColor: '#1c1c1c'\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        y: {\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                color: '#d3d3d3',\r\n                                lineWidth: 0.2,\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                                callback: function (value, index, ticks) {\r\n                                    return window.userNumberFormat.format(value);\r\n                                }\r\n                            }\r\n                        },\r\n                        x: {\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                display: false,\r\n                                tickColor: '#d3d3d3',\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                            }\r\n                        },\r\n                    },\r\n                    plugins: {\r\n                        emptypiechart: false,\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed.y);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#overspendingChart = new Chart(document.getElementById('overspendingChart'), {\r\n                type: 'bar',\r\n                data: {\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n                },\r\n                options: {\r\n                    plugins: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Monthly Overspending Per Category'\r\n                        }\r\n                    },\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    indexAxis: 'y',\r\n                    scales: {\r\n                        x: {\r\n                            stacked: true,\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                color: '#d3d3d3',\r\n                                lineWidth: 0.2,\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                                callback: function (value, index, ticks) {\r\n                                    return window.userNumberFormat.format(value);\r\n                                }\r\n                            }\r\n                        },\r\n                        y: {\r\n                            stacked: true,\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                display: false,\r\n                                tickColor: '#d3d3d3',\r\n\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                            }\r\n                        }\r\n                    },\r\n                    plugins: {\r\n                        emptypiechart: false,\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed.x);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#overspendingHeading = document.getElementById('statistics-overspending');\r\n            this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(0)}`;\r\n\r\n            this.#totalSpentChart = new Chart(document.getElementById('totalSpentChart'), {\r\n                type: 'line',\r\n                data: {\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n                    datasets: [{\r\n                        label: 'Total Spent Per Month',\r\n                        borderWidth: 2,\r\n                        borderColor: '#d3d3d3',\r\n                        backgroundColor: '#20c997'\r\n\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        y: {\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                color: '#d3d3d3',\r\n                                lineWidth: 0.2,\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                                callback: function (value, index, ticks) {\r\n                                    return window.userNumberFormat.format(value);\r\n                                }\r\n                            }\r\n                        },\r\n                        x: {\r\n                            border: {\r\n                                color: '#d3d3d3',\r\n                            },\r\n                            grid: {\r\n                                display: false,\r\n                                tickColor: '#d3d3d3',\r\n                            },\r\n                            ticks: {\r\n                                color: '#d3d3d3',\r\n                            }\r\n                        },\r\n                    },\r\n                    plugins: {\r\n                        emptypiechart: false,\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.x !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed.y);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });            \r\n\r\n            let data = await this.#getData(id, year);\r\n            this.#renderData(data);\r\n\r\n            $('.yearPicker .calendar-button').on('click', function () {\r\n                let input = $(this).siblings('.yearSelector');\r\n                if (!input.data('datepicker').picker.is(':visible')) {\r\n                    input.datepicker('show');\r\n                } else {\r\n                    input.datepicker('hide');\r\n                }\r\n            });\r\n\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    async refresh(id, year) {\r\n        try {\r\n            if (this.#isLoading) {\r\n                console.log(\"Dashboard is loading...\")\r\n                return false;\r\n            }\r\n\r\n            this.#isLoading = true;\r\n            let data = await this.#getData(id, year);\r\n            this.#renderData(data);\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    async #getData(id, year) {\r\n        var data = await getFiscalPlanDataByYear(id, year);\r\n        return data;\r\n    }\r\n\r\n    rerenderDashboard() {\r\n        try {\r\n            if (this.#isLoading) {\r\n                console.log(\"Dashboard is loading...\")\r\n                return false;\r\n            }\r\n\r\n            this.#renderData();\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    #renderData(data) {\r\n        let dataObj = data ?? this.#data;\r\n\r\n        if (dataObj == null) {\r\n            return false;\r\n        }\r\n\r\n        this.#sentimentChartYearly.data.datasets[0].data = [data.happyEvaluatedTotal, data.unhappyEvaluatedTotal, Number.MIN_VALUE];\r\n        this.#sentimentChartYearly.update();\r\n\r\n        this.#necessityChartYearly.data.datasets[0].data = [data.necessaryEvaluatedTotal, data.unnecessaryEvaluatedTotal, Number.MIN_VALUE]\r\n        this.#necessityChartYearly.update();\r\n\r\n        this.#sentimentBarChart.data.datasets[0].data = data.happyPerMonth;\r\n        this.#sentimentBarChart.data.datasets[1].data = data.unhappyPerMonth;\r\n        this.#sentimentBarChart.data.datasets[2].data = data.happyEvaluatedPerMonth;\r\n        this.#sentimentBarChart.data.datasets[3].data = data.unhappyEvaluatedPerMonth;\r\n        this.#sentimentBarChart.data.datasets[4].data = data.unevaluatedPerMonth;\r\n        this.#sentimentBarChart.update();\r\n\r\n        this.#necessityBarChart.data.datasets[0].data = data.necessaryPerMonth;\r\n        this.#necessityBarChart.data.datasets[1].data = data.unnecessaryPerMonth;\r\n        this.#necessityBarChart.data.datasets[2].data = data.necessaryEvaluatedPerMonth;\r\n        this.#necessityBarChart.data.datasets[3].data = data.unnecessaryEvaluatedPerMonth;\r\n        this.#necessityBarChart.data.datasets[4].data = data.unevaluatedPerMonth;\r\n        this.#necessityBarChart.update();\r\n\r\n        let datasets = [];\r\n\r\n        for (let i = 0; i < data.monthlyOverspendingPerCategory.length; i++) {\r\n            let categoryData = data.monthlyOverspendingPerCategory[i];\r\n            datasets.push({\r\n                label: categoryData.category,\r\n                data: categoryData.overspendingPerMonth,\r\n                borderWidth: 2,\r\n                borderColor: '#d3d3d3',\r\n                backgroundColor: getRandomColor()\r\n            });\r\n        }\r\n\r\n        this.#overspendingChart.data.datasets = datasets;\r\n        this.#overspendingChart.update();\r\n\r\n        this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(data.overspendingTotal)}`;\r\n\r\n        this.#totalSpentChart.data.datasets[0].data = data.totalPerMonth;\r\n        this.#totalSpentChart.update();\r\n        \r\n        this.#data = data;\r\n    }\r\n\r\n    async #initializeDatePicker(id, year) {\r\n        let self = this;\r\n        this.#yearPicker = await getDatePicker(\"#statistics-yearSelector\");\r\n        this.#yearPicker.datepicker('setDate', year.toISOString());\r\n\r\n        this.#yearPicker.on('changeDate', async function () {\r\n            self.refresh(id, self.#yearPicker.datepicker('getUTCDate'))\r\n        });\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"async-statisticsDashboard.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA,CAA0K;AAC1K,2CAAK,UAAU,mDAAa,EAAE,gDAAU,EAAE,mDAAa,EAAE,iDAAW,EAAE,oDAAc,EAAE,iDAAW,EAAE,kDAAY,EAAE,wDAAkB,EAAE,gDAAU,EAAE,2CAAK;AAC/G;AACW;AACF;AACV;AACtC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,kCAAkC;AACvG;AACA,kEAAkE,kCAAkC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb,4BAA4B,CAAC;AAC7B;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,gBAAgB,mDAAU;AAC1B;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB,6DAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAU;AAC1B;AACA;AACA;AACA,qEAAqE,6DAA6D;AAClI,kEAAkE,sDAAsD;AACxH;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,uDAAuD;AACxH,8DAA8D,gDAAgD;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAgD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oDAAQ;AACzC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAa;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2CAAK;AACrC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA","sources":["webpack://thebudgeteer/../../../../../../C\u0000#/GithubRepositories/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/statisticsDashboard.js"],"sourcesContent":["ï»¿import { Chart, BarController, BarElement, CategoryScale, LinearScale, LineController, LineElement, PointElement, DoughnutController, ArcElement, Title} from 'chart.js';\r\nChart.register(BarController, BarElement, CategoryScale, LinearScale, LineController, LineElement, PointElement, DoughnutController, ArcElement, Title);\r\nimport { getColor } from './utilities';\r\nimport { getDatePicker } from './asyncComponents';\r\nimport { getFiscalPlanDataByYear } from './api';\r\nimport messageBox from './messageBox';\r\n\r\nexport default class StatisticsDashboard {\r\n    #data;\r\n    #isLoading;\r\n    #yearPicker\r\n    #sentimentChartYearly;\r\n    #necessityChartYearly;\r\n    #sentimentBarChart;\r\n    #necessityBarChart;\r\n    #overspendingChart;\r\n    #totalSpentChart;\r\n    #overspendingHeading; \r\n    #totalSpentHeading;\r\n\r\n    constructor(id, year) {\r\n        this.#data = null;\r\n        this.#init(id, year);\r\n    }\r\n\r\n    async #init(id, year) {\r\n        try {\r\n            var chartsPromise = this.#initializeCharts();            \r\n\r\n            this.#overspendingHeading = document.getElementById('statistics-overspending');\r\n            this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(0)}`;\r\n            this.#totalSpentHeading = document.getElementById('statistics-totalSpent');\r\n            this.#totalSpentHeading.textContent = `Total Spent: ${window.userNumberFormat.format(0)}`;\r\n\r\n            var response = await this.#getData(id, year);\r\n            if (response.isSuccess) {\r\n                await chartsPromise;\r\n                this.#renderData(response.data);\r\n                this.#data = response.data;\r\n            }\r\n            \r\n            this.#initializeDatePicker(id, year)\r\n\r\n            $('.yearPicker .calendar-button').on('click', function () {\r\n                let input = $(this).siblings('.yearSelector');\r\n                if (!input.data('datepicker').picker.is(':visible')) {\r\n                    input.datepicker('show');\r\n                } else {\r\n                    input.datepicker('hide');\r\n                }\r\n            });\r\n\r\n\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    async refresh(id, year) {\r\n        try {\r\n            if (this.#isLoading) {\r\n                messageBox.addAndShow('The dashboard is loading...', '#info-icon');\r\n                return false;\r\n            }\r\n\r\n            this.#isLoading = true;\r\n            let response = await this.#getData(id, year);\r\n            if (response.isSuccess) {\r\n                this.#renderData(response.data);\r\n            } else {\r\n                messageBox.addAndShow(response.message, '#cross-icon');\r\n            }\r\n            \r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    async #getData(id, year) {\r\n        var data = await getFiscalPlanDataByYear(id, year);\r\n        return data;\r\n    }\r\n\r\n    formatDashboard() {\r\n        try {\r\n            if (this.#isLoading) {\r\n                messageBox.addAndShow('The dashboard is loading...', '#info-icon');\r\n                return false;\r\n            }\r\n            this.#isLoading = true;\r\n            this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(this.#data.overspendingTotal)}`;\r\n            this.#totalSpentHeading.textContent = `Total Spent: ${window.userNumberFormat.format(this.#data.totalSpent)}`;\r\n            this.#sentimentBarChart.update('none');\r\n            this.#necessityBarChart.update('none');\r\n            this.#overspendingChart.update('none');\r\n            this.#totalSpentChart.update('none');\r\n            \r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    async #renderData(data) {\r\n        var dataObj = data ?? this.#data;\r\n\r\n        if (dataObj == null) {\r\n            return false;\r\n        }\r\n\r\n        var tasks = [];\r\n\r\n        this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(data.overspendingTotal)}`;\r\n        this.#totalSpentHeading.textContent = `Total Spent: ${window.userNumberFormat.format(data.totalSpent)}`;\r\n\r\n        this.#sentimentChartYearly.data.datasets[0].data = [data.happyEvaluatedTotal, data.unhappyEvaluatedTotal, Number.MIN_VALUE];\r\n        tasks.push(this.#updateChartTask(this.#sentimentChartYearly));\r\n\r\n        this.#necessityChartYearly.data.datasets[0].data = [data.necessaryEvaluatedTotal, data.unnecessaryEvaluatedTotal, Number.MIN_VALUE]\r\n        tasks.push(this.#updateChartTask(this.#necessityChartYearly));\r\n\r\n        this.#sentimentBarChart.data.datasets[0].data = data.happyPerMonth;\r\n        this.#sentimentBarChart.data.datasets[1].data = data.unhappyPerMonth;\r\n        this.#sentimentBarChart.data.datasets[2].data = data.happyEvaluatedPerMonth;\r\n        this.#sentimentBarChart.data.datasets[3].data = data.unhappyEvaluatedPerMonth;\r\n        this.#sentimentBarChart.data.datasets[4].data = data.unevaluatedPerMonth;\r\n        tasks.push(this.#updateChartTask(this.#sentimentBarChart));\r\n\r\n        this.#necessityBarChart.data.datasets[0].data = data.necessaryPerMonth;\r\n        this.#necessityBarChart.data.datasets[1].data = data.unnecessaryPerMonth;\r\n        this.#necessityBarChart.data.datasets[2].data = data.necessaryEvaluatedPerMonth;\r\n        this.#necessityBarChart.data.datasets[3].data = data.unnecessaryEvaluatedPerMonth;\r\n        this.#necessityBarChart.data.datasets[4].data = data.unevaluatedPerMonth;\r\n        tasks.push(this.#updateChartTask(this.#necessityBarChart));\r\n\r\n        var datasets = [];\r\n\r\n        for (let i = 0; i < data.monthlyOverspendingPerCategory.length; i++) {\r\n            let categoryData = data.monthlyOverspendingPerCategory[i];\r\n            datasets.push({\r\n                label: categoryData.category,\r\n                data: categoryData.overspendingPerMonth,\r\n                borderWidth: 2,\r\n                borderColor: '#d3d3d3',\r\n                backgroundColor: getColor(i)\r\n            });\r\n        }\r\n\r\n        this.#overspendingChart.data.datasets = datasets;\r\n        tasks.push(this.#updateChartTask(this.#overspendingChart));\r\n\r\n        this.#totalSpentChart.data.datasets[0].data = data.totalPerMonth;\r\n        tasks.push(this.#updateChartTask(this.#totalSpentChart));\r\n\r\n        await Promise.all(tasks);\r\n        this.#data = data;\r\n    }\r\n\r\n    async #initializeDatePicker(id, year) {\r\n        this.#yearPicker = await getDatePicker(\"#statistics-yearSelector\");\r\n        this.#yearPicker.datepicker('setDate', year.toISOString());\r\n        this.#yearPicker.on('changeDate', async () => {\r\n            this.refresh(id, this.#yearPicker.datepicker('getUTCDate'));\r\n        });\r\n\r\n    }\r\n\r\n    async #initializeCharts() {\r\n        var tasks = [];\r\n        var pieChartDatasets = [{\r\n            label: 'Total Amount',\r\n            data: [0, 0],\r\n            backgroundColor: [\r\n                'rgb(25,135,84)',\r\n                'rgb(220,53,69)'\r\n            ],\r\n            hoverOffset: 4\r\n        }];\r\n        var tooltip = {\r\n            callbacks: {\r\n                label: function (context) {\r\n                    let label = context.dataset.label || '';\r\n\r\n                    if (label) {\r\n                        label += ': ';\r\n                    }\r\n                    if (context.parsed !== null) {\r\n                        label += window.userNumberFormat.format(context.parsed);\r\n                    }\r\n                    return label;\r\n                }\r\n            }\r\n        };\r\n        var options = {\r\n            responsive: true,\r\n            layout: {\r\n                padding: 2\r\n            },\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n                tooltip: tooltip\r\n            }\r\n        };\r\n        var scales = {\r\n            y: {\r\n                border: {\r\n                    color: '#d3d3d3',\r\n                },\r\n                grid: {\r\n                    color: '#d3d3d3',\r\n                    lineWidth: 0.2,\r\n                },\r\n                ticks: {\r\n                    color: '#d3d3d3',\r\n                    callback: function (value, index, ticks) {\r\n                        return window.userNumberFormat.format(value);\r\n                    }\r\n                }\r\n            },\r\n            x: {\r\n                border: {\r\n                    color: '#d3d3d3',\r\n                },\r\n                grid: {\r\n                    display: false,\r\n                    tickColor: '#d3d3d3',\r\n                },\r\n                ticks: {\r\n                    color: '#d3d3d3',\r\n                }\r\n            },\r\n        };\r\n\r\n        tasks.push(this.#createChartTask('sentimentChartYear', {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: ['Happy', 'Unhappy'],\r\n                datasets: pieChartDatasets\r\n            },\r\n            options: options\r\n        }).then(chart => this.#sentimentChartYearly = chart));\r\n\r\n        tasks.push(this.#createChartTask('necessityChartYear', {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: ['Necessary', 'Unnecessary'],\r\n                datasets: pieChartDatasets\r\n            },\r\n            options: options\r\n        }).then(chart => this.#necessityChartYearly = chart));\r\n\r\n        var defaultTooltip =\r\n        {\r\n            callbacks: {\r\n                label: function (context) {\r\n                    let label = context.dataset.label || '';\r\n\r\n                    if (label) {\r\n                        label += ': ';\r\n                    }\r\n                    if (context.parsed.y !== null) {\r\n                        label += window.userNumberFormat.format(context.parsed.y);\r\n                    }\r\n                    return label;\r\n                }\r\n            }\r\n        };\r\n\r\n        var defaultOptions =\r\n        {\r\n            ...options,\r\n            scales: scales\r\n        };\r\n        defaultOptions.plugins = {\r\n            emptypiechart: false,\r\n            tooltip: defaultTooltip            \r\n        };\r\n\r\n        tasks.push(this.#createChartTask('sentimentBarChartYear', {\r\n            type: 'bar',\r\n            data: {\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n                datasets: [{\r\n                    label: 'Happy',\r\n                    stack: 'Unevaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#20c997',\r\n                },\r\n                {\r\n                    label: 'Unhappy',\r\n                    stack: 'Unevaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: 'rgb(220,53,69)'\r\n                },\r\n                {\r\n                    label: 'Happy (Eval.)',\r\n                    stack: 'Evaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#0f7c5c',\r\n                },\r\n                {\r\n                    label: 'Unhappy (Eval.)',\r\n                    stack: 'Evaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#881d27',\r\n                },\r\n                {\r\n                    label: 'Unevaluated',\r\n                    stack: 'Evaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#1c1c1c',\r\n                }]\r\n            },\r\n            options: defaultOptions\r\n        }).then(chart => this.#sentimentBarChart = chart));\r\n\r\n        tasks.push(this.#createChartTask('necessityBarChartYear', {\r\n            type: 'bar',\r\n            data: {\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n                datasets: [{\r\n                    label: 'Necessary',\r\n                    stack: 'Unevaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#20c997',\r\n                },\r\n                {\r\n                    label: 'Unnecessary',\r\n                    stack: 'Unevaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: 'rgb(220,53,69)'\r\n                },\r\n                {\r\n                    label: 'Necessary (Eval.)',\r\n                    stack: 'Evaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#0f7c5c',\r\n                },\r\n                {\r\n                    label: 'Unnecessary (Eval.)',\r\n                    stack: 'Evaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#881d27',\r\n                },\r\n                {\r\n                    label: 'Unevaluated',\r\n                    stack: 'Evaluated',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#1c1c1c',\r\n                }]\r\n            },\r\n            options: defaultOptions\r\n        }).then(chart => this.#necessityBarChart = chart));\r\n\r\n        tasks.push(this.#createChartTask('overspendingChart', {\r\n            type: 'bar',\r\n            data: {\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n            },\r\n            options: {\r\n                plugins: {\r\n                    emptypiechart: false,\r\n                    tooltip: defaultTooltip,\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Monthly Overspending Per Category'\r\n                    }\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                indexAxis: 'y',\r\n                scales: {\r\n                    x: {\r\n                        stacked: true,\r\n                        border: {\r\n                            color: '#d3d3d3',\r\n                        },\r\n                        grid: {\r\n                            color: '#d3d3d3',\r\n                            lineWidth: 0.2,\r\n                        },\r\n                        ticks: {\r\n                            color: '#d3d3d3',\r\n                            callback: function (value, index, ticks) {\r\n                                return window.userNumberFormat.format(value);\r\n                            }\r\n                        }\r\n                    },\r\n                    y: {\r\n                        stacked: true,\r\n                        border: {\r\n                            color: '#d3d3d3',\r\n                        },\r\n                        grid: {\r\n                            display: false,\r\n                            tickColor: '#d3d3d3',\r\n\r\n                        },\r\n                        ticks: {\r\n                            color: '#d3d3d3',\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }).then(chart => this.#overspendingChart = chart));\r\n\r\n        tasks.push(this.#createChartTask('totalSpentChart', {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dez\",],\r\n                datasets: [{\r\n                    label: 'Total Spent Per Month',\r\n                    borderWidth: 2,\r\n                    borderColor: '#d3d3d3',\r\n                    backgroundColor: '#20c997'\r\n\r\n                }]\r\n            },\r\n            options: defaultOptions\r\n        }).then(chart => this.#totalSpentChart = chart));\r\n\r\n        await Promise.all(tasks);\r\n    }\r\n\r\n    #createChartTask(elementId, config) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                let chart = new Chart(document.getElementById(elementId), config);\r\n                resolve(chart);\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    #updateChartTask(chart) {\r\n        return new Promise(() => {\r\n            setTimeout(() => {\r\n                chart.update();\r\n            }, 0);\r\n        });\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}
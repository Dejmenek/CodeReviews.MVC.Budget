{"version":3,"file":"async-categoryDashboard.js","mappings":";;;;;;;;;;;;;;;;;AAAA,CAAkE;AAClE,2CAAK,UAAU,wDAAkB,EAAE,gDAAU;AACI;AACD;AAChD;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,mCAAmC,2CAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,+DAAa;AAC/C;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,CAAC;AACT,wBAAwB,CAAC;AACzB;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB,QAAQ,6TAAgE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,sBAAsB,+DAA+D;AACrF,sBAAsB,oCAAoC;AAC1D,sBAAsB,gCAAgC;AACtD,sBAAsB,0EAA0E;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB,4DAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,4CAA4C,cAAc,IAAI,uCAAuC;AACrG,2CAA2C,aAAa,IAAI,8CAA8C;AAC1G,gDAAgD,kBAAkB,IAAI,qDAAqD;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://thebudgeteer/../../../../../C\u0000# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/categoryDashboard.js"],"sourcesContent":["ï»¿import { ArcElement, Chart, DoughnutController } from 'chart.js';\r\nChart.register(DoughnutController, ArcElement);\r\nimport { getDatePicker } from './asyncComponents'\r\nimport {  getCategoryDataByMonth } from './api';\r\n\r\nexport default class CategoryDashboard {\r\n    #data;\r\n    #isLoading;\r\n    #initPromise;\r\n    #monthPicker;\r\n    #sentimentChart;\r\n    #necessityChart;    \r\n    #table;\r\n    #budgetHeader;\r\n    #differenceHeader;\r\n    #totalHeader;\r\n\r\n    constructor(id, date, data) {\r\n        this.#data = data;\r\n        this.#initPromise = this.#init(id, date);\r\n    }\r\n\r\n    async #init(id, date) {\r\n        try {\r\n            this.#isLoading = true;\r\n            var datepickerPromise = this.#initializeDatePicker(id, date);\r\n            var tablePromise = this.#initializeTable(datepickerPromise);\r\n            this.#initializeCharts();\r\n\r\n            this.#budgetHeader = document.getElementById('budget-header');\r\n            this.#totalHeader = document.getElementById('total-header');\r\n            this.#differenceHeader = document.getElementById('difference-header');\r\n\r\n            this.#table = await tablePromise;\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    #initializeCharts() {\r\n        var options = {\r\n            responsive: true,\r\n            layout: {\r\n                padding: 2\r\n            },\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: function (context) {\r\n                            var label = context.dataset.label || '';\r\n\r\n                            if (label) {\r\n                                label += ': ';\r\n                            }\r\n                            if (context.parsed.y !== null) {\r\n                                label += window.userNumberFormat.format(context.parsed);\r\n                            }\r\n                            return label;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var sentimentChart = document.getElementById('sentimentChart');\r\n        this.#sentimentChart = new Chart(sentimentChart, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: [\r\n                    'Happy',\r\n                    'Unhappy'\r\n                ],\r\n                datasets: [{\r\n                    label: 'Total Amount',\r\n                    data: [sentimentChart.dataset.happy, sentimentChart.dataset.unhappy],\r\n                    backgroundColor: [\r\n                        'rgb(25,135,84)',\r\n                        'rgb(220,53,69)'\r\n                    ],\r\n                    hoverOffset: 4\r\n                }]\r\n            },\r\n            options: options\r\n        });\r\n\r\n        var necessityChart = document.getElementById('necessityChart');\r\n        this.#necessityChart = new Chart(necessityChart, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: [\r\n                    'Necessary',\r\n                    'Unnecessary'\r\n                ],\r\n                datasets: [{\r\n                    label: 'Total Amount',\r\n                    data: [necessityChart.dataset.necessary, necessityChart.dataset.unnecessary],\r\n                    backgroundColor: [\r\n                        'rgb(25,135,84)',\r\n                        'rgb(220,53,69)'\r\n                    ],\r\n                    hoverOffset: 4\r\n                }]\r\n            },\r\n            options: options\r\n        });\r\n    }\r\n\r\n    async #initializeDatePicker(id, date) {\r\n        this.#monthPicker = await getDatePicker(\"#monthSelector\", \"month\")\r\n        this.#monthPicker.datepicker('setDate', date.toISOString());\r\n        this.#monthPicker.on('changeDate', async () => {\r\n            this.#refresh(id, this.#monthPicker.datepicker('getUTCDate'));\r\n        });\r\n\r\n        $('.monthPicker .calendar-button').on('click', function () {\r\n            var input = $(this).siblings('.monthSelector');\r\n            if (!input.data('datepicker').picker.is(':visible')) {\r\n                input.datepicker('show');\r\n            } else {\r\n                input.datepicker('hide');\r\n            }\r\n        });\r\n    }\r\n\r\n    async #initializeTable(promise) {\r\n        await promise;\r\n        try {\r\n            const { default: DataTable } = await import(/* webpackChunkName: \"datatables\" */'datatables.net-bs5');\r\n            var lastAjaxData = {\r\n                start: 0,\r\n                lastId: null,\r\n                lastValue: null\r\n            };\r\n            var table = new DataTable('#transactions-table', {\r\n                processing: true,\r\n                serverSide: true,\r\n                deferLoading: 0,\r\n                ajax: function (data, callback, settings) {\r\n                    var formData = new FormData(document.getElementById('search-form'));\r\n                    var table = new $.fn.dataTable.Api(settings);\r\n\r\n                    var searchString = formData.get('SearchString');\r\n                    var minDate = formData.get('MinDate');\r\n                    var maxDate = formData.get('MaxDate');\r\n                    var fiscalPlanId = formData.get('FiscalPlanId');\r\n                    var categoryId = formData.get('CategoryId');\r\n                    var minAmount = formData.get('MinAmount');\r\n                    var maxAmount = formData.get('MaxAmount');\r\n\r\n                    var isPrevious = false;\r\n                    var lastId = null;\r\n                    var lastValue = null;\r\n                    var orderBy = null;\r\n                    var orderDirection = null;\r\n\r\n                    if (data.order?.[0]) {\r\n                        orderBy = data.order[0].name;\r\n                        orderDirection = data.order[0].dir;\r\n                    }\r\n\r\n                    if (data.start !== 0) {\r\n                        let rowData = null;\r\n\r\n                        if (lastAjaxData.start !== data.start) {\r\n                            isPrevious = lastAjaxData.start > data.start;\r\n                            rowData = isPrevious ? table.row(':first').data() : table.row(':last').data();\r\n                        } else {\r\n                            lastId = lastAjaxData.lastId;\r\n                            lastValue = lastAjaxData.lastValue;\r\n                        }\r\n\r\n                        if (rowData) {\r\n                            lastId = rowData.id;\r\n                            if (orderBy) {\r\n                                lastValue = rowData[orderBy];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    var requestData = {\r\n                        draw: data.draw,\r\n                        start: data.start,\r\n                        pageSize: data.length,\r\n                        orderBy: orderBy,\r\n                        orderDirection: orderDirection === 'asc' ? 0 : 1,\r\n                        lastId: lastId,\r\n                        lastValue: lastValue,\r\n                        isPrevious: isPrevious,\r\n                        FiscalPlanId: fiscalPlanId.length > 0 ? parseInt(fiscalPlanId) : null,\r\n                        SearchString: searchString.length > 0 ? searchString : null,\r\n                        CategoryId: categoryId.length > 0 ? parseInt(categoryId) : null,\r\n                        MinDate: minDate.length > 0 ? minDate : null,\r\n                        MaxDate: maxDate.length > 0 ? maxDate : null,\r\n                        MinAmount: minAmount.length > 0 ? parseFloat(minAmount) : null,\r\n                        MaxAmount: maxAmount.length > 0 ? parseFloat(maxAmount) : null\r\n                    };\r\n                    $.ajax({\r\n                        url: API_ROUTES.transactions.GET_SEARCH,\r\n                        type: 'POST',\r\n                        contentType: 'application/json',\r\n                        headers: {\r\n                            'RequestVerificationToken': formData.get('__RequestVerificationToken')\r\n                        },\r\n                        data: JSON.stringify(requestData),\r\n                        success: function (response) {\r\n                            callback({\r\n                                draw: response.draw,\r\n                                recordsFiltered: data.start + response.transactions.length + (response.hasNext === true ? 1 : 0),\r\n                                data: response.transactions\r\n                            });\r\n                            lastAjaxData = {\r\n                                start: requestData.start,\r\n                                lastId: requestData.lastId,\r\n                                lastValue: requestData.lastValue\r\n                            };\r\n                        },\r\n                        error: function (xhr, status, error) {\r\n                            console.error(`Couldn't fetch transactions'`, error);\r\n                        }\r\n                    });\r\n\r\n                },\r\n                info: false,\r\n                layout: {\r\n                    topStart: null,\r\n                    topEnd: null,\r\n                    bottomStart: 'pageLength',\r\n                    bottomEnd: {\r\n                        paging: {\r\n                            type: 'simple',\r\n                            numbers: false\r\n                        }\r\n                    }\r\n                },\r\n                lengthMenu: [10, 25, 50, 100],\r\n                columns: [\r\n                    { data: 'title', render: DataTable.render.text(), name: 'title' },\r\n                    { data: 'dateTime', name: 'dateTime' },\r\n                    { data: 'amount', name: 'amount' },\r\n                    { data: 'category', render: DataTable.render.text(), name: 'category.name' },\r\n                    {\r\n                        data: null,\r\n                        defaultContent:\r\n                            `<div class=\"d-flex justify-content-center align-items-center flex-wrap gap-2\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" class=\"table-icon\" fill=\"rgba(255, 255, 255, 1)\" data-icon=\"edit\">\r\n                            <use href=\"#edit-icon\" xlink:href=\"#edit-icon\"/>\r\n                        </svg >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" class=\"table-icon\" viewBox=\"0 0 16 16\" fill=\"rgba(255, 255, 255, 1)\" data-icon=\"delete\">\r\n                            <use href=\"#trash-icon\" xlink:href=\"#trash-icon\"/>\r\n                        </svg>\r\n                    </div>`,\r\n                        targets: -1,\r\n                        sortable: false\r\n                    },\r\n                ],\r\n                columnDefs: [{\r\n                    targets: 2,\r\n                    render: function (data, type, row) {\r\n                        if (type === 'display') {\r\n                            return window.userNumberFormat.format(data);\r\n                        } else {\r\n                            return data;\r\n                        }\r\n                    }\r\n                }, {\r\n                    targets: 1,\r\n                    render: function (data, type, row) {\r\n                        if (type === 'display') {\r\n                            return new Date(data).toLocaleString(window.userLocale);\r\n                        } else {\r\n                            return data;\r\n                        }\r\n                    }\r\n                }],\r\n                scrollX: true,\r\n                scrollCollapse: true\r\n            });\r\n            var tableContainer = document.getElementById('table-container');\r\n            tableContainer.style = '';\r\n            table.columns.adjust();\r\n\r\n            return table;\r\n        } catch (error) {\r\n            console.error('Error loading Datatable:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async #refresh(id, date) {\r\n        try {\r\n            if (this.#isLoading) {\r\n                console.log(\"Dashboard is loading...\")\r\n            }\r\n            this.#isLoading = true;\r\n            var data = await this.#getData(id, date, this.#data.categoryType);\r\n\r\n            if (data) {\r\n                this.#renderData(data);\r\n                this.#data = data;\r\n            }\r\n            \r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    } \r\n\r\n    async #getData(id, date, type) {\r\n        var data = await getCategoryDataByMonth(id, date, type);\r\n        return data;\r\n    }\r\n\r\n    #formatCharts(data) {\r\n        var dataObj = data ?? this.#data;\r\n\r\n        if (dataObj == null) {\r\n            return false;\r\n        }\r\n        this.#sentimentChart.data.datasets[0].data = [dataObj.happyTotal, dataObj.total - dataObj.happyTotal, Number.MIN_VALUE];\r\n        this.#sentimentChart.update();\r\n\r\n        this.#necessityChart.data.datasets[0].data = [dataObj.necessaryTotal, dataObj.total - dataObj.necessaryTotal, Number.MIN_VALUE];\r\n        this.#necessityChart.update();\r\n\r\n        return true;\r\n    }\r\n\r\n    #formatHeaders(data) {\r\n        var dataObj = data ?? this.#data;\r\n        if (dataObj == null) {\r\n            return false;\r\n        }\r\n        var isIncomeCategory = dataObj.categoryType === 1;\r\n        var budgetHeading = isIncomeCategory ? 'Goal' : 'Budget';\r\n        var totalHeading = isIncomeCategory ? 'Income' : 'Expenses';\r\n        var differenceHeading = isIncomeCategory ? 'Missing' : 'Overspending';\r\n        var budget = dataObj.budgetLimit?.budget ?? dataObj.budget;\r\n        var difference = budget - dataObj.total;\r\n        var differenceHeading;\r\n        if (difference < 0) {\r\n            differenceHeading = isIncomeCategory ? \"Surplus\" : \"Overspending\";\r\n        } else {\r\n            differenceHeading = isIncomeCategory ? \"Missing\" : \"Available\";\r\n        }       \r\n\r\n        this.#budgetHeader.textContent = `${budgetHeading}: ${window.userNumberFormat.format(budget)}`;\r\n        this.#totalHeader.textContent = `${totalHeading}: ${window.userNumberFormat.format(dataObj.total)}`;\r\n        this.#differenceHeader.textContent = `${differenceHeading}: ${window.userNumberFormat.format(Math.abs(difference))}`;\r\n\r\n        return true;\r\n    }\r\n\r\n    #renderData(data) {\r\n        var dataObj = data ?? this.#data;\r\n\r\n        if (dataObj == null) {\r\n            return false;\r\n        }\r\n        this.#formatCharts(dataObj);\r\n        this.#formatHeaders(dataObj);\r\n        //setTimeout(() => this.#table.rows().invalidate().draw(), 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    getCurrentMonthUTC = () => this.#monthPicker.datepicker('getUTCDate');\r\n    getCurrentMonth = () => this.#monthPicker.datepicker('getDate');\r\n}"],"names":[],"sourceRoot":""}
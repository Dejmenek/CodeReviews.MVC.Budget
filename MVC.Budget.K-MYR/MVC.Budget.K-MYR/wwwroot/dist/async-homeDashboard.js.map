{"version":3,"file":"async-homeDashboard.js","mappings":";;;;;;;;;;;;;;;;;AAAA,CAAkE;AAClE,2CAAK,UAAU,wDAAkB,EAAE,gDAAU;AACI;AACA;AACjD;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2CAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8CAA8C,2CAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,wBAAwB;AAChG;AACA;AACA;AACA;AACA;AACA,qCAAqC,wCAAwC;AAC7E,oCAAoC,EAAE;AACtC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,6CAA6C;AAC9G;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C,IAAI,6CAA6C;AACjJ,oDAAoD,8CAA8C,IAAI,8CAA8C;AACpJ;AACA;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,GAAG;AACxE,4CAA4C,uCAAuC;AACnF,cAAc,uCAAuC;AACrD;AACA;AACA;AACA,wEAAwE,GAAG;AAC3E;AACA,mCAAmC,gDAAgD;AACnF,uCAAuC,gDAAgD;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAAa;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,CAAC;AACT,wBAAwB,CAAC;AACzB;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qDAAqD;AACtH;AACA,mDAAmD,kDAAkD,IAAI,kDAAkD;AAC3J,oDAAoD,oDAAoD,IAAI,oDAAoD;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,YAAY;AACzF;AACA;AACA,4EAA4E,YAAY;AACxF,wEAAwE,YAAY;AACpF,wCAAwC,gDAAgD;AACxF,cAAc,gFAAgF;AAC9F;AACA,sEAAsE,YAAY;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,wEAAwE,YAAY;AACpF;AACA;AACA,+BAA+B,gDAAgD;AAC/E,mCAAmC,gDAAgD;AACnF;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,MAAM;AACxG,4CAA4C,6BAA6B;AACzE,6CAA6C,6BAA6B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA,gCAAgC,YAAY;AAC5C,kCAAkC,sBAAsB;AACxD,kCAAkC,cAAc;AAChD,oCAAoC,gBAAgB;AACpD,0CAA0C,sBAAsB;AAChE;AACA;AACA;AACA;AACA,oEAAoE,wBAAwB;AAC5F;AACA;AACA;AACA,yCAAyC,YAAY;AACrD,oCAAoC,uBAAuB;AAC3D,iCAAiC,uCAAuC;AACxE,gCAAgC,EAAE;AAClC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA,6CAA6C,gDAAgD;AAC7F,cAAc,uCAAuC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA,+BAA+B,gDAAgD;AAC/E,mCAAmC,gDAAgD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY;AACpD,8FAA8F,MAAM;AACpG;AACA,wCAAwC,yBAAyB;AACjE,yCAAyC,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,GAAG;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://thebudgeteer/../../../../../C\u0000# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/homeDashboard.js"],"sourcesContent":["ï»¿import { ArcElement, Chart, DoughnutController } from 'chart.js';\r\nChart.register(DoughnutController, ArcElement);\r\nimport { getDatePicker } from './asyncComponents'\r\nimport { getFiscalPlanDataByMonth } from './api';\r\n\r\n\r\nexport default class HomeDashboard {\r\n    #data;\r\n    #isLoading;\r\n    #initPromise;\r\n    #monthPicker;\r\n    #sentimentChartMonthly;\r\n    #necessityChartMonthly;\r\n    #overspendingHeading;\r\n    #incomeBalanceHeader;\r\n    #incomeAccordionBody;\r\n    #expenseBalanceHeader;\r\n    #expenseAccordionBody;\r\n    #menu;\r\n    #dashboardContainer;\r\n\r\n\r\n    constructor(menu, id, date, data) {\r\n        this.#data = data;\r\n        this.#menu = menu;      \r\n        this.#initPromise = this.#init(id, date);\r\n    }\r\n\r\n    async #init(id, date) {\r\n        try {\r\n            this.#isLoading = true;\r\n            this.#initializeDatePicker(id, date);\r\n\r\n            var sentimentChart= document.getElementById('sentimentChart');\r\n            this.#sentimentChartMonthly = new Chart(sentimentChart, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: [\r\n                        'Happy',\r\n                        'Unhappy'\r\n                    ],\r\n                    datasets: [{\r\n                        label: 'Total Amount',\r\n                        data: [sentimentChart.dataset.happy, sentimentChart.dataset.unhappy],\r\n                        backgroundColor: [\r\n                            'rgb(25,135,84)',\r\n                            'rgb(220,53,69)'\r\n                        ],\r\n                        hoverOffset: 4\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            var necessityChart = document.getElementById('necessityChart');\r\n            this.#necessityChartMonthly = new Chart(document.getElementById('necessityChart'), {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: [\r\n                        'Necessary',\r\n                        'Unnecessary'\r\n                    ],\r\n                    datasets: [{\r\n                        label: 'Total Amount',\r\n                        data: [necessityChart.dataset.necessary, necessityChart.dataset.unnecessary],\r\n                        backgroundColor: [\r\n                            'rgb(25,135,84)',\r\n                            'rgb(220,53,69)'\r\n                        ],\r\n                        hoverOffset: 4\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#overspendingHeading = document.getElementById('home-overspending');\r\n\r\n            this.#incomeBalanceHeader = document.getElementById('incomeBalanceHeader');\r\n            this.#incomeAccordionBody = document.getElementById('incomeAccordionBody');\r\n\r\n            this.#expenseBalanceHeader = document.getElementById('expensesBalanceHeader');\r\n            this.#expenseAccordionBody = document.getElementById('expensesAccordionBody');  \r\n\r\n            this.#dashboardContainer = document.getElementById('home-container');\r\n            \r\n            this.formatInitialCategories();   \r\n\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }        \r\n    }\r\n\r\n    setupMenuHandlers() {\r\n        let categoryElements = this.#dashboardContainer.querySelectorAll('.category');\r\n\r\n        for (let i = 0; i < categoryElements.length; i++) {\r\n            let category = categoryElements[i];\r\n            let menu = this.#menu;\r\n            let id = category.dataset.id\r\n            let type = category.dataset.type;\r\n            category.addEventListener(\"click\", function (event) {\r\n                if (menu.dataset.categoryid != 0) {\r\n                    var borderBox = document.getElementById(`category_${menu.dataset.categoryid}`).querySelector('.border-animation');\r\n                    borderBox.classList.remove('border-rotate');\r\n                }\r\n                let y = Math.max(Math.min(event.pageY - 100, window.innerHeight - 200), 66);\r\n                menu.dataset.categoryid = id;\r\n                menu.dataset.type = type;\r\n                menu.style.left = `${category.style.left + event.pageX - 100}px`;\r\n                menu.style.top = `${y}px`;\r\n                menu.classList.add('active');\r\n\r\n                this.querySelector('.border-animation').classList.add('border-rotate');\r\n            });\r\n        }\r\n    }\r\n\r\n    formatInitialCategories()\r\n    {\r\n        let overspending = parseInt(this.#overspendingHeading.dataset.overspending);\r\n        this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(overspending)}`;\r\n        let incomeTotal = parseInt(this.#incomeBalanceHeader.dataset.total);\r\n        let incomeBudget = parseInt(this.#incomeBalanceHeader.dataset.budget);\r\n        let expenseTotal = parseInt(this.#expenseBalanceHeader.dataset.total);\r\n        let expenseBudget = parseInt(this.#expenseBalanceHeader.dataset.budget);\r\n        this.#incomeBalanceHeader.textContent = `${window.userNumberFormat.format(incomeTotal)} / ${window.userNumberFormat.format(incomeBudget)}`;\r\n        this.#expenseBalanceHeader.textContent = `${window.userNumberFormat.format(expenseTotal)} / ${window.userNumberFormat.format(expenseBudget)}`;\r\n\r\n        let categoryElements = this.#dashboardContainer.querySelectorAll('.category');\r\n\r\n        for (let i = 0; i < categoryElements.length; i++) {\r\n            let category = categoryElements[i];\r\n            let id = parseInt(category.dataset.id);\r\n            let total = parseInt(category.dataset.total);\r\n            let budget = parseInt(category.dataset.budget);\r\n            let type = parseInt(category.dataset.type);\r\n\r\n            let balanceElement = category.querySelector(`#category_${id}_balance`)\r\n            balanceElement.textContent = `${window.userNumberFormat.format(total)} / \r\n            ${window.userNumberFormat.format(budget)}`;\r\n\r\n            if (total > budget) {\r\n                let deviationAmount = total - budget;\r\n                let deviationSpan = category.querySelector(`#category_${id}_deviationText`);\r\n                deviationSpan.textContent = type === 1\r\n                    ? `Windfall: ${window.userNumberFormat.format(deviationAmount)}`\r\n                    : `Overspending: ${window.userNumberFormat.format(deviationAmount)}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    async #initializeDatePicker(id, date) {\r\n        let self = this;\r\n        this.#monthPicker = await getDatePicker(\"#home-monthSelector\", \"month\")\r\n        this.#monthPicker.datepicker('setDate', date.toISOString());\r\n        this.#monthPicker.on('changeDate', async function () {\r\n            var date = self.#monthPicker.datepicker('getUTCDate')\r\n            self.refresh(id, date);\r\n        });\r\n\r\n        $('.monthPicker .calendar-button').on('click', function () {\r\n            let input = $(this).siblings('.monthSelector');\r\n            if (!input.data('datepicker').picker.is(':visible')) {\r\n                input.datepicker('show');\r\n            } else {\r\n                input.datepicker('hide');\r\n            }\r\n        });\r\n    }\r\n\r\n    async refresh(id, date) {        \r\n        try {\r\n            if (this.#isLoading) {\r\n                console.log(\"Dashboard is loading...\")\r\n                return false;\r\n            }\r\n\r\n            this.#isLoading = true;\r\n\r\n            let data = await this.#getData(id, date);\r\n\r\n            this.#renderData(data);            \r\n\r\n            this.#data = data;\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }   \r\n\r\n    async #getData(id, date) {\r\n        var data = await getFiscalPlanDataByMonth(id, date);\r\n        return data;\r\n    }\r\n\r\n    rerenderDashboard() {\r\n        try {\r\n            if (this.#isLoading) {\r\n                console.log(\"Dashboard is loading...\")\r\n                return false;\r\n            }\r\n            \r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    #renderData(data) {\r\n        let dataObj = data ?? this.#data;       \r\n\r\n        if (dataObj == null) {\r\n            return false;\r\n        }\r\n\r\n        this.#sentimentChartMonthly.data.datasets[0].data = [dataObj.expensesHappyTotal, dataObj.expensesTotal - dataObj.expensesHappyTotal, Number.MIN_VALUE];\r\n        this.#sentimentChartMonthly.update();\r\n\r\n        this.#necessityChartMonthly.data.datasets[0].data = [dataObj.expensesNecessaryTotal, dataObj.expensesTotal - dataObj.expensesNecessaryTotal, Number.MIN_VALUE]\r\n        this.#necessityChartMonthly.update();\r\n\r\n        this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(dataObj.overspending)}`\r\n\r\n        this.#incomeBalanceHeader.textContent = `${window.userNumberFormat.format(data.incomeTotal)} / ${window.userNumberFormat.format(data.incomeBudget)}`;\r\n        this.#expenseBalanceHeader.textContent = `${window.userNumberFormat.format(data.expensesTotal)} / ${window.userNumberFormat.format(data.expensesBudget)}`;\r\n\r\n        this.#updateCategories(data.incomeCategories)\r\n        this.#updateCategories(data.expenseCategories)\r\n\r\n        return true;\r\n    }\r\n\r\n    #updateCategories(categories) {\r\n        if (categories.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < categories.length; i++) {\r\n            this.#updateCategory(categories[i]);\r\n        }\r\n    }\r\n\r\n    #updateCategory(category) {\r\n        if (!category) {\r\n            return false;\r\n        }\r\n\r\n        let accordion = category.categoryType == 1 ? this.#incomeAccordionBody : this.#expenseAccordionBody;\r\n        let categoryElement = accordion.querySelector(`#category_${category.id}`);\r\n\r\n        if (!categoryElement) {\r\n            this.addCategory(category);\r\n            return true;\r\n        }\r\n\r\n        let categoryNameElement = categoryElement.querySelector(`#category_${category.id}_name`);\r\n        categoryNameElement.textContent = decodeURIComponent(category.name);        \r\n\r\n        let progressBarElement = categoryElement.querySelector(`#category_${category.id}_progressbar`)\r\n        let balanceElement = categoryElement.querySelector(`#category_${category.id}_balance`)\r\n        balanceElement.textContent = `${window.userNumberFormat.format(category.total)} / \r\n            ${window.userNumberFormat.format(category.budgetLimit?.budget ?? category.budget)}`;\r\n\r\n        let deviationDiv = categoryElement.querySelector(`#category_${category.id}_deviation`)\r\n\r\n        if (category.total > category.budget) {\r\n            let deviationSpan;\r\n            let deviationAmount = category.total - category.budget;\r\n            if (!deviationDiv) {\r\n                let categoryBodyDiv = categoryElement.querySelector('.category-body');\r\n                deviationDiv = document.createElement('div');\r\n                deviationDiv.className = 'me-2';\r\n                deviationDiv.id = `category_${category.id}_deviation`;\r\n\r\n                deviationSpan = document.createElement('span');\r\n                deviationSpan.id = `category_${category.id}_deviationText`;\r\n                deviationSpan.className = 'deviation-text';\r\n\r\n                deviationDiv.appendChild(deviationSpan);\r\n                categoryBodyDiv.insertBefore(deviationDiv, balanceElement.parentElement);\r\n                balanceElement.parentElement.className = \"\";\r\n            } else {\r\n                deviationSpan = deviationDiv.querySelector(`#category_${category.id}_deviationText`);\r\n            }\r\n            deviationSpan.textContent = category.categoryType === 1\r\n                ? `Windfall: ${window.userNumberFormat.format(deviationAmount)}`\r\n                : `Overspending: ${window.userNumberFormat.format(deviationAmount)}`;\r\n\r\n        } else if (deviationDiv) {\r\n            deviationDiv.remove();\r\n        }\r\n\r\n        let progressBarELementPercentage = Math.floor(category.total * 100 / category.budget);\r\n        let color = \"bg-success\";\r\n        if (category.categoryType == 2) {\r\n            color = progressBarELementPercentage < 50 ? \"bg-success\" : progressBarELementPercentage < 85 ? \"bg-warning\" : \"bg-danger\";\r\n        }\r\n\r\n        progressBarElement.className = `progress-bar progress-bar-striped progress-bar-animated ${color}`;\r\n        progressBarElement.style.width = `${progressBarELementPercentage}%`;\r\n        progressBarElement.ariaValuenow = `${progressBarELementPercentage}`;\r\n\r\n        return true;\r\n    }\r\n\r\n    #createCategoryElements(data) {\r\n        let fragment = document.createDocumentFragment();\r\n        let orderedCategories = data.incomeCategories.sort(function (a, b) {\r\n            return a.name.localeCompare(b.name);\r\n        });\r\n\r\n        for (var i = 0; i < orderedCategories.length; i++) {\r\n            fragment.appendChild(this.#createCategoryElement(orderedCategories[i], data.id))\r\n        }\r\n\r\n        this.#incomeAccordionBody.textContent = \"\";\r\n        this.#incomeAccordionBody.appendChild(fragment);\r\n\r\n        fragment = document.createDocumentFragment();\r\n        orderedCategories = data.expenseCategories.sort(function (a, b) {\r\n            return a.name.localeCompare(b.name);\r\n        });\r\n\r\n        for (var i = 0; i < orderedCategories.length; i++) {\r\n            fragment.appendChild(this.#createCategoryElement(orderedCategories[i], data.id))\r\n        }\r\n\r\n        this.#expenseAccordionBody.textContent = \"\";\r\n        this.#expenseAccordionBody.appendChild(fragment);\r\n        return true;\r\n    }   \r\n\r\n    #createCategoryElement(category) {\r\n        let mainDiv = document.createElement('div');\r\n        mainDiv.id = `category_${category.id}`;\r\n        mainDiv.className = 'category';\r\n        mainDiv.dataset.id = `${category.id}`;\r\n        mainDiv.dataset.type = `${category.categoryType}`;\r\n        mainDiv.dataset.name = `${category.name}`;\r\n        mainDiv.dataset.budget = `${category.budget}`;\r\n        mainDiv.dataset.fiscalplanid = `${category.fiscalPlanId}`;  \r\n\r\n        let menu = this.#menu;\r\n        mainDiv.addEventListener(\"click\", function (event) {            \r\n            if (menu.dataset.categoryid != 0) {\r\n                var borderBox = document.getElementById(`category_${menu.dataset.categoryid}`).querySelector('.border-animation');\r\n                borderBox.classList.remove('border-rotate');\r\n            }\r\n            let y = Math.max(Math.min(event.pageY - 100, window.innerHeight - 200), 66);\r\n            menu.dataset.categoryid = `${category.id}`;\r\n            menu.dataset.type = `${ category.categoryType }`;\r\n            menu.style.left = `${mainDiv.style.left + event.pageX - 100}px`;\r\n            menu.style.top = `${y}px`;\r\n            menu.classList.add('active');\r\n\r\n            this.querySelector('.border-animation').classList.add('border-rotate');\r\n        });\r\n\r\n        let borderContainerDiv = document.createElement('div');\r\n        borderContainerDiv.className = 'border-container';\r\n\r\n        let contentDiv = document.createElement('div');\r\n        contentDiv.className = 'content';\r\n\r\n        let categoryBodyDiv = document.createElement('div');\r\n        categoryBodyDiv.className = 'category-body';\r\n\r\n        let categoryNameDiv = document.createElement('div');\r\n        categoryNameDiv.id = `category_${category.id}_name`;\r\n        categoryNameDiv.className = \"me-auto\"\r\n        categoryNameDiv.textContent = decodeURIComponent(category.name);\r\n\r\n        let budget = category.budgetLimit?.budget ?? category.budget;\r\n\r\n        let categoryBalanceDiv = document.createElement('div');\r\n\r\n        let categoryBalanceSpan = document.createElement('span');\r\n        categoryBalanceSpan.id = `category_${category.id}_balance`;\r\n        categoryBalanceSpan.className = 'balance-text';\r\n        categoryBalanceSpan.textContent = `${window.userNumberFormat.format(category.total)} / \r\n            ${window.userNumberFormat.format(budget)}`;\r\n\r\n        categoryBalanceDiv.appendChild(categoryBalanceSpan);\r\n        categoryBodyDiv.appendChild(categoryNameDiv);\r\n\r\n        if (category.total > category.budget) {\r\n            let deviationAmount = category.total - category.budget;\r\n            let deviationDiv = document.createElement('div');\r\n            deviationDiv.className = 'me-2';\r\n            deviationDiv.id = `category_${category.id}_deviation`;\r\n\r\n            let deviationSpan = document.createElement('span');\r\n            deviationSpan.id = `category_${category.id}_deviationText`;\r\n            deviationSpan.className = 'deviation-text';\r\n            deviationSpan.textContent = category.categoryType === 1\r\n                ? `Windfall: ${window.userNumberFormat.format(deviationAmount)}`\r\n                : `Overspending: ${window.userNumberFormat.format(deviationAmount)}`;\r\n\r\n            deviationDiv.appendChild(deviationSpan);\r\n            categoryBodyDiv.appendChild(deviationDiv);\r\n        } \r\n\r\n        categoryBodyDiv.appendChild(categoryBalanceDiv);\r\n\r\n        let progressDiv = document.createElement('div');\r\n        progressDiv.className = 'progress';\r\n\r\n        let progressBarDivPercentage = Math.floor(category.total * 100 / budget);\r\n        let color = \"bg-success\";\r\n        if (category.categoryType == 2) {\r\n            color = progressBarDivPercentage < 50 ? \"bg-success\" : progressBarDivPercentage < 85 ? \"bg-warning\" : \"bg-danger\";\r\n        }\r\n\r\n        let progressBarDiv = document.createElement('div');\r\n        progressBarDiv.id = `category_${category.id}_progressbar`;\r\n        progressBarDiv.className = `progress-bar progress-bar-striped progress-bar-animated ${color}`;\r\n        progressBarDiv.role = 'progressbar';\r\n        progressBarDiv.style.width = `${progressBarDivPercentage}%`;\r\n        progressBarDiv.ariaValuenow = `${progressBarDivPercentage}`;\r\n        progressBarDiv.ariaValuemin = '0';\r\n        progressBarDiv.ariaValuemax = '100';\r\n\r\n        progressDiv.appendChild(progressBarDiv);\r\n\r\n        contentDiv.appendChild(categoryBodyDiv);\r\n        contentDiv.appendChild(progressDiv);\r\n\r\n        let borderAnimationDiv = document.createElement('div');\r\n        borderAnimationDiv.className = 'border-animation';\r\n\r\n        borderContainerDiv.appendChild(contentDiv);\r\n        borderContainerDiv.appendChild(borderAnimationDiv);\r\n\r\n        mainDiv.appendChild(borderContainerDiv);\r\n\r\n        return mainDiv;\r\n    }\r\n\r\n    addCategory(category) {        \r\n        var categoryDTO =\r\n        {\r\n            id: category.id,\r\n            name: category.name,\r\n            budget: category.budget,            \r\n            categoryType: category.categoryType,\r\n            happyTotal: 0,\r\n            necessaryTotal: 0,           \r\n            total: 0\r\n        }\r\n\r\n        var categoryElement = this.#createCategoryElement(categoryDTO);\r\n\r\n        var accordion = categoryDTO.categoryType == 1 ? this.#incomeAccordionBody : this.#expenseAccordionBody;\r\n        var array = categoryDTO.categoryType == 1 ? this.#data.incomeCategories : this.#data.expenseCategories;\r\n        var insertIndex = array.findIndex((object) => categoryDTO.name.localeCompare(object.name) < 0);\r\n\r\n        if (insertIndex === -1) {\r\n            array.push(categoryDTO);\r\n            accordion.appendChild(categoryElement);\r\n        } else {\r\n            array.splice(insertIndex, 0, categoryDTO);      \r\n            accordion.insertBefore(categoryElement, accordion.children[insertIndex]);\r\n        }\r\n    }\r\n\r\n    removeCategory(id, type) {        \r\n        var categoryElement = document.getElementById(`category_${id}`);\r\n        categoryElement.remove();\r\n\r\n        if (!this.#data) {\r\n            return;\r\n        }\r\n\r\n        var array;        \r\n\r\n        switch (type) {\r\n            case 1:\r\n                array = this.#data.incomeCategories;\r\n                break;\r\n            case 2:\r\n                array = this.#data.expenseCategories;\r\n                break;\r\n        }\r\n\r\n        var index = array.findIndex(item => item.id === id);\r\n\r\n        if (index !== -1) {\r\n            array.splice(index, 1)\r\n        }\r\n    }\r\n\r\n    addTransaction(transaction) {\r\n        var transactionDate = new Date(transaction.dateTime)\r\n        var transactionYear = transactionDate.getYear();\r\n        var transactionMonth = transactionDate.getMonth();\r\n        var currentDate = new Date(this.#data.month);\r\n        var currentYear = currentDate.getYear();\r\n        var currentMonth = currentDate.getMonth();\r\n\r\n        if (transactionYear === currentYear && transactionMonth == currentMonth) {\r\n            var array = this.#data.incomeCategories.concat(this.#data.expenseCategories);\r\n            let category = array.find((element) => element.id === transaction.categoryId);\r\n            category.total += transaction.amount;\r\n            this.#updateCategory(category);\r\n        }        \r\n    }\r\n}"],"names":[],"sourceRoot":""}
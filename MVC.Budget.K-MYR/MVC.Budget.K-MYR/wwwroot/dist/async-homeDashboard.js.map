{"version":3,"file":"async-homeDashboard.js","mappings":";;;;;;;;;;;;;;;AAAA,CAAkE;AAClE,2CAAK,UAAU,wDAAkB,EAAE,gDAAU;AACI;AACjD;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2CAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,8CAA8C,2CAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qEAAqE,kCAAkC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+DAAa;AACnD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uDAAuD,kDAAkD,IAAI,kDAAkD;AAC/J,wDAAwD,oDAAoD,IAAI,oDAAoD;AACpK;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,GAAG,eAAe,+CAA+C;AACjJ;AACA,aAAa;AACb;AACA;AACA;AACA,cAAc;AACd,iDAAiD,gBAAgB;AACjE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qDAAqD;AACtH;AACA,mDAAmD,kDAAkD,IAAI,kDAAkD;AAC3J,oDAAoD,oDAAoD,IAAI,oDAAoD;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA,4EAA4E,YAAY;AACxF,wEAAwE,YAAY;AACpF,wCAAwC,gDAAgD;AACxF,cAAc,gFAAgF;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,MAAM;AACxG,4CAA4C,6BAA6B;AACzE,6CAA6C,6BAA6B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA,gCAAgC,YAAY;AAC5C,kCAAkC,sBAAsB;AACxD,kCAAkC,cAAc;AAChD,oCAAoC,gBAAgB;AACpD,0CAA0C,sBAAsB;AAChE;AACA;AACA;AACA;AACA;AACA,oEAAoE,wBAAwB;AAC5F;AACA;AACA,yCAAyC,YAAY;AACrD,oCAAoC,uBAAuB;AAC3D,iCAAiC,uCAAuC;AACxE,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA,6CAA6C,gDAAgD;AAC7F,cAAc,uCAAuC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA,8FAA8F,MAAM;AACpG;AACA,wCAAwC,yBAAyB;AACjE,yCAAyC,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://thebudgeteer/../../../../../C\u0000# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/homeDashboard.js"],"sourcesContent":["ï»¿import { ArcElement, Chart, DoughnutController } from 'chart.js';\r\nChart.register(DoughnutController, ArcElement);\r\nimport { getDatePicker } from './asyncComponents'\r\n\r\nexport default class HomeDashboard {\r\n    #data;\r\n    #isLoading;\r\n    #initPromise;\r\n    #monthPicker;\r\n    #sentimentChartMonthly;\r\n    #necessityChartMonthly;\r\n    #overspendingHeading;\r\n    #incomeBalanceHeader;\r\n    #incomeAccordionBody;\r\n    #expenseBalanceHeader;\r\n    #expenseAccordionBody;\r\n    #menu;\r\n\r\n\r\n    constructor(menu, id, date) {\r\n        this.#data = null;\r\n        this.#menu = menu;       \r\n        this.#initPromise = this.#init(id, date);\r\n    }\r\n\r\n    async #init(id, date) {\r\n        try {\r\n            this.#isLoading = true;\r\n            let self = this;\r\n\r\n            this.#sentimentChartMonthly = new Chart(document.getElementById('sentimentChart'), {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: [\r\n                        'Happy',\r\n                        'Unhappy'\r\n                    ],\r\n                    datasets: [{\r\n                        label: 'Total Amount',\r\n                        data: [0, 0],\r\n                        backgroundColor: [\r\n                            'rgb(25,135,84)',\r\n                            'rgb(220,53,69)'\r\n                        ],\r\n                        hoverOffset: 4\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#necessityChartMonthly = new Chart(document.getElementById('necessityChart'), {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: [\r\n                        'Necessary',\r\n                        'Unnecessary'\r\n                    ],\r\n                    datasets: [{\r\n                        label: 'Total Amount',\r\n                        data: [0, 0],\r\n                        backgroundColor: [\r\n                            'rgb(25,135,84)',\r\n                            'rgb(220,53,69)'\r\n                        ],\r\n                        hoverOffset: 4\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    let label = context.dataset.label || '';\r\n\r\n                                    if (label) {\r\n                                        label += ': ';\r\n                                    }\r\n                                    if (context.parsed.y !== null) {\r\n                                        label += window.userNumberFormat.format(context.parsed);\r\n                                    }\r\n                                    return label;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.#overspendingHeading = document.getElementById('home-overspending');\r\n            this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(0)}`;\r\n\r\n            this.#incomeBalanceHeader = document.getElementById('incomeBalanceHeader');\r\n            this.#incomeAccordionBody = document.getElementById('incomeAccordionBody');\r\n\r\n            this.#expenseBalanceHeader = document.getElementById('expensesBalanceHeader');\r\n            this.#expenseAccordionBody = document.getElementById('expensesAccordionBody');           \r\n\r\n            this.#monthPicker = await getDatePicker(\"#home-monthSelector\", \"month\");\r\n            this.#monthPicker.datepicker('setDate', date.toISOString());\r\n            this.#monthPicker.on('changeDate', async function () {\r\n                self.refresh(id, self.#monthPicker.datepicker('getUTCDate'))\r\n            });\r\n\r\n            let data = await this.#getData(id, date);\r\n            this.#data = data;\r\n\r\n            this.#incomeBalanceHeader.textContent = `${window.userNumberFormat.format(data.incomeTotal)} / ${window.userNumberFormat.format(data.incomeBudget)}`;\r\n            this.#expenseBalanceHeader.textContent = `${window.userNumberFormat.format(data.expensesTotal)} / ${window.userNumberFormat.format(data.expensesBudget)}`;\r\n\r\n            if (data) {\r\n                let hasUpdated = this.#renderData(data);\r\n                let hasCreated = this.#createCategoryElements(data);        \r\n            }\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }        \r\n    }\r\n\r\n    async refresh(id, date) {        \r\n        try {\r\n            if (this.#isLoading) {\r\n                console.log(\"Dashboard is loading...\")\r\n                return false;\r\n            }\r\n\r\n            this.#isLoading = true;\r\n            let data = await this.#getData(id, date);\r\n            this.#renderData(data);\r\n            this.#updateCategories(data.incomeCategories)\r\n            this.#updateCategories(data.expenseCategories)\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }   \r\n\r\n    async #getData(id, date) {\r\n        try {\r\n            let response = await fetch(`https://localhost:7246/api/FiscalPlan/${id}/Month?Month=${date.toISOString() ?? new Date().toISOString()}`, {\r\n                method: \"GET\",\r\n            });\r\n\r\n            if (response.ok) {\r\n                return await response.json();\r\n            } else {\r\n                console.error(`HTTP GET Error: ${response.status}`);\r\n                return null;\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    rerenderDashboard() {\r\n        try {\r\n            if (this.#isLoading) {\r\n                console.log(\"Dashboard is loading...\")\r\n                return false;\r\n            }\r\n\r\n            this.#renderData();\r\n        } finally {\r\n            this.#isLoading = false;\r\n        }\r\n    }\r\n\r\n    #renderData(data) {\r\n        let dataObj = data ?? this.#data;       \r\n\r\n        if (dataObj == null) {\r\n            return false;\r\n        }\r\n\r\n        this.#sentimentChartMonthly.data.datasets[0].data = [dataObj.expensesHappyTotal, dataObj.expensesTotal - dataObj.expensesHappyTotal, Number.MIN_VALUE];\r\n        this.#sentimentChartMonthly.update();\r\n\r\n        this.#necessityChartMonthly.data.datasets[0].data = [dataObj.expensesNecessaryTotal, dataObj.expensesTotal - dataObj.expensesNecessaryTotal, Number.MIN_VALUE]\r\n        this.#necessityChartMonthly.update();\r\n\r\n        this.#overspendingHeading.textContent = `Overspending: ${window.userNumberFormat.format(dataObj.overspending)}`\r\n\r\n        this.#incomeBalanceHeader.textContent = `${window.userNumberFormat.format(data.incomeTotal)} / ${window.userNumberFormat.format(data.incomeBudget)}`;\r\n        this.#expenseBalanceHeader.textContent = `${window.userNumberFormat.format(data.expensesTotal)} / ${window.userNumberFormat.format(data.expensesBudget)}`;\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    #updateCategories(categories) {\r\n        if (categories.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < categories.length; i++) {\r\n            this.#updateCategory(categories[i]);\r\n        }\r\n    }\r\n\r\n    #updateCategory(category) {\r\n        if (!category) {\r\n            return false;\r\n        }\r\n\r\n        let accordion = category.categoryType == 1 ? this.#incomeAccordionBody : this.#expenseAccordionBody;\r\n        let categoryElement = accordion.querySelector(`#category_${category.id}`);\r\n\r\n        if (!categoryElement) {\r\n            return false;\r\n        }\r\n\r\n        categoryElement.querySelector(`#category_${category.id}_name`).textContent = decodeURIComponent(category.name);\r\n\r\n        let progressBarELement = categoryElement.querySelector(`#category_${category.id}_progress`)\r\n        let balanceELement = categoryElement.querySelector(`#category_${category.id}_balance`)\r\n        balanceELement.textContent = `${window.userNumberFormat.format(category.total)} / \r\n            ${window.userNumberFormat.format(category.budgetLimit?.budget ?? category.budget)}`;\r\n\r\n        let progressBarELementPercentage = Math.floor(category.total * 100 / category.budget);\r\n        let color = \"bg-success\";\r\n        if (category.categoryType == 2) {\r\n            color = progressBarELementPercentage < 50 ? \"bg-success\" : progressBarELementPercentage < 85 ? \"bg-warning\" : \"bg-danger\";\r\n        }\r\n\r\n        progressBarELement.className = `progress-bar progress-bar-striped progress-bar-animated ${color}`;\r\n        progressBarELement.style.width = `${progressBarELementPercentage}%`;\r\n        progressBarELement.ariaValuenow = `${progressBarELementPercentage}`;\r\n\r\n        return true;\r\n    }\r\n\r\n    #createCategoryElements(data) {\r\n        let fragment = document.createDocumentFragment();\r\n        let orderedCategories = data.incomeCategories.sort(function (a, b) {\r\n            return a.name.localeCompare(b.name);\r\n        });\r\n\r\n        for (var i = 0; i < orderedCategories.length; i++) {\r\n            fragment.appendChild(this.#createCategoryELement(orderedCategories[i], data.id))\r\n        }\r\n\r\n        this.#incomeAccordionBody.textContent = \"\";\r\n        this.#incomeAccordionBody.appendChild(fragment);\r\n\r\n        fragment = document.createDocumentFragment();\r\n        orderedCategories = data.expenseCategories.sort(function (a, b) {\r\n            return a.name.localeCompare(b.name);\r\n        });\r\n\r\n        for (var i = 0; i < orderedCategories.length; i++) {\r\n            fragment.appendChild(this.#createCategoryELement(orderedCategories[i], data.id))\r\n        }\r\n\r\n        this.#expenseAccordionBody.textContent = \"\";\r\n        this.#expenseAccordionBody.appendChild(fragment);\r\n        return true;\r\n    }   \r\n\r\n    #createCategoryELement(category) {\r\n        let mainDiv = document.createElement('div');\r\n        mainDiv.id = `category_${category.id}`;\r\n        mainDiv.className = 'category';\r\n        mainDiv.dataset.id = `${category.id}`;\r\n        mainDiv.dataset.type = `${category.categoryType}`;\r\n        mainDiv.dataset.name = `${category.name}`;\r\n        mainDiv.dataset.budget = `${category.budget}`;\r\n        mainDiv.dataset.fiscalplanid = `${category.fiscalPlanId}`;  \r\n\r\n        let menu = this.#menu;\r\n        mainDiv.addEventListener(\"click\", function (event) {\r\n            \r\n            if (menu.dataset.categoryid != 0) {\r\n                var borderBox = document.getElementById(`category_${menu.dataset.categoryid}`).querySelector('.border-animation');\r\n                borderBox.classList.remove('border-rotate');\r\n            }\r\n            menu.dataset.categoryid = `${category.id}`;\r\n            menu.dataset.type = `${ category.categoryType }`;\r\n            menu.style.left = `${mainDiv.style.left + event.pageX - 100}px`;\r\n            menu.style.top = `${event.pageY - 100}px`;\r\n            menu.classList.add('active');\r\n\r\n            this.querySelector('.border-animation').classList.add('border-rotate');\r\n        });\r\n\r\n        let borderContainerDiv = document.createElement('div');\r\n        borderContainerDiv.className = 'border-container';\r\n\r\n        let contentDiv = document.createElement('div');\r\n        contentDiv.className = 'content';\r\n\r\n        let categoryBodyDiv = document.createElement('div');\r\n        categoryBodyDiv.className = 'category-body';\r\n\r\n        let categoryNameDiv = document.createElement('div');\r\n        categoryNameDiv.id = `category_${category.id}_name`;\r\n        categoryNameDiv.textContent = decodeURIComponent(category.name);\r\n\r\n        let categoryBalanceDiv = document.createElement('div');\r\n        categoryBalanceDiv.className = 'ms-auto';        \r\n\r\n        let categoryBalanceSpan = document.createElement('span');\r\n        categoryBalanceSpan.id = `category_${category.id}_balance`;\r\n        let budget = category.budgetLimit?.budget ?? category.budget;\r\n        categoryBalanceSpan.className = 'balance-text';\r\n        categoryBalanceSpan.textContent = `${window.userNumberFormat.format(category.total)} / \r\n            ${window.userNumberFormat.format(budget)}`;\r\n\r\n\r\n        categoryBalanceDiv.appendChild(categoryBalanceSpan);\r\n\r\n        categoryBodyDiv.appendChild(categoryNameDiv);\r\n        categoryBodyDiv.appendChild(categoryBalanceDiv);\r\n\r\n        let progressDiv = document.createElement('div');\r\n        progressDiv.className = 'progress';\r\n\r\n        let progressBarDivPercentage = Math.floor(category.total * 100 / budget);\r\n        let color = \"bg-success\";\r\n        if (category.categoryType == 2) {\r\n            color = progressBarDivPercentage < 50 ? \"bg-success\" : progressBarDivPercentage < 85 ? \"bg-warning\" : \"bg-danger\";\r\n        }\r\n\r\n        let progressBarDiv = document.createElement('div');\r\n        progressBarDiv.id = `category_${category.id}_progress`;\r\n\r\n        \r\n        progressBarDiv.className = `progress-bar progress-bar-striped progress-bar-animated ${color}`;\r\n        progressBarDiv.role = 'progressbar';\r\n        progressBarDiv.style.width = `${progressBarDivPercentage}%`;\r\n        progressBarDiv.ariaValuenow = `${progressBarDivPercentage}`;\r\n        progressBarDiv.ariaValuemin = '0';\r\n        progressBarDiv.ariaValuemax = '100';\r\n\r\n        progressDiv.appendChild(progressBarDiv);\r\n\r\n        contentDiv.appendChild(categoryBodyDiv);\r\n        contentDiv.appendChild(progressDiv);\r\n\r\n        let borderAnimationDiv = document.createElement('div');\r\n        borderAnimationDiv.className = 'border-animation';\r\n\r\n        borderContainerDiv.appendChild(contentDiv);\r\n        borderContainerDiv.appendChild(borderAnimationDiv);\r\n\r\n        mainDiv.appendChild(borderContainerDiv);\r\n\r\n        return mainDiv;\r\n    }\r\n}"],"names":[],"sourceRoot":""}
/*! For license information please see site.entry.js.LICENSE.txt */
(()=>{var t={"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/createPopper.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{createPopper:()=>g,detectOverflow:()=>c.default,popperGenerator:()=>f});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/orderModifiers.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/debounce.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/mergeByName.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js"),u=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),h={placement:"bottom",modifiers:[],strategy:"absolute"};function p(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function f(t){void 0===t&&(t={});var e=t,i=e.defaultModifiers,c=void 0===i?[]:i,f=e.defaultOptions,g=void 0===f?h:f;return function(t,e,i){void 0===i&&(i=g);var f={placement:"bottom",orderedModifiers:[],options:Object.assign({},h,g),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},m=[],v=!1,b={state:f,setOptions:function(i){var n="function"==typeof i?i(f.options):i;y(),f.options=Object.assign({},g,f.options,n),f.scrollParents={reference:(0,u.isElement)(t)?(0,o.default)(t):t.contextElement?(0,o.default)(t.contextElement):[],popper:(0,o.default)(e)};var s=(0,a.default)((0,d.default)([].concat(c,f.options.modifiers)));return f.orderedModifiers=s.filter((function(t){return t.enabled})),f.orderedModifiers.forEach((function(t){var e=t.name,i=t.options,n=void 0===i?{}:i,s=t.effect;if("function"==typeof s){var o=s({state:f,name:e,instance:b,options:n}),r=function(){};m.push(o||r)}})),b.update()},forceUpdate:function(){if(!v){var t=f.elements,e=t.reference,i=t.popper;if(p(e,i)){f.rects={reference:(0,n.default)(e,(0,r.default)(i),"fixed"===f.options.strategy),popper:(0,s.default)(i)},f.reset=!1,f.placement=f.options.placement,f.orderedModifiers.forEach((function(t){return f.modifiersData[t.name]=Object.assign({},t.data)}));for(var o=0;o<f.orderedModifiers.length;o++)if(!0!==f.reset){var a=f.orderedModifiers[o],l=a.fn,d=a.options,c=void 0===d?{}:d,u=a.name;"function"==typeof l&&(f=l({state:f,options:c,name:u,instance:b})||f)}else f.reset=!1,o=-1}}},update:(0,l.default)((function(){return new Promise((function(t){b.forceUpdate(),t(f)}))})),destroy:function(){y(),v=!0}};if(!p(t,e))return b;function y(){m.forEach((function(t){return t()})),m=[]}return b.setOptions(i).then((function(t){!v&&i.onFirstUpdate&&i.onFirstUpdate(t)})),b}}var g=f()},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/contains.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function s(t,e){var i=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(i&&(0,n.isShadowRoot)(i)){var s=e;do{if(s&&t.isSameNode(s))return!0;s=s.parentNode||s.host}while(s)}return!1}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function a(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1);var a=t.getBoundingClientRect(),l=1,d=1;e&&(0,n.isHTMLElement)(t)&&(l=t.offsetWidth>0&&(0,s.round)(a.width)/t.offsetWidth||1,d=t.offsetHeight>0&&(0,s.round)(a.height)/t.offsetHeight||1);var c=((0,n.isElement)(t)?(0,o.default)(t):window).visualViewport,u=!(0,r.default)()&&i,h=(a.left+(u&&c?c.offsetLeft:0))/l,p=(a.top+(u&&c?c.offsetTop:0))/d,f=a.width/l,g=a.height/d;return{width:f,height:g,top:p,right:h+f,bottom:p+g,left:h,x:h,y:p}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>b});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),u=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),h=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),p=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/contains.js"),f=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),g=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),m=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js");function v(t,e,i){return e===n.viewport?(0,g.default)((0,s.default)(t,i)):(0,c.isElement)(e)?function(t,e){var i=(0,u.default)(t,!1,"fixed"===e);return i.top=i.top+t.clientTop,i.left=i.left+t.clientLeft,i.bottom=i.top+t.clientHeight,i.right=i.left+t.clientWidth,i.width=t.clientWidth,i.height=t.clientHeight,i.x=i.left,i.y=i.top,i}(e,i):(0,g.default)((0,o.default)((0,l.default)(t)))}function b(t,e,i,n){var s="clippingParents"===e?function(t){var e=(0,r.default)((0,h.default)(t)),i=["absolute","fixed"].indexOf((0,d.default)(t).position)>=0&&(0,c.isHTMLElement)(t)?(0,a.default)(t):t;return(0,c.isElement)(i)?e.filter((function(t){return(0,c.isElement)(t)&&(0,p.default)(t,i)&&"body"!==(0,f.default)(t)})):[]}(t):[].concat(e),o=[].concat(s,[i]),l=o[0],u=o.reduce((function(e,i){var s=v(t,i,n);return e.top=(0,m.max)(s.top,e.top),e.right=(0,m.min)(s.right,e.right),e.bottom=(0,m.min)(s.bottom,e.bottom),e.left=(0,m.max)(s.left,e.left),e}),v(t,l,n));return u.width=u.right-u.left,u.height=u.bottom-u.top,u.x=u.left,u.y=u.top,u}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>u});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js");function u(t,e,i){void 0===i&&(i=!1);var u=(0,r.isHTMLElement)(e),h=(0,r.isHTMLElement)(e)&&function(t){var e=t.getBoundingClientRect(),i=(0,c.round)(e.width)/t.offsetWidth||1,n=(0,c.round)(e.height)/t.offsetHeight||1;return 1!==i||1!==n}(e),p=(0,l.default)(e),f=(0,n.default)(t,h,i),g={scrollLeft:0,scrollTop:0},m={x:0,y:0};return(u||!u&&!i)&&(("body"!==(0,o.default)(e)||(0,d.default)(p))&&(g=(0,s.default)(e)),(0,r.isHTMLElement)(e)?((m=(0,n.default)(e,!0)).x+=e.clientLeft,m.y+=e.clientTop):p&&(m.x=(0,a.default)(p))),{x:f.left+g.scrollLeft-m.x,y:f.top+g.scrollTop-m.y,width:f.width,height:f.height}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function s(t){return(0,n.default)(t).getComputedStyle(t)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function s(t){return(((0,n.isElement)(t)?t.ownerDocument:t.document)||window.document).documentElement}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js");function l(t){var e,i=(0,n.default)(t),l=(0,r.default)(t),d=null==(e=t.ownerDocument)?void 0:e.body,c=(0,a.max)(i.scrollWidth,i.clientWidth,d?d.scrollWidth:0,d?d.clientWidth:0),u=(0,a.max)(i.scrollHeight,i.clientHeight,d?d.scrollHeight:0,d?d.clientHeight:0),h=-l.scrollLeft+(0,o.default)(t),p=-l.scrollTop;return"rtl"===(0,s.default)(d||i).direction&&(h+=(0,a.max)(i.clientWidth,d?d.clientWidth:0)-c),{width:c,height:u,x:h,y:p}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":(t,e,i)=>{"use strict";function n(t){return{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");function s(t){var e=(0,n.default)(t),i=t.offsetWidth,s=t.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-s)<=1&&(s=e.height),{x:t.offsetLeft,y:t.offsetTop,width:i,height:s}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":(t,e,i)=>{"use strict";function n(t){return t?(t.nodeName||"").toLowerCase():null}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");function a(t){return t!==(0,s.default)(t)&&(0,o.isHTMLElement)(t)?(0,r.default)(t):(0,n.default)(t)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>u});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/userAgent.js");function c(t){return(0,r.isHTMLElement)(t)&&"fixed"!==(0,o.default)(t).position?t.offsetParent:null}function u(t){for(var e=(0,n.default)(t),i=c(t);i&&(0,a.default)(i)&&"static"===(0,o.default)(i).position;)i=c(i);return i&&("html"===(0,s.default)(i)||"body"===(0,s.default)(i)&&"static"===(0,o.default)(i).position)?e:i||function(t){var e=/firefox/i.test((0,d.default)());if(/Trident/i.test((0,d.default)())&&(0,r.isHTMLElement)(t)&&"fixed"===(0,o.default)(t).position)return null;var i=(0,l.default)(t);for((0,r.isShadowRoot)(i)&&(i=i.host);(0,r.isHTMLElement)(i)&&["html","body"].indexOf((0,s.default)(i))<0;){var n=(0,o.default)(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||e&&"filter"===n.willChange||e&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(t)||e}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(t){return"html"===(0,n.default)(t)?t:t.assignedSlot||t.parentNode||((0,o.isShadowRoot)(t)?t.host:null)||(0,s.default)(t)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function a(t){return["html","body","#document"].indexOf((0,o.default)(t))>=0?t.ownerDocument.body:(0,r.isHTMLElement)(t)&&(0,s.default)(t)?t:a((0,n.default)(t))}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function a(t,e){var i=(0,n.default)(t),a=(0,s.default)(t),l=i.visualViewport,d=a.clientWidth,c=a.clientHeight,u=0,h=0;if(l){d=l.width,c=l.height;var p=(0,r.default)();(p||!p&&"fixed"===e)&&(u=l.offsetLeft,h=l.offsetTop)}return{width:d,height:c,x:u+(0,o.default)(t),y:h}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js":(t,e,i)=>{"use strict";function n(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function s(t){var e=(0,n.default)(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");function r(t){return(0,n.default)((0,s.default)(t)).left+(0,o.default)(t).scrollLeft}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{isElement:()=>s,isHTMLElement:()=>o,isShadowRoot:()=>r});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function s(t){return t instanceof(0,n.default)(t).Element||t instanceof Element}function o(t){return t instanceof(0,n.default)(t).HTMLElement||t instanceof HTMLElement}function r(t){return"undefined"!=typeof ShadowRoot&&(t instanceof(0,n.default)(t).ShadowRoot||t instanceof ShadowRoot)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/userAgent.js");function s(){return!/^((?!chrome|android).)*safari/i.test((0,n.default)())}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");function s(t){var e=(0,n.default)(t),i=e.overflow,s=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+o+s)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");function s(t){return["table","td","th"].indexOf((0,n.default)(t))>=0}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");function a(t,e){var i;void 0===e&&(e=[]);var l=(0,n.default)(t),d=l===(null==(i=t.ownerDocument)?void 0:i.body),c=(0,o.default)(l),u=d?[c].concat(c.visualViewport||[],(0,r.default)(l)?l:[]):l,h=e.concat(u);return d?h:h.concat(a((0,s.default)(u)))}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{afterMain:()=>x,afterRead:()=>y,afterWrite:()=>R,auto:()=>a,basePlacements:()=>l,beforeMain:()=>C,beforeRead:()=>v,beforeWrite:()=>M,bottom:()=>s,clippingParents:()=>u,end:()=>c,left:()=>r,main:()=>_,modifierPhases:()=>A,placements:()=>m,popper:()=>p,read:()=>b,reference:()=>f,right:()=>o,start:()=>d,top:()=>n,variationPlacements:()=>g,viewport:()=>h,write:()=>w});var n="top",s="bottom",o="right",r="left",a="auto",l=[n,s,o,r],d="start",c="end",u="clippingParents",h="viewport",p="popper",f="reference",g=l.reduce((function(t,e){return t.concat([e+"-"+d,e+"-"+c])}),[]),m=[].concat(l,[a]).reduce((function(t,e){return t.concat([e,e+"-"+d,e+"-"+c])}),[]),v="beforeRead",b="read",y="afterRead",C="beforeMain",_="main",x="afterMain",M="beforeWrite",w="write",R="afterWrite",A=[v,b,y,C,_,x,M,w,R]},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{afterMain:()=>n.afterMain,afterRead:()=>n.afterRead,afterWrite:()=>n.afterWrite,applyStyles:()=>s.applyStyles,arrow:()=>s.arrow,auto:()=>n.auto,basePlacements:()=>n.basePlacements,beforeMain:()=>n.beforeMain,beforeRead:()=>n.beforeRead,beforeWrite:()=>n.beforeWrite,bottom:()=>n.bottom,clippingParents:()=>n.clippingParents,computeStyles:()=>s.computeStyles,createPopper:()=>a.createPopper,createPopperBase:()=>o.createPopper,createPopperLite:()=>l.createPopper,detectOverflow:()=>r.default,end:()=>n.end,eventListeners:()=>s.eventListeners,flip:()=>s.flip,hide:()=>s.hide,left:()=>n.left,main:()=>n.main,modifierPhases:()=>n.modifierPhases,offset:()=>s.offset,placements:()=>n.placements,popper:()=>n.popper,popperGenerator:()=>o.popperGenerator,popperOffsets:()=>s.popperOffsets,preventOverflow:()=>s.preventOverflow,read:()=>n.read,reference:()=>n.reference,right:()=>n.right,start:()=>n.start,top:()=>n.top,variationPlacements:()=>n.variationPlacements,viewport:()=>n.viewport,write:()=>n.write});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/index.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/createPopper.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/popper.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/popper-lite.js")},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/applyStyles.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");const o={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var i=e.styles[t]||{},o=e.attributes[t]||{},r=e.elements[t];(0,s.isHTMLElement)(r)&&(0,n.default)(r)&&(Object.assign(r.style,i),Object.keys(o).forEach((function(t){var e=o[t];!1===e?r.removeAttribute(t):r.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach((function(t){var o=e.elements[t],r=e.attributes[t]||{},a=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:i[t]).reduce((function(t,e){return t[e]="",t}),{});(0,s.isHTMLElement)(o)&&(0,n.default)(o)&&(Object.assign(o.style,a),Object.keys(r).forEach((function(t){o.removeAttribute(t)})))}))}},requires:["computeStyles"]}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/arrow.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/contains.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/within.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/expandToHashMap.js"),u=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js");const h={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,i=t.state,o=t.name,h=t.options,p=i.elements.arrow,f=i.modifiersData.popperOffsets,g=(0,n.default)(i.placement),m=(0,a.default)(g),v=[u.left,u.right].indexOf(g)>=0?"height":"width";if(p&&f){var b=function(t,e){return t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t,(0,d.default)("number"!=typeof t?t:(0,c.default)(t,u.basePlacements))}(h.padding,i),y=(0,s.default)(p),C="y"===m?u.top:u.left,_="y"===m?u.bottom:u.right,x=i.rects.reference[v]+i.rects.reference[m]-f[m]-i.rects.popper[v],M=f[m]-i.rects.reference[m],w=(0,r.default)(p),R=w?"y"===m?w.clientHeight||0:w.clientWidth||0:0,A=x/2-M/2,D=b[C],T=R-y[v]-b[_],S=R/2-y[v]/2+A,k=(0,l.within)(D,S,T),B=m;i.modifiersData[o]=((e={})[B]=k,e.centerOffset=k-S,e)}},effect:function(t){var e=t.state,i=t.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=e.elements.popper.querySelector(n)))&&(0,o.default)(e.elements.popper,n)&&(e.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/computeStyles.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>p,mapToStyles:()=>h});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getVariation.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js"),u={top:"auto",right:"auto",bottom:"auto",left:"auto"};function h(t){var e,i=t.popper,l=t.popperRect,d=t.placement,h=t.variation,p=t.offsets,f=t.position,g=t.gpuAcceleration,m=t.adaptive,v=t.roundOffsets,b=t.isFixed,y=p.x,C=void 0===y?0:y,_=p.y,x=void 0===_?0:_,M="function"==typeof v?v({x:C,y:x}):{x:C,y:x};C=M.x,x=M.y;var w=p.hasOwnProperty("x"),R=p.hasOwnProperty("y"),A=n.left,D=n.top,T=window;if(m){var S=(0,s.default)(i),k="clientHeight",B="clientWidth";if(S===(0,o.default)(i)&&(S=(0,r.default)(i),"static"!==(0,a.default)(S).position&&"absolute"===f&&(k="scrollHeight",B="scrollWidth")),d===n.top||(d===n.left||d===n.right)&&h===n.end)D=n.bottom,x-=(b&&S===T&&T.visualViewport?T.visualViewport.height:S[k])-l.height,x*=g?1:-1;if(d===n.left||(d===n.top||d===n.bottom)&&h===n.end)A=n.right,C-=(b&&S===T&&T.visualViewport?T.visualViewport.width:S[B])-l.width,C*=g?1:-1}var V,j=Object.assign({position:f},m&&u),E=!0===v?function(t,e){var i=t.x,n=t.y,s=e.devicePixelRatio||1;return{x:(0,c.round)(i*s)/s||0,y:(0,c.round)(n*s)/s||0}}({x:C,y:x},(0,o.default)(i)):{x:C,y:x};return C=E.x,x=E.y,g?Object.assign({},j,((V={})[D]=R?"0":"",V[A]=w?"0":"",V.transform=(T.devicePixelRatio||1)<=1?"translate("+C+"px, "+x+"px)":"translate3d("+C+"px, "+x+"px, 0)",V)):Object.assign({},j,((e={})[D]=R?x+"px":"",e[A]=w?C+"px":"",e.transform="",e))}const p={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,i=t.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,c=void 0===a||a,u={placement:(0,l.default)(e.placement),variation:(0,d.default)(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,h(Object.assign({},u,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:c})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,h(Object.assign({},u,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/eventListeners.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s={passive:!0};const o={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,i=t.instance,o=t.options,r=o.scroll,a=void 0===r||r,l=o.resize,d=void 0===l||l,c=(0,n.default)(e.elements.popper),u=[].concat(e.scrollParents.reference,e.scrollParents.popper);return a&&u.forEach((function(t){t.addEventListener("scroll",i.update,s)})),d&&c.addEventListener("resize",i.update,s),function(){a&&u.forEach((function(t){t.removeEventListener("scroll",i.update,s)})),d&&c.removeEventListener("resize",i.update,s)}},data:{}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/flip.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>c});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getVariation.js");const c={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,c=t.name;if(!e.modifiersData[c]._skip){for(var u=i.mainAxis,h=void 0===u||u,p=i.altAxis,f=void 0===p||p,g=i.fallbackPlacements,m=i.padding,v=i.boundary,b=i.rootBoundary,y=i.altBoundary,C=i.flipVariations,_=void 0===C||C,x=i.allowedAutoPlacements,M=e.options.placement,w=(0,s.default)(M),R=g||(w===M||!_?[(0,n.default)(M)]:function(t){if((0,s.default)(t)===l.auto)return[];var e=(0,n.default)(t);return[(0,o.default)(t),e,(0,o.default)(e)]}(M)),A=[M].concat(R).reduce((function(t,i){return t.concat((0,s.default)(i)===l.auto?(0,a.default)(e,{placement:i,boundary:v,rootBoundary:b,padding:m,flipVariations:_,allowedAutoPlacements:x}):i)}),[]),D=e.rects.reference,T=e.rects.popper,S=new Map,k=!0,B=A[0],V=0;V<A.length;V++){var j=A[V],E=(0,s.default)(j),P=(0,d.default)(j)===l.start,L=[l.top,l.bottom].indexOf(E)>=0,O=L?"width":"height",I=(0,r.default)(e,{placement:j,boundary:v,rootBoundary:b,altBoundary:y,padding:m}),F=L?P?l.right:l.left:P?l.bottom:l.top;D[O]>T[O]&&(F=(0,n.default)(F));var N=(0,n.default)(F),Y=[];if(h&&Y.push(I[E]<=0),f&&Y.push(I[F]<=0,I[N]<=0),Y.every((function(t){return t}))){B=j,k=!1;break}S.set(j,Y)}if(k)for(var K=function(t){var e=A.find((function(e){var i=S.get(e);if(i)return i.slice(0,t).every((function(t){return t}))}));if(e)return B=e,"break"},H=_?3:1;H>0;H--){if("break"===K(H))break}e.placement!==B&&(e.modifiersData[c]._skip=!0,e.placement=B,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/hide.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js");function o(t,e,i){return void 0===i&&(i={x:0,y:0}),{top:t.top-e.height-i.y,right:t.right-e.width+i.x,bottom:t.bottom-e.height+i.y,left:t.left-e.width-i.x}}function r(t){return[n.top,n.right,n.bottom,n.left].some((function(e){return t[e]>=0}))}const a={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,i=t.name,n=e.rects.reference,a=e.rects.popper,l=e.modifiersData.preventOverflow,d=(0,s.default)(e,{elementContext:"reference"}),c=(0,s.default)(e,{altBoundary:!0}),u=o(d,n),h=o(c,a,l),p=r(u),f=r(h);e.modifiersData[i]={referenceClippingOffsets:u,popperEscapeOffsets:h,isReferenceHidden:p,hasPopperEscaped:f},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":p,"data-popper-escaped":f})}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{applyStyles:()=>n.default,arrow:()=>s.default,computeStyles:()=>o.default,eventListeners:()=>r.default,flip:()=>a.default,hide:()=>l.default,offset:()=>d.default,popperOffsets:()=>c.default,preventOverflow:()=>u.default});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/arrow.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/flip.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/hide.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/offset.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),u=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js")},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/offset.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r,distanceAndSkiddingToXY:()=>o});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js");function o(t,e,i){var o=(0,n.default)(t),r=[s.left,s.top].indexOf(o)>=0?-1:1,a="function"==typeof i?i(Object.assign({},e,{placement:t})):i,l=a[0],d=a[1];return l=l||0,d=(d||0)*r,[s.left,s.right].indexOf(o)>=0?{x:d,y:l}:{x:l,y:d}}const r={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,i=t.options,n=t.name,r=i.offset,a=void 0===r?[0,0]:r,l=s.placements.reduce((function(t,i){return t[i]=o(i,e.rects,a),t}),{}),d=l[e.placement],c=d.x,u=d.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=c,e.modifiersData.popperOffsets.y+=u),e.modifiersData[n]=l}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/computeOffsets.js");const s={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,i=t.name;e.modifiersData[i]=(0,n.default)({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>f});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getAltAxis.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/within.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js"),u=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getVariation.js"),h=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js"),p=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js");const f={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,f=t.name,g=i.mainAxis,m=void 0===g||g,v=i.altAxis,b=void 0!==v&&v,y=i.boundary,C=i.rootBoundary,_=i.altBoundary,x=i.padding,M=i.tether,w=void 0===M||M,R=i.tetherOffset,A=void 0===R?0:R,D=(0,c.default)(e,{boundary:y,rootBoundary:C,padding:x,altBoundary:_}),T=(0,s.default)(e.placement),S=(0,u.default)(e.placement),k=!S,B=(0,o.default)(T),V=(0,r.default)(B),j=e.modifiersData.popperOffsets,E=e.rects.reference,P=e.rects.popper,L="function"==typeof A?A(Object.assign({},e.rects,{placement:e.placement})):A,O="number"==typeof L?{mainAxis:L,altAxis:L}:Object.assign({mainAxis:0,altAxis:0},L),I=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,F={x:0,y:0};if(j){if(m){var N,Y="y"===B?n.top:n.left,K="y"===B?n.bottom:n.right,H="y"===B?"height":"width",z=j[B],W=z+D[Y],$=z-D[K],q=w?-P[H]/2:0,U=S===n.start?E[H]:P[H],X=S===n.start?-P[H]:-E[H],G=e.elements.arrow,Q=w&&G?(0,l.default)(G):{width:0,height:0},J=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:(0,h.default)(),Z=J[Y],tt=J[K],et=(0,a.within)(0,E[H],Q[H]),it=k?E[H]/2-q-et-Z-O.mainAxis:U-et-Z-O.mainAxis,nt=k?-E[H]/2+q+et+tt+O.mainAxis:X+et+tt+O.mainAxis,st=e.elements.arrow&&(0,d.default)(e.elements.arrow),ot=st?"y"===B?st.clientTop||0:st.clientLeft||0:0,rt=null!=(N=null==I?void 0:I[B])?N:0,at=z+it-rt-ot,lt=z+nt-rt,dt=(0,a.within)(w?(0,p.min)(W,at):W,z,w?(0,p.max)($,lt):$);j[B]=dt,F[B]=dt-z}if(b){var ct,ut="x"===B?n.top:n.left,ht="x"===B?n.bottom:n.right,pt=j[V],ft="y"===V?"height":"width",gt=pt+D[ut],mt=pt-D[ht],vt=-1!==[n.top,n.left].indexOf(T),bt=null!=(ct=null==I?void 0:I[V])?ct:0,yt=vt?gt:pt-E[ft]-P[ft]-bt+O.altAxis,Ct=vt?pt+E[ft]+P[ft]-bt-O.altAxis:mt,_t=w&&vt?(0,a.withinMaxClamp)(yt,pt,Ct):(0,a.within)(w?yt:gt,pt,w?Ct:mt);j[V]=_t,F[V]=_t-pt}e.modifiersData[f]=F}},requiresIfExists:["offset"]}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/popper-lite.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{createPopper:()=>c,defaultModifiers:()=>d,detectOverflow:()=>s.default,popperGenerator:()=>n.popperGenerator});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/createPopper.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),d=[o.default,r.default,a.default,l.default],c=(0,n.popperGenerator)({defaultModifiers:d})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/popper.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{applyStyles:()=>g.applyStyles,arrow:()=>g.arrow,computeStyles:()=>g.computeStyles,createPopper:()=>v,createPopperLite:()=>f.createPopper,defaultModifiers:()=>m,detectOverflow:()=>s.default,eventListeners:()=>g.eventListeners,flip:()=>g.flip,hide:()=>g.hide,offset:()=>g.offset,popperGenerator:()=>n.popperGenerator,popperOffsets:()=>g.popperOffsets,preventOverflow:()=>g.preventOverflow});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/createPopper.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/offset.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/flip.js"),u=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js"),h=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/arrow.js"),p=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/hide.js"),f=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/popper-lite.js"),g=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/modifiers/index.js"),m=[o.default,r.default,a.default,l.default,d.default,c.default,u.default,h.default,p.default],v=(0,n.popperGenerator)({defaultModifiers:m})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getVariation.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");function a(t,e){void 0===e&&(e={});var i=e,a=i.placement,l=i.boundary,d=i.rootBoundary,c=i.padding,u=i.flipVariations,h=i.allowedAutoPlacements,p=void 0===h?s.placements:h,f=(0,n.default)(a),g=f?u?s.variationPlacements:s.variationPlacements.filter((function(t){return(0,n.default)(t)===f})):s.basePlacements,m=g.filter((function(t){return p.indexOf(t)>=0}));0===m.length&&(m=g);var v=m.reduce((function(e,i){return e[i]=(0,o.default)(t,{placement:i,boundary:l,rootBoundary:d,padding:c})[(0,r.default)(i)],e}),{});return Object.keys(v).sort((function(t,e){return v[t]-v[e]}))}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/computeOffsets.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getVariation.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js");function a(t){var e,i=t.reference,a=t.element,l=t.placement,d=l?(0,n.default)(l):null,c=l?(0,s.default)(l):null,u=i.x+i.width/2-a.width/2,h=i.y+i.height/2-a.height/2;switch(d){case r.top:e={x:u,y:i.y-a.height};break;case r.bottom:e={x:u,y:i.y+i.height};break;case r.right:e={x:i.x+i.width,y:h};break;case r.left:e={x:i.x-a.width,y:h};break;default:e={x:i.x,y:i.y}}var p=d?(0,o.default)(d):null;if(null!=p){var f="y"===p?"height":"width";switch(c){case r.start:e[p]=e[p]-(i[f]/2-a[f]/2);break;case r.end:e[p]=e[p]+(i[f]/2-a[f]/2)}}return e}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/debounce.js":(t,e,i)=>{"use strict";function n(t){var e;return function(){return e||(e=new Promise((function(i){Promise.resolve().then((function(){e=void 0,i(t())}))}))),e}}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/detectOverflow.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/computeOffsets.js"),a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),l=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js"),d=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),c=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),u=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/expandToHashMap.js");function h(t,e){void 0===e&&(e={});var i=e,h=i.placement,p=void 0===h?t.placement:h,f=i.strategy,g=void 0===f?t.strategy:f,m=i.boundary,v=void 0===m?l.clippingParents:m,b=i.rootBoundary,y=void 0===b?l.viewport:b,C=i.elementContext,_=void 0===C?l.popper:C,x=i.altBoundary,M=void 0!==x&&x,w=i.padding,R=void 0===w?0:w,A=(0,c.default)("number"!=typeof R?R:(0,u.default)(R,l.basePlacements)),D=_===l.popper?l.reference:l.popper,T=t.rects.popper,S=t.elements[M?D:_],k=(0,n.default)((0,d.isElement)(S)?S:S.contextElement||(0,s.default)(t.elements.popper),v,y,g),B=(0,o.default)(t.elements.reference),V=(0,r.default)({reference:B,element:T,strategy:"absolute",placement:p}),j=(0,a.default)(Object.assign({},T,V)),E=_===l.popper?j:B,P={top:k.top-E.top+A.top,bottom:E.bottom-k.bottom+A.bottom,left:k.left-E.left+A.left,right:E.right-k.right+A.right},L=t.modifiersData.offset;if(_===l.popper&&L){var O=L[p];Object.keys(P).forEach((function(t){var e=[l.right,l.bottom].indexOf(t)>=0?1:-1,i=[l.top,l.bottom].indexOf(t)>=0?"y":"x";P[t]+=O[i]*e}))}return P}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/expandToHashMap.js":(t,e,i)=>{"use strict";function n(t,e){return e.reduce((function(e,i){return e[i]=t,e}),{})}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getAltAxis.js":(t,e,i)=>{"use strict";function n(t){return"x"===t?"y":"x"}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getBasePlacement.js":(t,e,i)=>{"use strict";function n(t){return t.split("-")[0]}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":(t,e,i)=>{"use strict";function n(){return{top:0,right:0,bottom:0,left:0}}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":(t,e,i)=>{"use strict";function n(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n={left:"right",right:"left",bottom:"top",top:"bottom"};function s(t){return t.replace(/left|right|bottom|top/g,(function(t){return n[t]}))}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n={start:"end",end:"start"};function s(t){return t.replace(/start|end/g,(function(t){return n[t]}))}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getVariation.js":(t,e,i)=>{"use strict";function n(t){return t.split("-")[1]}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{max:()=>n,min:()=>s,round:()=>o});var n=Math.max,s=Math.min,o=Math.round},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/mergeByName.js":(t,e,i)=>{"use strict";function n(t){var e=t.reduce((function(t,e){var i=t[e.name];return t[e.name]=i?Object.assign({},i,e,{options:Object.assign({},i.options,e.options),data:Object.assign({},i.data,e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");function s(t){return Object.assign({},(0,n.default)(),t)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/orderModifiers.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/enums.js");function s(t){var e=new Map,i=new Set,n=[];function s(t){i.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!i.has(t)){var n=e.get(t);n&&s(n)}})),n.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){i.has(t.name)||s(t)})),n}function o(t){var e=s(t);return n.modifierPhases.reduce((function(t,i){return t.concat(e.filter((function(t){return t.phase===i})))}),[])}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/rectToClientRect.js":(t,e,i)=>{"use strict";function n(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/userAgent.js":(t,e,i)=>{"use strict";function n(){var t=navigator.userAgentData;return null!=t&&t.brands&&Array.isArray(t.brands)?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}i.r(e),i.d(e,{default:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/within.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{within:()=>s,withinMaxClamp:()=>o});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/utils/math.js");function s(t,e,i){return(0,n.max)(t,(0,n.min)(e,i))}function o(t,e,i){var n=s(t,e,i);return n>i?i:n}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js":(t,e,i)=>{var n,s,o;s=[i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js")],void 0===(o="function"==typeof(n=function(t,e){function i(){return new Date(Date.UTC.apply(Date,arguments))}function n(){var t=new Date;return i(t.getFullYear(),t.getMonth(),t.getDate())}function s(t,e){return t.getUTCFullYear()===e.getUTCFullYear()&&t.getUTCMonth()===e.getUTCMonth()&&t.getUTCDate()===e.getUTCDate()}function o(i,n){return function(){return n!==e&&t.fn.datepicker.deprecated(n),this[i].apply(this,arguments)}}function r(t){return t&&!isNaN(t.getTime())}var a,l=(a={get:function(t){return this.slice(t)[0]},contains:function(t){for(var e=t&&t.valueOf(),i=0,n=this.length;i<n;i++)if(0<=this[i].valueOf()-e&&this[i].valueOf()-e<864e5)return i;return-1},remove:function(t){this.splice(t,1)},replace:function(t){t&&(Array.isArray(t)||(t=[t]),this.clear(),this.push.apply(this,t))},clear:function(){this.length=0},copy:function(){var t=new l;return t.replace(this),t}},function(){var e=[];return e.push.apply(e,arguments),t.extend(e,a),e}),d=function(e,i){t.data(e,"datepicker",this),this._events=[],this._secondaryEvents=[],this._process_options(i),this.dates=new l,this.viewDate=this.o.defaultViewDate,this.focusDate=null,this.element=t(e),this.isInput=this.element.is("input"),this.inputField=this.isInput?this.element:this.element.find("input"),this.component=!!this.element.hasClass("date")&&this.element.find(".add-on, .input-group-addon, .input-group-append, .input-group-prepend, .btn"),this.component&&0===this.component.length&&(this.component=!1),null===this.o.isInline?this.isInline=!this.component&&!this.isInput:this.isInline=this.o.isInline,this.picker=t(b.template),this._check_template(this.o.templates.leftArrow)&&this.picker.find(".prev").html(this.o.templates.leftArrow),this._check_template(this.o.templates.rightArrow)&&this.picker.find(".next").html(this.o.templates.rightArrow),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&this.picker.addClass("datepicker-rtl"),this.o.calendarWeeks&&this.picker.find(".datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan",(function(t,e){return Number(e)+1})),this._process_options({startDate:this._o.startDate,endDate:this._o.endDate,daysOfWeekDisabled:this.o.daysOfWeekDisabled,daysOfWeekHighlighted:this.o.daysOfWeekHighlighted,datesDisabled:this.o.datesDisabled}),this._allow_update=!1,this.setViewMode(this.o.startView),this._allow_update=!0,this.fillDow(),this.fillMonths(),this.update(),this.isInline&&this.show()};d.prototype={constructor:d,_resolveViewName:function(e){return t.each(b.viewModes,(function(i,n){if(e===i||-1!==t.inArray(e,n.names))return e=i,!1})),e},_resolveDaysOfWeek:function(e){return Array.isArray(e)||(e=e.split(/[,\s]*/)),t.map(e,Number)},_check_template:function(i){try{return i!==e&&""!==i&&((i.match(/[<>]/g)||[]).length<=0||t(i).length>0)}catch(t){return!1}},_process_options:function(e){this._o=t.extend({},this._o,e);var s=this.o=t.extend({},this._o),o=s.language;v[o]||(o=o.split("-")[0],v[o]||(o=g.language)),s.language=o,s.startView=this._resolveViewName(s.startView),s.minViewMode=this._resolveViewName(s.minViewMode),s.maxViewMode=this._resolveViewName(s.maxViewMode),s.startView=Math.max(this.o.minViewMode,Math.min(this.o.maxViewMode,s.startView)),!0!==s.multidate&&(s.multidate=Number(s.multidate)||!1,!1!==s.multidate&&(s.multidate=Math.max(0,s.multidate))),s.multidateSeparator=String(s.multidateSeparator),s.weekStart%=7,s.weekEnd=(s.weekStart+6)%7;var r=b.parseFormat(s.format);s.startDate!==-1/0&&(s.startDate?s.startDate instanceof Date?s.startDate=this._local_to_utc(this._zero_time(s.startDate)):s.startDate=b.parseDate(s.startDate,r,s.language,s.assumeNearbyYear):s.startDate=-1/0),s.endDate!==1/0&&(s.endDate?s.endDate instanceof Date?s.endDate=this._local_to_utc(this._zero_time(s.endDate)):s.endDate=b.parseDate(s.endDate,r,s.language,s.assumeNearbyYear):s.endDate=1/0),s.daysOfWeekDisabled=this._resolveDaysOfWeek(s.daysOfWeekDisabled||[]),s.daysOfWeekHighlighted=this._resolveDaysOfWeek(s.daysOfWeekHighlighted||[]),s.datesDisabled=s.datesDisabled||[],Array.isArray(s.datesDisabled)||(s.datesDisabled=s.datesDisabled.split(",")),s.datesDisabled=t.map(s.datesDisabled,(function(t){return b.parseDate(t,r,s.language,s.assumeNearbyYear)}));var a=String(s.orientation).toLowerCase().split(/\s+/g),l=s.orientation.toLowerCase();if(a=t.grep(a,(function(t){return/^auto|left|right|top|bottom$/.test(t)})),s.orientation={x:"auto",y:"auto"},l&&"auto"!==l)if(1===a.length)switch(a[0]){case"top":case"bottom":s.orientation.y=a[0];break;case"left":case"right":s.orientation.x=a[0]}else l=t.grep(a,(function(t){return/^left|right$/.test(t)})),s.orientation.x=l[0]||"auto",l=t.grep(a,(function(t){return/^top|bottom$/.test(t)})),s.orientation.y=l[0]||"auto";if(s.defaultViewDate instanceof Date||"string"==typeof s.defaultViewDate)s.defaultViewDate=b.parseDate(s.defaultViewDate,r,s.language,s.assumeNearbyYear);else if(s.defaultViewDate){var d=s.defaultViewDate.year||(new Date).getFullYear(),c=s.defaultViewDate.month||0,u=s.defaultViewDate.day||1;s.defaultViewDate=i(d,c,u)}else s.defaultViewDate=n()},_applyEvents:function(t){for(var i,n,s,o=0;o<t.length;o++)i=t[o][0],2===t[o].length?(n=e,s=t[o][1]):3===t[o].length&&(n=t[o][1],s=t[o][2]),i.on(s,n)},_unapplyEvents:function(t){for(var i,n,s,o=0;o<t.length;o++)i=t[o][0],2===t[o].length?(s=e,n=t[o][1]):3===t[o].length&&(s=t[o][1],n=t[o][2]),i.off(n,s)},_buildEvents:function(){var e={keyup:t.proxy((function(e){-1===t.inArray(e.keyCode,[27,37,39,38,40,32,13,9])&&this.update()}),this),keydown:t.proxy(this.keydown,this),paste:t.proxy(this.paste,this)};!0===this.o.showOnFocus&&(e.focus=t.proxy(this.show,this)),this.isInput?this._events=[[this.element,e]]:this.component&&this.inputField.length?this._events=[[this.inputField,e],[this.component,{click:t.proxy(this.show,this)}]]:this._events=[[this.element,{click:t.proxy(this.show,this),keydown:t.proxy(this.keydown,this)}]],this._events.push([this.element,"*",{blur:t.proxy((function(t){this._focused_from=t.target}),this)}],[this.element,{blur:t.proxy((function(t){this._focused_from=t.target}),this)}]),this.o.immediateUpdates&&this._events.push([this.element,{"changeYear changeMonth":t.proxy((function(t){this.update(t.date)}),this)}]),this._secondaryEvents=[[this.picker,{click:t.proxy(this.click,this)}],[this.picker,".prev, .next",{click:t.proxy(this.navArrowsClick,this)}],[this.picker,".day:not(.disabled)",{click:t.proxy(this.dayCellClick,this)}],[t(window),{resize:t.proxy(this.place,this)}],[t(document),{"mousedown touchstart":t.proxy((function(t){this.element.is(t.target)||this.element.find(t.target).length||this.picker.is(t.target)||this.picker.find(t.target).length||this.isInline||this.hide()}),this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(e,i){var n=i||this.dates.get(-1),s=this._utc_to_local(n);this.element.trigger({type:e,date:s,viewMode:this.viewMode,dates:t.map(this.dates,this._utc_to_local),format:t.proxy((function(t,e){0===arguments.length?(t=this.dates.length-1,e=this.o.format):"string"==typeof t&&(e=t,t=this.dates.length-1),e=e||this.o.format;var i=this.dates.get(t);return b.formatDate(i,e,this.o.language)}),this)})},show:function(){if(!(this.inputField.is(":disabled")||this.inputField.prop("readonly")&&!1===this.o.enableOnReadonly))return this.isInline||this.picker.appendTo(this.o.container),this.place(),this.picker.show(),this._attachSecondaryEvents(),this._trigger("show"),(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&this.o.disableTouchKeyboard&&t(this.element).blur(),this},hide:function(){return this.isInline||!this.picker.is(":visible")||(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this.setViewMode(this.o.startView),this.o.forceParse&&this.inputField.val()&&this.setValue(),this._trigger("hide")),this},destroy:function(){return this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date,this},paste:function(e){var i;if(e.originalEvent.clipboardData&&e.originalEvent.clipboardData.types&&-1!==t.inArray("text/plain",e.originalEvent.clipboardData.types))i=e.originalEvent.clipboardData.getData("text/plain");else{if(!window.clipboardData)return;i=window.clipboardData.getData("Text")}this.setDate(i),this.update(),e.preventDefault()},_utc_to_local:function(t){if(!t)return t;var e=new Date(t.getTime()+6e4*t.getTimezoneOffset());return e.getTimezoneOffset()!==t.getTimezoneOffset()&&(e=new Date(t.getTime()+6e4*e.getTimezoneOffset())),e},_local_to_utc:function(t){return t&&new Date(t.getTime()-6e4*t.getTimezoneOffset())},_zero_time:function(t){return t&&new Date(t.getFullYear(),t.getMonth(),t.getDate())},_zero_utc_time:function(t){return t&&i(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate())},getDates:function(){return t.map(this.dates,this._utc_to_local)},getUTCDates:function(){return t.map(this.dates,(function(t){return new Date(t)}))},getDate:function(){return this._utc_to_local(this.getUTCDate())},getUTCDate:function(){var t=this.dates.get(-1);return t!==e?new Date(t):null},clearDates:function(){this.inputField.val(""),this._trigger("changeDate"),this.update(),this.o.autoclose&&this.hide()},setDates:function(){var t=Array.isArray(arguments[0])?arguments[0]:arguments;return this.update.apply(this,t),this._trigger("changeDate"),this.setValue(),this},setUTCDates:function(){var e=Array.isArray(arguments[0])?arguments[0]:arguments;return this.setDates.apply(this,t.map(e,this._utc_to_local)),this},setDate:o("setDates"),setUTCDate:o("setUTCDates"),remove:o("destroy","Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead"),setValue:function(){var t=this.getFormattedDate();return this.inputField.val(t),this},getFormattedDate:function(i){i===e&&(i=this.o.format);var n=this.o.language;return t.map(this.dates,(function(t){return b.formatDate(t,i,n)})).join(this.o.multidateSeparator)},getStartDate:function(){return this.o.startDate},setStartDate:function(t){return this._process_options({startDate:t}),this.update(),this.updateNavArrows(),this},getEndDate:function(){return this.o.endDate},setEndDate:function(t){return this._process_options({endDate:t}),this.update(),this.updateNavArrows(),this},setDaysOfWeekDisabled:function(t){return this._process_options({daysOfWeekDisabled:t}),this.update(),this},setDaysOfWeekHighlighted:function(t){return this._process_options({daysOfWeekHighlighted:t}),this.update(),this},setDatesDisabled:function(t){return this._process_options({datesDisabled:t}),this.update(),this},place:function(){if(this.isInline)return this;var e=this.picker.outerWidth(),i=this.picker.outerHeight(),n=10,s=t(this.o.container),o=s.width(),r="body"===this.o.container?t(document).scrollTop():s.scrollTop(),a=s.offset(),l=[0];this.element.parents().each((function(){var e=t(this).css("z-index");"auto"!==e&&0!==Number(e)&&l.push(Number(e))}));var d=Math.max.apply(Math,l)+this.o.zIndexOffset,c=this.component?this.component.parent().offset():this.element.offset(),u=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),h=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),p=c.left-a.left,f=c.top-a.top;"body"!==this.o.container&&(f+=r),this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(p-=e-h)):c.left<0?(this.picker.addClass("datepicker-orient-left"),p-=c.left-n):p+e>o?(this.picker.addClass("datepicker-orient-right"),p+=h-e):this.o.rtl?this.picker.addClass("datepicker-orient-right"):this.picker.addClass("datepicker-orient-left");var g=this.o.orientation.y;if("auto"===g&&(g=-r+f-i<0?"bottom":"top"),this.picker.addClass("datepicker-orient-"+g),"top"===g?f-=i+parseInt(this.picker.css("padding-top")):f+=u,this.o.rtl){var m=o-(p+h);this.picker.css({top:f,right:m,zIndex:d})}else this.picker.css({top:f,left:p,zIndex:d});return this},_allow_update:!0,update:function(){if(!this._allow_update)return this;var e=this.dates.copy(),i=[],n=!1;return arguments.length?(t.each(arguments,t.proxy((function(t,e){e instanceof Date&&(e=this._local_to_utc(e)),i.push(e)}),this)),n=!0):(i=(i=this.isInput?this.element.val():this.element.data("date")||this.inputField.val())&&this.o.multidate?i.split(this.o.multidateSeparator):[i],delete this.element.data().date),i=t.map(i,t.proxy((function(t){return b.parseDate(t,this.o.format,this.o.language,this.o.assumeNearbyYear)}),this)),i=t.grep(i,t.proxy((function(t){return!this.dateWithinRange(t)||!t}),this),!0),this.dates.replace(i),this.o.updateViewDate&&(this.dates.length?this.viewDate=new Date(this.dates.get(-1)):this.viewDate<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.viewDate>this.o.endDate?this.viewDate=new Date(this.o.endDate):this.viewDate=this.o.defaultViewDate),n?(this.setValue(),this.element.change()):this.dates.length&&String(e)!==String(this.dates)&&n&&(this._trigger("changeDate"),this.element.change()),!this.dates.length&&e.length&&(this._trigger("clearDate"),this.element.change()),this.fill(),this},fillDow:function(){if(this.o.showWeekDays){var e=this.o.weekStart,i="<tr>";for(this.o.calendarWeeks&&(i+='<th class="cw">&#160;</th>');e<this.o.weekStart+7;)i+='<th class="dow',-1!==t.inArray(e,this.o.daysOfWeekDisabled)&&(i+=" disabled"),i+='">'+v[this.o.language].daysMin[e++%7]+"</th>";i+="</tr>",this.picker.find(".datepicker-days thead").append(i)}},fillMonths:function(){for(var t=this._utc_to_local(this.viewDate),e="",i=0;i<12;i++)e+='<span class="month'+(t&&t.getMonth()===i?" focused":"")+'">'+v[this.o.language].monthsShort[i]+"</span>";this.picker.find(".datepicker-months td").html(e)},setRange:function(e){e&&e.length?this.range=t.map(e,(function(t){return t.valueOf()})):delete this.range,this.fill()},getClassNames:function(e){var i=[],o=this.viewDate.getUTCFullYear(),r=this.viewDate.getUTCMonth(),a=n();return e.getUTCFullYear()<o||e.getUTCFullYear()===o&&e.getUTCMonth()<r?i.push("old"):(e.getUTCFullYear()>o||e.getUTCFullYear()===o&&e.getUTCMonth()>r)&&i.push("new"),this.focusDate&&e.valueOf()===this.focusDate.valueOf()&&i.push("focused"),this.o.todayHighlight&&s(e,a)&&i.push("today"),-1!==this.dates.contains(e)&&i.push("active"),this.dateWithinRange(e)||i.push("disabled"),this.dateIsDisabled(e)&&i.push("disabled","disabled-date"),-1!==t.inArray(e.getUTCDay(),this.o.daysOfWeekHighlighted)&&i.push("highlighted"),this.range&&(e>this.range[0]&&e<this.range[this.range.length-1]&&i.push("range"),-1!==t.inArray(e.valueOf(),this.range)&&i.push("selected"),e.valueOf()===this.range[0]&&i.push("range-start"),e.valueOf()===this.range[this.range.length-1]&&i.push("range-end")),i},_fill_yearsView:function(i,n,s,o,r,a,l){for(var d,c,u,h="",p=s/10,f=this.picker.find(i),g=Math.floor(o/s)*s,m=g+9*p,v=Math.floor(this.viewDate.getFullYear()/p)*p,b=t.map(this.dates,(function(t){return Math.floor(t.getUTCFullYear()/p)*p})),y=g-p;y<=m+p;y+=p)d=[n],c=null,y===g-p?d.push("old"):y===m+p&&d.push("new"),-1!==t.inArray(y,b)&&d.push("active"),(y<r||y>a)&&d.push("disabled"),y===v&&d.push("focused"),l!==t.noop&&((u=l(new Date(y,0,1)))===e?u={}:"boolean"==typeof u?u={enabled:u}:"string"==typeof u&&(u={classes:u}),!1===u.enabled&&d.push("disabled"),u.classes&&(d=d.concat(u.classes.split(/\s+/))),u.tooltip&&(c=u.tooltip)),h+='<span class="'+d.join(" ")+'"'+(c?' title="'+c+'"':"")+">"+y+"</span>";f.find(".datepicker-switch").text(g+"-"+m),f.find("td").html(h)},fill:function(){var s,o,r=new Date(this.viewDate),a=r.getUTCFullYear(),l=r.getUTCMonth(),d=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,c=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,u=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,h=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,p=v[this.o.language].today||v.en.today||"",f=v[this.o.language].clear||v.en.clear||"",g=v[this.o.language].titleFormat||v.en.titleFormat,m=n(),y=(!0===this.o.todayBtn||"linked"===this.o.todayBtn)&&m>=this.o.startDate&&m<=this.o.endDate&&!this.weekOfDateIsDisabled(m);if(!isNaN(a)&&!isNaN(l)){this.picker.find(".datepicker-days .datepicker-switch").text(b.formatDate(r,g,this.o.language)),this.picker.find("tfoot .today").text(p).css("display",y?"table-cell":"none"),this.picker.find("tfoot .clear").text(f).css("display",!0===this.o.clearBtn?"table-cell":"none"),this.picker.find("thead .datepicker-title").text(this.o.title).css("display","string"==typeof this.o.title&&""!==this.o.title?"table-cell":"none"),this.updateNavArrows(),this.fillMonths();var C=i(a,l,0),_=C.getUTCDate();C.setUTCDate(_-(C.getUTCDay()-this.o.weekStart+7)%7);var x=new Date(C);C.getUTCFullYear()<100&&x.setUTCFullYear(C.getUTCFullYear()),x.setUTCDate(x.getUTCDate()+42),x=x.valueOf();for(var M,w,R=[];C.valueOf()<x;){if((M=C.getUTCDay())===this.o.weekStart&&(R.push("<tr>"),this.o.calendarWeeks)){var A=new Date(+C+(this.o.weekStart-M-7)%7*864e5),D=new Date(Number(A)+(11-A.getUTCDay())%7*864e5),T=new Date(Number(T=i(D.getUTCFullYear(),0,1))+(11-T.getUTCDay())%7*864e5),S=(D-T)/864e5/7+1;R.push('<td class="cw">'+S+"</td>")}(w=this.getClassNames(C)).push("day");var k=C.getUTCDate();this.o.beforeShowDay!==t.noop&&((o=this.o.beforeShowDay(this._utc_to_local(C)))===e?o={}:"boolean"==typeof o?o={enabled:o}:"string"==typeof o&&(o={classes:o}),!1===o.enabled&&w.push("disabled"),o.classes&&(w=w.concat(o.classes.split(/\s+/))),o.tooltip&&(s=o.tooltip),o.content&&(k=o.content)),w="function"==typeof t.uniqueSort?t.uniqueSort(w):t.unique(w),R.push('<td class="'+w.join(" ")+'"'+(s?' title="'+s+'"':"")+' data-date="'+C.getTime().toString()+'">'+k+"</td>"),s=null,M===this.o.weekEnd&&R.push("</tr>"),C.setUTCDate(C.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").html(R.join(""));var B=v[this.o.language].monthsTitle||v.en.monthsTitle||"Months",V=this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode<2?B:a).end().find("tbody span").removeClass("active");if(t.each(this.dates,(function(t,e){e.getUTCFullYear()===a&&V.eq(e.getUTCMonth()).addClass("active")})),(a<d||a>u)&&V.addClass("disabled"),a===d&&V.slice(0,c).addClass("disabled"),a===u&&V.slice(h+1).addClass("disabled"),this.o.beforeShowMonth!==t.noop){var j=this;t.each(V,(function(i,n){var s=new Date(a,i,1),o=j.o.beforeShowMonth(s);o===e?o={}:"boolean"==typeof o?o={enabled:o}:"string"==typeof o&&(o={classes:o}),!1!==o.enabled||t(n).hasClass("disabled")||t(n).addClass("disabled"),o.classes&&t(n).addClass(o.classes),o.tooltip&&t(n).prop("title",o.tooltip)}))}this._fill_yearsView(".datepicker-years","year",10,a,d,u,this.o.beforeShowYear),this._fill_yearsView(".datepicker-decades","decade",100,a,d,u,this.o.beforeShowDecade),this._fill_yearsView(".datepicker-centuries","century",1e3,a,d,u,this.o.beforeShowCentury)}},updateNavArrows:function(){if(this._allow_update){var t,e,i=new Date(this.viewDate),n=i.getUTCFullYear(),s=i.getUTCMonth(),o=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,r=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,a=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,l=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,d=1;switch(this.viewMode){case 4:d*=10;case 3:d*=10;case 2:d*=10;case 1:t=Math.floor(n/d)*d<=o,e=Math.floor(n/d)*d+d>a;break;case 0:t=n<=o&&s<=r,e=n>=a&&s>=l}this.picker.find(".prev").toggleClass("disabled",t),this.picker.find(".next").toggleClass("disabled",e)}},click:function(e){var s,o,r,a;e.preventDefault(),e.stopPropagation(),(s=t(e.target)).hasClass("datepicker-switch")&&this.viewMode!==this.o.maxViewMode&&this.setViewMode(this.viewMode+1),s.hasClass("today")&&!s.hasClass("day")&&(this.setViewMode(0),this._setDate(n(),"linked"===this.o.todayBtn?null:"view")),s.hasClass("clear")&&this.clearDates(),s.hasClass("disabled")||(s.hasClass("month")||s.hasClass("year")||s.hasClass("decade")||s.hasClass("century"))&&(this.viewDate.setUTCDate(1),o=1,1===this.viewMode?(a=s.parent().find("span").index(s),r=this.viewDate.getUTCFullYear(),this.viewDate.setUTCMonth(a)):(a=0,r=Number(s.text()),this.viewDate.setUTCFullYear(r)),this._trigger(b.viewModes[this.viewMode-1].e,this.viewDate),this.viewMode===this.o.minViewMode?this._setDate(i(r,a,o)):(this.setViewMode(this.viewMode-1),this.fill())),this.picker.is(":visible")&&this._focused_from&&this._focused_from.focus(),delete this._focused_from},dayCellClick:function(e){var i=t(e.currentTarget).data("date"),n=new Date(i);this.o.updateViewDate&&(n.getUTCFullYear()!==this.viewDate.getUTCFullYear()&&this._trigger("changeYear",this.viewDate),n.getUTCMonth()!==this.viewDate.getUTCMonth()&&this._trigger("changeMonth",this.viewDate)),this._setDate(n)},navArrowsClick:function(e){var i=t(e.currentTarget).hasClass("prev")?-1:1;0!==this.viewMode&&(i*=12*b.viewModes[this.viewMode].navStep),this.viewDate=this.moveMonth(this.viewDate,i),this._trigger(b.viewModes[this.viewMode].e,this.viewDate),this.fill()},_toggle_multidate:function(t){var e=this.dates.contains(t);if(t||this.dates.clear(),-1!==e?(!0===this.o.multidate||this.o.multidate>1||this.o.toggleActive)&&this.dates.remove(e):!1===this.o.multidate?(this.dates.clear(),this.dates.push(t)):this.dates.push(t),"number"==typeof this.o.multidate)for(;this.dates.length>this.o.multidate;)this.dates.remove(0)},_setDate:function(t,e){e&&"date"!==e||this._toggle_multidate(t&&new Date(t)),(!e&&this.o.updateViewDate||"view"===e)&&(this.viewDate=t&&new Date(t)),this.fill(),this.setValue(),e&&"view"===e||this._trigger("changeDate"),this.inputField.trigger("change"),!this.o.autoclose||e&&"date"!==e||this.hide()},moveDay:function(t,e){var i=new Date(t);return i.setUTCDate(t.getUTCDate()+e),i},moveWeek:function(t,e){return this.moveDay(t,7*e)},moveMonth:function(t,e){if(!r(t))return this.o.defaultViewDate;if(!e)return t;var i,n,s=new Date(t.valueOf()),o=s.getUTCDate(),a=s.getUTCMonth(),l=Math.abs(e);if(e=e>0?1:-1,1===l)n=-1===e?function(){return s.getUTCMonth()===a}:function(){return s.getUTCMonth()!==i},i=a+e,s.setUTCMonth(i),i=(i+12)%12;else{for(var d=0;d<l;d++)s=this.moveMonth(s,e);i=s.getUTCMonth(),s.setUTCDate(o),n=function(){return i!==s.getUTCMonth()}}for(;n();)s.setUTCDate(--o),s.setUTCMonth(i);return s},moveYear:function(t,e){return this.moveMonth(t,12*e)},moveAvailableDate:function(t,e,i){do{if(t=this[i](t,e),!this.dateWithinRange(t))return!1;i="moveDay"}while(this.dateIsDisabled(t));return t},weekOfDateIsDisabled:function(e){return-1!==t.inArray(e.getUTCDay(),this.o.daysOfWeekDisabled)},dateIsDisabled:function(e){return this.weekOfDateIsDisabled(e)||t.grep(this.o.datesDisabled,(function(t){return s(e,t)})).length>0},dateWithinRange:function(t){return t>=this.o.startDate&&t<=this.o.endDate},keydown:function(t){if(this.picker.is(":visible")){var e,i,n=!1,s=this.focusDate||this.viewDate;switch(t.keyCode){case 27:this.focusDate?(this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill()):this.hide(),t.preventDefault(),t.stopPropagation();break;case 37:case 38:case 39:case 40:if(!this.o.keyboardNavigation||7===this.o.daysOfWeekDisabled.length)break;e=37===t.keyCode||38===t.keyCode?-1:1,0===this.viewMode?t.ctrlKey?(i=this.moveAvailableDate(s,e,"moveYear"))&&this._trigger("changeYear",this.viewDate):t.shiftKey?(i=this.moveAvailableDate(s,e,"moveMonth"))&&this._trigger("changeMonth",this.viewDate):37===t.keyCode||39===t.keyCode?i=this.moveAvailableDate(s,e,"moveDay"):this.weekOfDateIsDisabled(s)||(i=this.moveAvailableDate(s,e,"moveWeek")):1===this.viewMode?(38!==t.keyCode&&40!==t.keyCode||(e*=4),i=this.moveAvailableDate(s,e,"moveMonth")):2===this.viewMode&&(38!==t.keyCode&&40!==t.keyCode||(e*=4),i=this.moveAvailableDate(s,e,"moveYear")),i&&(this.focusDate=this.viewDate=i,this.setValue(),this.fill(),t.preventDefault());break;case 13:if(!this.o.forceParse)break;s=this.focusDate||this.dates.get(-1)||this.viewDate,this.o.keyboardNavigation&&(this._toggle_multidate(s),n=!0),this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.setValue(),this.fill(),this.picker.is(":visible")&&(t.preventDefault(),t.stopPropagation(),this.o.autoclose&&this.hide());break;case 9:this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill(),this.hide()}n&&(this.dates.length?this._trigger("changeDate"):this._trigger("clearDate"),this.inputField.trigger("change"))}else 40!==t.keyCode&&27!==t.keyCode||(this.show(),t.stopPropagation())},setViewMode:function(t){this.viewMode=t,this.picker.children("div").hide().filter(".datepicker-"+b.viewModes[this.viewMode].clsName).show(),this.updateNavArrows(),this._trigger("changeViewMode",new Date(this.viewDate))}};var c=function(e,i){t.data(e,"datepicker",this),this.element=t(e),this.inputs=t.map(i.inputs,(function(t){return t.jquery?t[0]:t})),delete i.inputs,this.keepEmptyValues=i.keepEmptyValues,delete i.keepEmptyValues,f.call(t(this.inputs),i).on("changeDate",t.proxy(this.dateUpdated,this)),this.pickers=t.map(this.inputs,(function(e){return t.data(e,"datepicker")})),this.updateDates()};function u(e,i){var n=t(e).data(),s={},o=new RegExp("^"+i.toLowerCase()+"([A-Z])");function r(t,e){return e.toLowerCase()}for(var a in i=new RegExp("^"+i.toLowerCase()),n)i.test(a)&&(s[a.replace(o,r)]=n[a]);return s}function h(e){var i={};if(v[e]||(e=e.split("-")[0],v[e])){var n=v[e];return t.each(m,(function(t,e){e in n&&(i[e]=n[e])})),i}}c.prototype={updateDates:function(){this.dates=t.map(this.pickers,(function(t){return t.getUTCDate()})),this.updateRanges()},updateRanges:function(){var e=t.map(this.dates,(function(t){return t.valueOf()}));t.each(this.pickers,(function(t,i){i.setRange(e)}))},clearDates:function(){t.each(this.pickers,(function(t,e){e.clearDates()}))},dateUpdated:function(i){if(!this.updating){this.updating=!0;var n=t.data(i.target,"datepicker");if(n!==e){var s=n.getUTCDate(),o=this.keepEmptyValues,r=t.inArray(i.target,this.inputs),a=r-1,l=r+1,d=this.inputs.length;if(-1!==r){if(t.each(this.pickers,(function(t,e){e.getUTCDate()||e!==n&&o||e.setUTCDate(s)})),s<this.dates[a])for(;a>=0&&s<this.dates[a]&&(this.pickers[a].element.val()||"").length>0;)this.pickers[a--].setUTCDate(s);else if(s>this.dates[l])for(;l<d&&s>this.dates[l]&&(this.pickers[l].element.val()||"").length>0;)this.pickers[l++].setUTCDate(s);this.updateDates(),delete this.updating}}}},destroy:function(){t.map(this.pickers,(function(t){t.destroy()})),t(this.inputs).off("changeDate",this.dateUpdated),delete this.element.data().datepicker},remove:o("destroy","Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead")};var p=t.fn.datepicker,f=function(i){var n,s=Array.apply(null,arguments);if(s.shift(),this.each((function(){var e=t(this),o=e.data("datepicker"),r="object"==typeof i&&i;if(!o){var a=u(this,"date"),l=h(t.extend({},g,a,r).language),p=t.extend({},g,l,a,r);e.hasClass("input-daterange")||p.inputs?(t.extend(p,{inputs:p.inputs||e.find("input").toArray()}),o=new c(this,p)):o=new d(this,p),e.data("datepicker",o)}"string"==typeof i&&"function"==typeof o[i]&&(n=o[i].apply(o,s))})),n===e||n instanceof d||n instanceof c)return this;if(this.length>1)throw new Error("Using only allowed for the collection of a single element ("+i+" function)");return n};t.fn.datepicker=f;var g=t.fn.datepicker.defaults={assumeNearbyYear:!1,autoclose:!1,beforeShowDay:t.noop,beforeShowMonth:t.noop,beforeShowYear:t.noop,beforeShowDecade:t.noop,beforeShowCentury:t.noop,calendarWeeks:!1,clearBtn:!1,toggleActive:!1,daysOfWeekDisabled:[],daysOfWeekHighlighted:[],datesDisabled:[],endDate:1/0,forceParse:!0,format:"mm/dd/yyyy",isInline:null,keepEmptyValues:!1,keyboardNavigation:!0,language:"en",minViewMode:0,maxViewMode:4,multidate:!1,multidateSeparator:",",orientation:"auto",rtl:!1,startDate:-1/0,startView:0,todayBtn:!1,todayHighlight:!1,updateViewDate:!0,weekStart:0,disableTouchKeyboard:!1,enableOnReadonly:!0,showOnFocus:!0,zIndexOffset:10,container:"body",immediateUpdates:!1,title:"",templates:{leftArrow:"&#x00AB;",rightArrow:"&#x00BB;"},showWeekDays:!0},m=t.fn.datepicker.locale_opts=["format","rtl","weekStart"];t.fn.datepicker.Constructor=d;var v=t.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM yyyy"}},b={viewModes:[{names:["days","month"],clsName:"days",e:"changeMonth"},{names:["months","year"],clsName:"months",e:"changeYear",navStep:1},{names:["years","decade"],clsName:"years",e:"changeDecade",navStep:10},{names:["decades","century"],clsName:"decades",e:"changeCentury",navStep:100},{names:["centuries","millennium"],clsName:"centuries",e:"changeMillennium",navStep:1e3}],validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,parseFormat:function(t){if("function"==typeof t.toValue&&"function"==typeof t.toDisplay)return t;var e=t.replace(this.validParts,"\0").split("\0"),i=t.match(this.validParts);if(!e||!e.length||!i||0===i.length)throw new Error("Invalid date format.");return{separators:e,parts:i}},parseDate:function(i,s,o,r){if(!i)return e;if(i instanceof Date)return i;if("string"==typeof s&&(s=b.parseFormat(s)),s.toValue)return s.toValue(i,s,o);var a,l,c,u,h,p={d:"moveDay",m:"moveMonth",w:"moveWeek",y:"moveYear"},f={yesterday:"-1d",today:"+0d",tomorrow:"+1d"};if(i in f&&(i=f[i]),/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(i)){for(a=i.match(/([\-+]\d+)([dmwy])/gi),i=new Date,u=0;u<a.length;u++)l=a[u].match(/([\-+]\d+)([dmwy])/i),c=Number(l[1]),h=p[l[2].toLowerCase()],i=d.prototype[h](i,c);return d.prototype._zero_utc_time(i)}function g(t,e){return!0===e&&(e=10),t<100&&(t+=2e3)>(new Date).getFullYear()+e&&(t-=100),t}a=i&&i.match(this.nonpunctuation)||[];var m,y,C={},_=["yyyy","yy","M","MM","m","mm","d","dd"],x={yyyy:function(t,e){return t.setUTCFullYear(r?g(e,r):e)},m:function(t,e){if(isNaN(t))return t;for(e-=1;e<0;)e+=12;for(e%=12,t.setUTCMonth(e);t.getUTCMonth()!==e;)t.setUTCDate(t.getUTCDate()-1);return t},d:function(t,e){return t.setUTCDate(e)}};x.yy=x.yyyy,x.M=x.MM=x.mm=x.m,x.dd=x.d,i=n();var M=s.parts.slice();function w(){var t=this.slice(0,a[u].length),e=a[u].slice(0,t.length);return t.toLowerCase()===e.toLowerCase()}if(a.length!==M.length&&(M=t(M).filter((function(e,i){return-1!==t.inArray(i,_)})).toArray()),a.length===M.length){var R,A,D;for(u=0,R=M.length;u<R;u++){if(m=parseInt(a[u],10),l=M[u],isNaN(m))switch(l){case"MM":y=t(v[o].months).filter(w),m=t.inArray(y[0],v[o].months)+1;break;case"M":y=t(v[o].monthsShort).filter(w),m=t.inArray(y[0],v[o].monthsShort)+1}C[l]=m}for(u=0;u<_.length;u++)(D=_[u])in C&&!isNaN(C[D])&&(A=new Date(i),x[D](A,C[D]),isNaN(A)||(i=A))}return i},formatDate:function(e,i,n){if(!e)return"";if("string"==typeof i&&(i=b.parseFormat(i)),i.toDisplay)return i.toDisplay(e,i,n);var s={d:e.getUTCDate(),D:v[n].daysShort[e.getUTCDay()],DD:v[n].days[e.getUTCDay()],m:e.getUTCMonth()+1,M:v[n].monthsShort[e.getUTCMonth()],MM:v[n].months[e.getUTCMonth()],yy:e.getUTCFullYear().toString().substring(2),yyyy:e.getUTCFullYear()};s.dd=(s.d<10?"0":"")+s.d,s.mm=(s.m<10?"0":"")+s.m,e=[];for(var o=t.extend([],i.separators),r=0,a=i.parts.length;r<=a;r++)o.length&&e.push(o.shift()),e.push(s[i.parts[r]]);return e.join("")},headTemplate:'<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">'+g.templates.leftArrow+'</th><th colspan="5" class="datepicker-switch"></th><th class="next">'+g.templates.rightArrow+"</th></tr></thead>",contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};b.template='<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">'+b.headTemplate+"<tbody></tbody>"+b.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+b.headTemplate+b.contTemplate+b.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+b.headTemplate+b.contTemplate+b.footTemplate+'</table></div><div class="datepicker-decades"><table class="table-condensed">'+b.headTemplate+b.contTemplate+b.footTemplate+'</table></div><div class="datepicker-centuries"><table class="table-condensed">'+b.headTemplate+b.contTemplate+b.footTemplate+"</table></div></div>",t.fn.datepicker.DPGlobal=b,t.fn.datepicker.noConflict=function(){return t.fn.datepicker=p,this},t.fn.datepicker.version="1.10.0",t.fn.datepicker.deprecated=function(t){var e=window.console;e&&e.warn&&e.warn("DEPRECATED: "+t)},t(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',(function(e){var i=t(this);i.data("datepicker")||(e.preventDefault(),f.call(i,"show"))})),t((function(){f.call(t('[data-provide="datepicker-inline"]'))}))})?n.apply(e,s):n)||(t.exports=o)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap/dist/js/bootstrap.esm.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Alert:()=>Z,Button:()=>et,Carousel:()=>Pt,Collapse:()=>Xt,Dropdown:()=>Ce,Modal:()=>ei,Offcanvas:()=>yi,Popover:()=>zi,ScrollSpy:()=>en,Tab:()=>Rn,Toast:()=>Nn,Tooltip:()=>Fi});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/index.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@popperjs/core/lib/popper.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js");const r=new Map,a={set(t,e,i){r.has(t)||r.set(t,new Map);const n=r.get(t);n.has(e)||0===n.size?n.set(e,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(t,e)=>r.has(t)&&r.get(t).get(e)||null,remove(t,e){if(!r.has(t))return;const i=r.get(t);i.delete(e),0===i.size&&r.delete(t)}},l="transitionend",d=t=>(t&&window.CSS&&window.CSS.escape&&(t=t.replace(/#([^\s"#']+)/g,((t,e)=>`#${CSS.escape(e)}`))),t),c=t=>{t.dispatchEvent(new Event(l))},u=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),h=t=>u(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(d(t)):null,p=t=>{if(!u(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),i=t.closest("details:not([open])");if(!i)return e;if(i!==t){const e=t.closest("summary");if(e&&e.parentNode!==i)return!1;if(null===e)return!1}return e},f=t=>!t||t.nodeType!==Node.ELEMENT_NODE||(!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled"))),g=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?g(t.parentNode):null},m=()=>{},v=t=>{t.offsetHeight},b=()=>o&&!document.body.hasAttribute("data-bs-no-jquery")?o:null,y=[],C=()=>"rtl"===document.documentElement.dir,_=t=>{var e;e=()=>{const e=b();if(e){const i=t.NAME,n=e.fn[i];e.fn[i]=t.jQueryInterface,e.fn[i].Constructor=t,e.fn[i].noConflict=()=>(e.fn[i]=n,t.jQueryInterface)}},"loading"===document.readyState?(y.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of y)t()})),y.push(e)):e()},x=(t,e=[],i=t)=>"function"==typeof t?t(...e):i,M=(t,e,i=!0)=>{if(!i)return void x(t);const n=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:i}=window.getComputedStyle(t);const n=Number.parseFloat(e),s=Number.parseFloat(i);return n||s?(e=e.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(i))):0})(e)+5;let s=!1;const o=({target:i})=>{i===e&&(s=!0,e.removeEventListener(l,o),x(t))};e.addEventListener(l,o),setTimeout((()=>{s||c(e)}),n)},w=(t,e,i,n)=>{const s=t.length;let o=t.indexOf(e);return-1===o?!i&&n?t[s-1]:t[0]:(o+=i?1:-1,n&&(o=(o+s)%s),t[Math.max(0,Math.min(o,s-1))])},R=/[^.]*(?=\..*)\.|.*/,A=/\..*/,D=/::\d+$/,T={};let S=1;const k={mouseenter:"mouseover",mouseleave:"mouseout"},B=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function V(t,e){return e&&`${e}::${S++}`||t.uidEvent||S++}function j(t){const e=V(t);return t.uidEvent=e,T[e]=T[e]||{},T[e]}function E(t,e,i=null){return Object.values(t).find((t=>t.callable===e&&t.delegationSelector===i))}function P(t,e,i){const n="string"==typeof e,s=n?i:e||i;let o=F(t);return B.has(o)||(o=t),[n,s,o]}function L(t,e,i,n,s){if("string"!=typeof e||!t)return;let[o,r,a]=P(e,i,n);if(e in k){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};r=t(r)}const l=j(t),d=l[a]||(l[a]={}),c=E(d,r,o?i:null);if(c)return void(c.oneOff=c.oneOff&&s);const u=V(r,e.replace(R,"")),h=o?function(t,e,i){return function n(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return Y(s,{delegateTarget:r}),n.oneOff&&N.off(t,s.type,e,i),i.apply(r,[s])}}(t,i,r):function(t,e){return function i(n){return Y(n,{delegateTarget:t}),i.oneOff&&N.off(t,n.type,e),e.apply(t,[n])}}(t,r);h.delegationSelector=o?i:null,h.callable=r,h.oneOff=s,h.uidEvent=u,d[u]=h,t.addEventListener(a,h,o)}function O(t,e,i,n,s){const o=E(e[i],n,s);o&&(t.removeEventListener(i,o,Boolean(s)),delete e[i][o.uidEvent])}function I(t,e,i,n){const s=e[i]||{};for(const[o,r]of Object.entries(s))o.includes(n)&&O(t,e,i,r.callable,r.delegationSelector)}function F(t){return t=t.replace(A,""),k[t]||t}const N={on(t,e,i,n){L(t,e,i,n,!1)},one(t,e,i,n){L(t,e,i,n,!0)},off(t,e,i,n){if("string"!=typeof e||!t)return;const[s,o,r]=P(e,i,n),a=r!==e,l=j(t),d=l[r]||{},c=e.startsWith(".");if(void 0===o){if(c)for(const i of Object.keys(l))I(t,l,i,e.slice(1));for(const[i,n]of Object.entries(d)){const s=i.replace(D,"");a&&!e.includes(s)||O(t,l,r,n.callable,n.delegationSelector)}}else{if(!Object.keys(d).length)return;O(t,l,r,o,s?i:null)}},trigger(t,e,i){if("string"!=typeof e||!t)return null;const n=b();let s=null,o=!0,r=!0,a=!1;e!==F(e)&&n&&(s=n.Event(e,i),n(t).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=Y(new Event(e,{bubbles:o,cancelable:!0}),i);return a&&l.preventDefault(),r&&t.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function Y(t,e={}){for(const[i,n]of Object.entries(e))try{t[i]=n}catch(e){Object.defineProperty(t,i,{configurable:!0,get:()=>n})}return t}function K(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function H(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}const z={setDataAttribute(t,e,i){t.setAttribute(`data-bs-${H(e)}`,i)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${H(e)}`)},getDataAttributes(t){if(!t)return{};const e={},i=Object.keys(t.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=K(t.dataset[n])}return e},getDataAttribute:(t,e)=>K(t.getAttribute(`data-bs-${H(e)}`))};class W{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const i=u(e)?z.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...u(e)?z.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const[n,s]of Object.entries(e)){const e=t[n],o=u(e)?"element":null==(i=e)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${o}" but expected type "${s}".`)}var i}}class $ extends W{constructor(t,e){super(),(t=h(t))&&(this._element=t,this._config=this._getConfig(e),a.set(this._element,this.constructor.DATA_KEY,this))}dispose(){a.remove(this._element,this.constructor.DATA_KEY),N.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,i=!0){M(t,e,i)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(t){return a.get(h(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.3.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}const q=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let i=t.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),e=i&&"#"!==i?i.trim():null}return e?e.split(",").map((t=>d(t))).join(","):null},U={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const i=[];let n=t.parentNode.closest(e);for(;n;)i.push(n),n=n.parentNode.closest(e);return i},prev(t,e){let i=t.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(t,e){let i=t.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(e,t).filter((t=>!f(t)&&p(t)))},getSelectorFromElement(t){const e=q(t);return e&&U.findOne(e)?e:null},getElementFromSelector(t){const e=q(t);return e?U.findOne(e):null},getMultipleElementsFromSelector(t){const e=q(t);return e?U.find(e):[]}},X=(t,e="hide")=>{const i=`click.dismiss${t.EVENT_KEY}`,n=t.NAME;N.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),f(this))return;const s=U.getElementFromSelector(this)||this.closest(`.${n}`);t.getOrCreateInstance(s)[e]()}))},G=".bs.alert",Q=`close${G}`,J=`closed${G}`;class Z extends ${static get NAME(){return"alert"}close(){if(N.trigger(this._element,Q).defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),N.trigger(this._element,J),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=Z.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}X(Z,"close"),_(Z);const tt='[data-bs-toggle="button"]';class et extends ${static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=et.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}N.on(document,"click.bs.button.data-api",tt,(t=>{t.preventDefault();const e=t.target.closest(tt);et.getOrCreateInstance(e).toggle()})),_(et);const it=".bs.swipe",nt=`touchstart${it}`,st=`touchmove${it}`,ot=`touchend${it}`,rt=`pointerdown${it}`,at=`pointerup${it}`,lt={endCallback:null,leftCallback:null,rightCallback:null},dt={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ct extends W{constructor(t,e){super(),this._element=t,t&&ct.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return lt}static get DefaultType(){return dt}static get NAME(){return"swipe"}dispose(){N.off(this._element,it)}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),x(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&x(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(N.on(this._element,rt,(t=>this._start(t))),N.on(this._element,at,(t=>this._end(t))),this._element.classList.add("pointer-event")):(N.on(this._element,nt,(t=>this._start(t))),N.on(this._element,st,(t=>this._move(t))),N.on(this._element,ot,(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ut=".bs.carousel",ht=".data-api",pt="ArrowLeft",ft="ArrowRight",gt="next",mt="prev",vt="left",bt="right",yt=`slide${ut}`,Ct=`slid${ut}`,_t=`keydown${ut}`,xt=`mouseenter${ut}`,Mt=`mouseleave${ut}`,wt=`dragstart${ut}`,Rt=`load${ut}${ht}`,At=`click${ut}${ht}`,Dt="carousel",Tt="active",St=".active",kt=".carousel-item",Bt=St+kt,Vt={[pt]:bt,[ft]:vt},jt={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Et={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Pt extends ${constructor(t,e){super(t,e),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=U.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Dt&&this.cycle()}static get Default(){return jt}static get DefaultType(){return Et}static get NAME(){return"carousel"}next(){this._slide(gt)}nextWhenVisible(){!document.hidden&&p(this._element)&&this.next()}prev(){this._slide(mt)}pause(){this._isSliding&&c(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?N.one(this._element,Ct,(()=>this.cycle())):this.cycle())}to(t){const e=this._getItems();if(t>e.length-1||t<0)return;if(this._isSliding)return void N.one(this._element,Ct,(()=>this.to(t)));const i=this._getItemIndex(this._getActive());if(i===t)return;const n=t>i?gt:mt;this._slide(n,e[t])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(t){return t.defaultInterval=t.interval,t}_addEventListeners(){this._config.keyboard&&N.on(this._element,_t,(t=>this._keydown(t))),"hover"===this._config.pause&&(N.on(this._element,xt,(()=>this.pause())),N.on(this._element,Mt,(()=>this._maybeEnableCycle()))),this._config.touch&&ct.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const t of U.find(".carousel-item img",this._element))N.on(t,wt,(t=>t.preventDefault()));const t={leftCallback:()=>this._slide(this._directionToOrder(vt)),rightCallback:()=>this._slide(this._directionToOrder(bt)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new ct(this._element,t)}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Vt[t.key];e&&(t.preventDefault(),this._slide(this._directionToOrder(e)))}_getItemIndex(t){return this._getItems().indexOf(t)}_setActiveIndicatorElement(t){if(!this._indicatorsElement)return;const e=U.findOne(St,this._indicatorsElement);e.classList.remove(Tt),e.removeAttribute("aria-current");const i=U.findOne(`[data-bs-slide-to="${t}"]`,this._indicatorsElement);i&&(i.classList.add(Tt),i.setAttribute("aria-current","true"))}_updateInterval(){const t=this._activeElement||this._getActive();if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);this._config.interval=e||this._config.defaultInterval}_slide(t,e=null){if(this._isSliding)return;const i=this._getActive(),n=t===gt,s=e||w(this._getItems(),i,n,this._config.wrap);if(s===i)return;const o=this._getItemIndex(s),r=e=>N.trigger(this._element,e,{relatedTarget:s,direction:this._orderToDirection(t),from:this._getItemIndex(i),to:o});if(r(yt).defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",d=n?"carousel-item-next":"carousel-item-prev";s.classList.add(d),v(s),i.classList.add(l),s.classList.add(l);this._queueCallback((()=>{s.classList.remove(l,d),s.classList.add(Tt),i.classList.remove(Tt,d,l),this._isSliding=!1,r(Ct)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return U.findOne(Bt,this._element)}_getItems(){return U.find(kt,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(t){return C()?t===vt?mt:gt:t===vt?gt:mt}_orderToDirection(t){return C()?t===mt?vt:bt:t===mt?bt:vt}static jQueryInterface(t){return this.each((function(){const e=Pt.getOrCreateInstance(this,t);if("number"!=typeof t){if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}else e.to(t)}))}}N.on(document,At,"[data-bs-slide], [data-bs-slide-to]",(function(t){const e=U.getElementFromSelector(this);if(!e||!e.classList.contains(Dt))return;t.preventDefault();const i=Pt.getOrCreateInstance(e),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===z.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),N.on(window,Rt,(()=>{const t=U.find('[data-bs-ride="carousel"]');for(const e of t)Pt.getOrCreateInstance(e)})),_(Pt);const Lt=".bs.collapse",Ot=`show${Lt}`,It=`shown${Lt}`,Ft=`hide${Lt}`,Nt=`hidden${Lt}`,Yt=`click${Lt}.data-api`,Kt="show",Ht="collapse",zt="collapsing",Wt=`:scope .${Ht} .${Ht}`,$t='[data-bs-toggle="collapse"]',qt={parent:null,toggle:!0},Ut={parent:"(null|element)",toggle:"boolean"};class Xt extends ${constructor(t,e){super(t,e),this._isTransitioning=!1,this._triggerArray=[];const i=U.find($t);for(const t of i){const e=U.getSelectorFromElement(t),i=U.find(e).filter((t=>t===this._element));null!==e&&i.length&&this._triggerArray.push(t)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return qt}static get DefaultType(){return Ut}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t=>t!==this._element)).map((t=>Xt.getOrCreateInstance(t,{toggle:!1})))),t.length&&t[0]._isTransitioning)return;if(N.trigger(this._element,Ot).defaultPrevented)return;for(const e of t)e.hide();const e=this._getDimension();this._element.classList.remove(Ht),this._element.classList.add(zt),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${e[0].toUpperCase()+e.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(zt),this._element.classList.add(Ht,Kt),this._element.style[e]="",N.trigger(this._element,It)}),this._element,!0),this._element.style[e]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(N.trigger(this._element,Ft).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,v(this._element),this._element.classList.add(zt),this._element.classList.remove(Ht,Kt);for(const t of this._triggerArray){const e=U.getElementFromSelector(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(zt),this._element.classList.add(Ht),N.trigger(this._element,Nt)}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(Kt)}_configAfterMerge(t){return t.toggle=Boolean(t.toggle),t.parent=h(t.parent),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=this._getFirstLevelChildren($t);for(const e of t){const t=U.getElementFromSelector(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(t){const e=U.find(Wt,this._config.parent);return U.find(t,this._config.parent).filter((t=>!e.includes(t)))}_addAriaAndCollapsedClass(t,e){if(t.length)for(const i of t)i.classList.toggle("collapsed",!e),i.setAttribute("aria-expanded",e)}static jQueryInterface(t){const e={};return"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1),this.each((function(){const i=Xt.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}N.on(document,Yt,$t,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();for(const t of U.getMultipleElementsFromSelector(this))Xt.getOrCreateInstance(t,{toggle:!1}).toggle()})),_(Xt);const Gt="dropdown",Qt=".bs.dropdown",Jt=".data-api",Zt="ArrowUp",te="ArrowDown",ee=`hide${Qt}`,ie=`hidden${Qt}`,ne=`show${Qt}`,se=`shown${Qt}`,oe=`click${Qt}${Jt}`,re=`keydown${Qt}${Jt}`,ae=`keyup${Qt}${Jt}`,le="show",de='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ce=`${de}.${le}`,ue=".dropdown-menu",he=C()?"top-end":"top-start",pe=C()?"top-start":"top-end",fe=C()?"bottom-end":"bottom-start",ge=C()?"bottom-start":"bottom-end",me=C()?"left-start":"right-start",ve=C()?"right-start":"left-start",be={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},ye={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class Ce extends ${constructor(t,e){super(t,e),this._popper=null,this._parent=this._element.parentNode,this._menu=U.next(this._element,ue)[0]||U.prev(this._element,ue)[0]||U.findOne(ue,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return be}static get DefaultType(){return ye}static get NAME(){return Gt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(f(this._element)||this._isShown())return;const t={relatedTarget:this._element};if(!N.trigger(this._element,ne,t).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const t of[].concat(...document.body.children))N.on(t,"mouseover",m);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(le),this._element.classList.add(le),N.trigger(this._element,se,t)}}hide(){if(f(this._element)||!this._isShown())return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){if(!N.trigger(this._element,ee,t).defaultPrevented){if("ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))N.off(t,"mouseover",m);this._popper&&this._popper.destroy(),this._menu.classList.remove(le),this._element.classList.remove(le),this._element.setAttribute("aria-expanded","false"),z.removeDataAttribute(this._menu,"popper"),N.trigger(this._element,ie,t)}}_getConfig(t){if("object"==typeof(t=super._getConfig(t)).reference&&!u(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Gt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:u(this._config.reference)?t=h(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const e=this._getPopperConfig();this._popper=s.createPopper(t,this._menu,e)}_isShown(){return this._menu.classList.contains(le)}_getPlacement(){const t=this._parent;if(t.classList.contains("dropend"))return me;if(t.classList.contains("dropstart"))return ve;if(t.classList.contains("dropup-center"))return"top";if(t.classList.contains("dropdown-center"))return"bottom";const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?pe:he:e?ge:fe}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(z.setDataAttribute(this._menu,"popper","static"),t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,...x(this._config.popperConfig,[t])}}_selectMenuItem({key:t,target:e}){const i=U.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((t=>p(t)));i.length&&w(i,e,t===te,!i.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=Ce.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(2===t.button||"keyup"===t.type&&"Tab"!==t.key)return;const e=U.find(ce);for(const i of e){const e=Ce.getInstance(i);if(!e||!1===e._config.autoClose)continue;const n=t.composedPath(),s=n.includes(e._menu);if(n.includes(e._element)||"inside"===e._config.autoClose&&!s||"outside"===e._config.autoClose&&s)continue;if(e._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;const o={relatedTarget:e._element};"click"===t.type&&(o.clickEvent=t),e._completeHide(o)}}static dataApiKeydownHandler(t){const e=/input|textarea/i.test(t.target.tagName),i="Escape"===t.key,n=[Zt,te].includes(t.key);if(!n&&!i)return;if(e&&!i)return;t.preventDefault();const s=this.matches(de)?this:U.prev(this,de)[0]||U.next(this,de)[0]||U.findOne(de,t.delegateTarget.parentNode),o=Ce.getOrCreateInstance(s);if(n)return t.stopPropagation(),o.show(),void o._selectMenuItem(t);o._isShown()&&(t.stopPropagation(),o.hide(),s.focus())}}N.on(document,re,de,Ce.dataApiKeydownHandler),N.on(document,re,ue,Ce.dataApiKeydownHandler),N.on(document,oe,Ce.clearMenus),N.on(document,ae,Ce.clearMenus),N.on(document,oe,de,(function(t){t.preventDefault(),Ce.getOrCreateInstance(this).toggle()})),_(Ce);const _e="backdrop",xe="show",Me=`mousedown.bs.${_e}`,we={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Re={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Ae extends W{constructor(t){super(),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}static get Default(){return we}static get DefaultType(){return Re}static get NAME(){return _e}show(t){if(!this._config.isVisible)return void x(t);this._append();const e=this._getElement();this._config.isAnimated&&v(e),e.classList.add(xe),this._emulateAnimation((()=>{x(t)}))}hide(t){this._config.isVisible?(this._getElement().classList.remove(xe),this._emulateAnimation((()=>{this.dispose(),x(t)}))):x(t)}dispose(){this._isAppended&&(N.off(this._element,Me),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_configAfterMerge(t){return t.rootElement=h(t.rootElement),t}_append(){if(this._isAppended)return;const t=this._getElement();this._config.rootElement.append(t),N.on(t,Me,(()=>{x(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(t){M(t,this._getElement(),this._config.isAnimated)}}const De=".bs.focustrap",Te=`focusin${De}`,Se=`keydown.tab${De}`,ke="backward",Be={autofocus:!0,trapElement:null},Ve={autofocus:"boolean",trapElement:"element"};class je extends W{constructor(t){super(),this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Be}static get DefaultType(){return Ve}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),N.off(document,De),N.on(document,Te,(t=>this._handleFocusin(t))),N.on(document,Se,(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,N.off(document,De))}_handleFocusin(t){const{trapElement:e}=this._config;if(t.target===document||t.target===e||e.contains(t.target))return;const i=U.focusableChildren(e);0===i.length?e.focus():this._lastTabNavDirection===ke?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?ke:"forward")}}const Ee=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Pe=".sticky-top",Le="padding-right",Oe="margin-right";class Ie{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Le,(e=>e+t)),this._setElementAttributes(Ee,Le,(e=>e+t)),this._setElementAttributes(Pe,Oe,(e=>e-t))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Le),this._resetElementAttributes(Ee,Le),this._resetElementAttributes(Pe,Oe)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,i){const n=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+n)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t).getPropertyValue(e);t.style.setProperty(e,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(t,e){const i=t.style.getPropertyValue(e);i&&z.setDataAttribute(t,e,i)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const i=z.getDataAttribute(t,e);null!==i?(z.removeDataAttribute(t,e),t.style.setProperty(e,i)):t.style.removeProperty(e)}))}_applyManipulationCallback(t,e){if(u(t))e(t);else for(const i of U.find(t,this._element))e(i)}}const Fe=".bs.modal",Ne=`hide${Fe}`,Ye=`hidePrevented${Fe}`,Ke=`hidden${Fe}`,He=`show${Fe}`,ze=`shown${Fe}`,We=`resize${Fe}`,$e=`click.dismiss${Fe}`,qe=`mousedown.dismiss${Fe}`,Ue=`keydown.dismiss${Fe}`,Xe=`click${Fe}.data-api`,Ge="modal-open",Qe="show",Je="modal-static",Ze={backdrop:!0,focus:!0,keyboard:!0},ti={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class ei extends ${constructor(t,e){super(t,e),this._dialog=U.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Ie,this._addEventListeners()}static get Default(){return Ze}static get DefaultType(){return ti}static get NAME(){return"modal"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown||this._isTransitioning)return;N.trigger(this._element,He,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Ge),this._adjustDialog(),this._backdrop.show((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;N.trigger(this._element,Ne).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Qe),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){N.off(window,Fe),N.off(this._dialog,Fe),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Ae({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new je({trapElement:this._element})}_showElement(t){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const e=U.findOne(".modal-body",this._dialog);e&&(e.scrollTop=0),v(this._element),this._element.classList.add(Qe);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,N.trigger(this._element,ze,{relatedTarget:t})}),this._dialog,this._isAnimated())}_addEventListeners(){N.on(this._element,Ue,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),N.on(window,We,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),N.on(this._element,qe,(t=>{N.one(this._element,$e,(e=>{this._element===t.target&&this._element===e.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Ge),this._resetAdjustments(),this._scrollBar.reset(),N.trigger(this._element,Ke)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(N.trigger(this._element,Ye).defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains(Je)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(Je),this._queueCallback((()=>{this._element.classList.remove(Je),this._queueCallback((()=>{this._element.style.overflowY=e}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),i=e>0;if(i&&!t){const t=C()?"paddingLeft":"paddingRight";this._element.style[t]=`${e}px`}if(!i&&t){const t=C()?"paddingRight":"paddingLeft";this._element.style[t]=`${e}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const i=ei.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](e)}}))}}N.on(document,Xe,'[data-bs-toggle="modal"]',(function(t){const e=U.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),N.one(e,He,(t=>{t.defaultPrevented||N.one(e,Ke,(()=>{p(this)&&this.focus()}))}));const i=U.findOne(".modal.show");i&&ei.getInstance(i).hide();ei.getOrCreateInstance(e).toggle(this)})),X(ei),_(ei);const ii=".bs.offcanvas",ni=".data-api",si=`load${ii}${ni}`,oi="show",ri="showing",ai="hiding",li=".offcanvas.show",di=`show${ii}`,ci=`shown${ii}`,ui=`hide${ii}`,hi=`hidePrevented${ii}`,pi=`hidden${ii}`,fi=`resize${ii}`,gi=`click${ii}${ni}`,mi=`keydown.dismiss${ii}`,vi={backdrop:!0,keyboard:!0,scroll:!1},bi={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class yi extends ${constructor(t,e){super(t,e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return vi}static get DefaultType(){return bi}static get NAME(){return"offcanvas"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown)return;if(N.trigger(this._element,di,{relatedTarget:t}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Ie).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(ri);this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(oi),this._element.classList.remove(ri),N.trigger(this._element,ci,{relatedTarget:t})}),this._element,!0)}hide(){if(!this._isShown)return;if(N.trigger(this._element,ui).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(ai),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(oi,ai),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Ie).reset(),N.trigger(this._element,pi)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const t=Boolean(this._config.backdrop);return new Ae({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?()=>{"static"!==this._config.backdrop?this.hide():N.trigger(this._element,hi)}:null})}_initializeFocusTrap(){return new je({trapElement:this._element})}_addEventListeners(){N.on(this._element,mi,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():N.trigger(this._element,hi))}))}static jQueryInterface(t){return this.each((function(){const e=yi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}N.on(document,gi,'[data-bs-toggle="offcanvas"]',(function(t){const e=U.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),f(this))return;N.one(e,pi,(()=>{p(this)&&this.focus()}));const i=U.findOne(li);i&&i!==e&&yi.getInstance(i).hide();yi.getOrCreateInstance(e).toggle(this)})),N.on(window,si,(()=>{for(const t of U.find(li))yi.getOrCreateInstance(t).show()})),N.on(window,fi,(()=>{for(const t of U.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(t).position&&yi.getOrCreateInstance(t).hide()})),X(yi),_(yi);const Ci={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},_i=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),xi=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,Mi=(t,e)=>{const i=t.nodeName.toLowerCase();return e.includes(i)?!_i.has(i)||Boolean(xi.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(i)))};const wi={allowList:Ci,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Ri={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Ai={entry:"(string|element|function|null)",selector:"(string|element)"};class Di extends W{constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return wi}static get DefaultType(){return Ri}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,i]of Object.entries(this._config.content))this._setContent(t,i,e);const e=t.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&e.classList.add(...i.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,i]of Object.entries(t))super._typeCheckConfig({selector:e,entry:i},Ai)}_setContent(t,e,i){const n=U.findOne(i,t);n&&((e=this._resolvePossibleFunction(e))?u(e)?this._putElementInTemplate(h(e),n):this._config.html?n.innerHTML=this._maybeSanitize(e):n.textContent=e:n.remove())}_maybeSanitize(t){return this._config.sanitize?function(t,e,i){if(!t.length)return t;if(i&&"function"==typeof i)return i(t);const n=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const t of s){const i=t.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){t.remove();continue}const n=[].concat(...t.attributes),s=[].concat(e["*"]||[],e[i]||[]);for(const e of n)Mi(e,s)||t.removeAttribute(e.nodeName)}return n.body.innerHTML}(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return x(t,[this])}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}const Ti=new Set(["sanitize","allowList","sanitizeFn"]),Si="fade",ki="show",Bi=".tooltip-inner",Vi=".modal",ji="hide.bs.modal",Ei="hover",Pi="focus",Li={AUTO:"auto",TOP:"top",RIGHT:C()?"left":"right",BOTTOM:"bottom",LEFT:C()?"right":"left"},Oi={allowList:Ci,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Ii={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class Fi extends ${constructor(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,e),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Oi}static get DefaultType(){return Ii}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),N.off(this._element.closest(Vi),ji,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=N.trigger(this._element,this.constructor.eventName("show")),e=(g(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),N.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(i),i.classList.add(ki),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))N.on(t,"mouseover",m);this._queueCallback((()=>{N.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(N.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;if(this._getTipElement().classList.remove(ki),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))N.off(t,"mouseover",m);this._activeTrigger.click=!1,this._activeTrigger[Pi]=!1,this._activeTrigger[Ei]=!1,this._isHovered=null;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),N.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(Si,ki),e.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME).toString();return e.setAttribute("id",i),this._isAnimated()&&e.classList.add(Si),e}setContent(t){this._newContent=t,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new Di({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{[Bi]:this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Si)}_isShown(){return this.tip&&this.tip.classList.contains(ki)}_createPopper(t){const e=x(this._config.placement,[this,t,this._element]),i=Li[e.toUpperCase()];return s.createPopper(this._element,t,this._getPopperConfig(i))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return x(t,[this._element])}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,...x(this._config.popperConfig,[e])}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)N.on(this._element,this.constructor.eventName("click"),this._config.selector,(t=>{this._initializeOnDelegatedTarget(t).toggle()}));else if("manual"!==e){const t=e===Ei?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=e===Ei?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");N.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?Pi:Ei]=!0,e._enter()})),N.on(this._element,i,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?Pi:Ei]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},N.on(this._element.closest(Vi),ji,this._hideModalHandler)}_fixTitle(){const t=this._element.getAttribute("title");t&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",t),this._element.setAttribute("data-bs-original-title",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=z.getDataAttributes(this._element);for(const t of Object.keys(e))Ti.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:h(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const[e,i]of Object.entries(this._config))this.constructor.Default[e]!==i&&(t[e]=i);return t.selector=!1,t.trigger="manual",t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each((function(){const e=Fi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}_(Fi);const Ni=".popover-header",Yi=".popover-body",Ki={...Fi.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},Hi={...Fi.DefaultType,content:"(null|string|element|function)"};class zi extends Fi{static get Default(){return Ki}static get DefaultType(){return Hi}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{[Ni]:this._getTitle(),[Yi]:this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=zi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}_(zi);const Wi=".bs.scrollspy",$i=`activate${Wi}`,qi=`click${Wi}`,Ui=`load${Wi}.data-api`,Xi="active",Gi="[href]",Qi=".nav-link",Ji=`${Qi}, .nav-item > ${Qi}, .list-group-item`,Zi={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},tn={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class en extends ${constructor(t,e){super(t,e),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Zi}static get DefaultType(){return tn}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const t of this._observableSections.values())this._observer.observe(t)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(t){return t.target=h(t.target)||document.body,t.rootMargin=t.offset?`${t.offset}px 0px -30%`:t.rootMargin,"string"==typeof t.threshold&&(t.threshold=t.threshold.split(",").map((t=>Number.parseFloat(t)))),t}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(N.off(this._config.target,qi),N.on(this._config.target,qi,Gi,(t=>{const e=this._observableSections.get(t.target.hash);if(e){t.preventDefault();const i=this._rootElement||window,n=e.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n,behavior:"smooth"});i.scrollTop=n}})))}_getNewObserver(){const t={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((t=>this._observerCallback(t)),t)}_observerCallback(t){const e=t=>this._targetLinks.get(`#${t.target.id}`),i=t=>{this._previousScrollData.visibleEntryTop=t.target.offsetTop,this._process(e(t))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const o of t){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(e(o));continue}const t=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&t){if(i(o),!n)return}else s||t||i(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const t=U.find(Gi,this._config.target);for(const e of t){if(!e.hash||f(e))continue;const t=U.findOne(decodeURI(e.hash),this._element);p(t)&&(this._targetLinks.set(decodeURI(e.hash),e),this._observableSections.set(e.hash,t))}}_process(t){this._activeTarget!==t&&(this._clearActiveClass(this._config.target),this._activeTarget=t,t.classList.add(Xi),this._activateParents(t),N.trigger(this._element,$i,{relatedTarget:t}))}_activateParents(t){if(t.classList.contains("dropdown-item"))U.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(Xi);else for(const e of U.parents(t,".nav, .list-group"))for(const t of U.prev(e,Ji))t.classList.add(Xi)}_clearActiveClass(t){t.classList.remove(Xi);const e=U.find(`${Gi}.${Xi}`,t);for(const t of e)t.classList.remove(Xi)}static jQueryInterface(t){return this.each((function(){const e=en.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}N.on(window,Ui,(()=>{for(const t of U.find('[data-bs-spy="scroll"]'))en.getOrCreateInstance(t)})),_(en);const nn=".bs.tab",sn=`hide${nn}`,on=`hidden${nn}`,rn=`show${nn}`,an=`shown${nn}`,ln=`click${nn}`,dn=`keydown${nn}`,cn=`load${nn}`,un="ArrowLeft",hn="ArrowRight",pn="ArrowUp",fn="ArrowDown",gn="Home",mn="End",vn="active",bn="fade",yn="show",Cn=".dropdown-toggle",_n=`:not(${Cn})`,xn='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Mn=`${`.nav-link${_n}, .list-group-item${_n}, [role="tab"]${_n}`}, ${xn}`,wn=`.${vn}[data-bs-toggle="tab"], .${vn}[data-bs-toggle="pill"], .${vn}[data-bs-toggle="list"]`;class Rn extends ${constructor(t){super(t),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),N.on(this._element,dn,(t=>this._keydown(t))))}static get NAME(){return"tab"}show(){const t=this._element;if(this._elemIsActive(t))return;const e=this._getActiveElem(),i=e?N.trigger(e,sn,{relatedTarget:t}):null;N.trigger(t,rn,{relatedTarget:e}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(e,t),this._activate(t,e))}_activate(t,e){if(!t)return;t.classList.add(vn),this._activate(U.getElementFromSelector(t));this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.removeAttribute("tabindex"),t.setAttribute("aria-selected",!0),this._toggleDropDown(t,!0),N.trigger(t,an,{relatedTarget:e})):t.classList.add(yn)}),t,t.classList.contains(bn))}_deactivate(t,e){if(!t)return;t.classList.remove(vn),t.blur(),this._deactivate(U.getElementFromSelector(t));this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex","-1"),this._toggleDropDown(t,!1),N.trigger(t,on,{relatedTarget:e})):t.classList.remove(yn)}),t,t.classList.contains(bn))}_keydown(t){if(![un,hn,pn,fn,gn,mn].includes(t.key))return;t.stopPropagation(),t.preventDefault();const e=this._getChildren().filter((t=>!f(t)));let i;if([gn,mn].includes(t.key))i=e[t.key===gn?0:e.length-1];else{const n=[hn,fn].includes(t.key);i=w(e,t.target,n,!0)}i&&(i.focus({preventScroll:!0}),Rn.getOrCreateInstance(i).show())}_getChildren(){return U.find(Mn,this._parent)}_getActiveElem(){return this._getChildren().find((t=>this._elemIsActive(t)))||null}_setInitialAttributes(t,e){this._setAttributeIfNotExists(t,"role","tablist");for(const t of e)this._setInitialAttributesOnChild(t)}_setInitialAttributesOnChild(t){t=this._getInnerElement(t);const e=this._elemIsActive(t),i=this._getOuterElement(t);t.setAttribute("aria-selected",e),i!==t&&this._setAttributeIfNotExists(i,"role","presentation"),e||t.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(t,"role","tab"),this._setInitialAttributesOnTargetPanel(t)}_setInitialAttributesOnTargetPanel(t){const e=U.getElementFromSelector(t);e&&(this._setAttributeIfNotExists(e,"role","tabpanel"),t.id&&this._setAttributeIfNotExists(e,"aria-labelledby",`${t.id}`))}_toggleDropDown(t,e){const i=this._getOuterElement(t);if(!i.classList.contains("dropdown"))return;const n=(t,n)=>{const s=U.findOne(t,i);s&&s.classList.toggle(n,e)};n(Cn,vn),n(".dropdown-menu",yn),i.setAttribute("aria-expanded",e)}_setAttributeIfNotExists(t,e,i){t.hasAttribute(e)||t.setAttribute(e,i)}_elemIsActive(t){return t.classList.contains(vn)}_getInnerElement(t){return t.matches(Mn)?t:U.findOne(Mn,t)}_getOuterElement(t){return t.closest(".nav-item, .list-group-item")||t}static jQueryInterface(t){return this.each((function(){const e=Rn.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}N.on(document,ln,xn,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),f(this)||Rn.getOrCreateInstance(this).show()})),N.on(window,cn,(()=>{for(const t of U.find(wn))Rn.getOrCreateInstance(t)})),_(Rn);const An=".bs.toast",Dn=`mouseover${An}`,Tn=`mouseout${An}`,Sn=`focusin${An}`,kn=`focusout${An}`,Bn=`hide${An}`,Vn=`hidden${An}`,jn=`show${An}`,En=`shown${An}`,Pn="hide",Ln="show",On="showing",In={animation:"boolean",autohide:"boolean",delay:"number"},Fn={animation:!0,autohide:!0,delay:5e3};class Nn extends ${constructor(t,e){super(t,e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Fn}static get DefaultType(){return In}static get NAME(){return"toast"}show(){if(N.trigger(this._element,jn).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(Pn),v(this._element),this._element.classList.add(Ln,On),this._queueCallback((()=>{this._element.classList.remove(On),N.trigger(this._element,En),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(N.trigger(this._element,Bn).defaultPrevented)return;this._element.classList.add(On),this._queueCallback((()=>{this._element.classList.add(Pn),this._element.classList.remove(On,Ln),N.trigger(this._element,Vn)}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Ln),super.dispose()}isShown(){return this._element.classList.contains(Ln)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const i=t.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){N.on(this._element,Dn,(t=>this._onInteraction(t,!0))),N.on(this._element,Tn,(t=>this._onInteraction(t,!1))),N.on(this._element,Sn,(t=>this._onInteraction(t,!0))),N.on(this._element,kn,(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Nn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}X(Nn),_(Nn)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/country-select-js/build/js/countrySelect.js":(t,e,i)=>{var n,s;n=[i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js")],void 0===(s=function(t){!function(t,e,i,n){"use strict";var s="countrySelect",o=1,r={defaultCountry:"",defaultStyling:"inside",excludeCountries:[],onlyCountries:[],preferredCountries:["us","gb"],localizedCountries:null,responsiveDropdown:t(e).width()<768},a={UP:38,DOWN:40,ENTER:13,ESC:27,BACKSPACE:8,PLUS:43,SPACE:32,A:65,Z:90};function l(e,i){this.element=e,this.options=t.extend({},r,i),this._defaults=r,this.ns="."+s+o++,this._name=s,this.init()}t(e).on("load",(function(){})),l.prototype={init:function(){return this._processCountryData(),this._generateMarkup(),this._setInitialState(),this._initListeners(),this.autoCountryDeferred=new t.Deferred,this._initAutoCountry(),this.typedLetters="",this.autoCountryDeferred},_processCountryData:function(){this._setInstanceCountryData(),this._setPreferredCountries(),this.options.localizedCountries&&this._translateCountriesByLocale(),(this.options.onlyCountries.length||this.options.localizedCountries)&&this.countries.sort(this._countryNameSort)},_setInstanceCountryData:function(){var e=this;if(this.options.onlyCountries.length){var i=[];t.each(this.options.onlyCountries,(function(t,n){var s=e._getCountryData(n,!0);s&&i.push(s)})),this.countries=i}else if(this.options.excludeCountries.length){var n=this.options.excludeCountries.map((function(t){return t.toLowerCase()}));this.countries=d.filter((function(t){return-1===n.indexOf(t.iso2)}))}else this.countries=d},_setPreferredCountries:function(){var e=this;this.preferredCountries=[],t.each(this.options.preferredCountries,(function(t,i){var n=e._getCountryData(i,!1);n&&e.preferredCountries.push(n)}))},_translateCountriesByLocale(){for(let t=0;t<this.countries.length;t++){const e=this.countries[t].iso2.toLowerCase();this.options.localizedCountries.hasOwnProperty(e)&&(this.countries[t].name=this.options.localizedCountries[e])}},_countryNameSort:(t,e)=>t.name.localeCompare(e.name),_generateMarkup:function(){this.countryInput=t(this.element);var i="country-select";this.options.defaultStyling&&(i+=" "+this.options.defaultStyling),this.countryInput.wrap(t("<div>",{class:i}));var n=t("<div>",{class:"flag-dropdown"}).insertAfter(this.countryInput),s=t("<div>",{class:"selected-flag"}).appendTo(n);this.selectedFlagInner=t("<div>",{class:"flag"}).appendTo(s),t("<div>",{class:"arrow"}).appendTo(s),this.countryList=t("<ul>",{class:"country-list v-hide"}).appendTo(n),this.preferredCountries.length&&(this._appendListItems(this.preferredCountries,"preferred"),t("<li>",{class:"divider"}).appendTo(this.countryList)),this._appendListItems(this.countries,""),this.countryCodeInput=t("#"+this.countryInput.attr("id")+"_code"),this.countryCodeInput||(this.countryCodeInput=t('<input type="hidden" id="'+this.countryInput.attr("id")+'_code" name="'+this.countryInput.attr("name")+'_code" value="" />'),this.countryCodeInput.insertAfter(this.countryInput)),this.dropdownHeight=this.countryList.outerHeight(),this.options.responsiveDropdown&&t(e).resize((function(){t(".country-select").each((function(){var e=this.offsetWidth;t(this).find(".country-list").css("width",e+"px")}))})).resize(),this.countryList.removeClass("v-hide").addClass("hide"),this.countryListItems=this.countryList.children(".country")},_appendListItems:function(e,i){var n="";t.each(e,(function(t,e){n+='<li class="country '+i+'" data-country-code="'+e.iso2+'">',n+='<div class="flag '+e.iso2+'"></div>',n+='<span class="country-name">'+e.name+"</span>",n+="</li>"})),this.countryList.append(n)},_setInitialState:function(){var t=!1;this.countryInput.val()&&(t=this._updateFlagFromInputVal());var e,i=this.countryCodeInput.val();i&&this.selectCountry(i),t||(this.options.defaultCountry&&(e=this._getCountryData(this.options.defaultCountry,!1))||(e=this.preferredCountries.length?this.preferredCountries[0]:this.countries[0]),this.defaultCountry=e.iso2)},_initListeners:function(){var t=this;this.countryInput.on("keyup"+this.ns,(function(){t._updateFlagFromInputVal()})),this.selectedFlagInner.parent().on("click"+this.ns,(function(e){t.countryList.hasClass("hide")&&!t.countryInput.prop("disabled")&&t._showDropdown()})),this.countryInput.on("blur"+this.ns,(function(){t.countryInput.val()!=t.getSelectedCountryData().name&&t.setCountry(t.countryInput.val()),t.countryInput.val(t.getSelectedCountryData().name)}))},_initAutoCountry:function(){"auto"===this.options.initialCountry?this._loadAutoCountry():(this.defaultCountry&&this.selectCountry(this.defaultCountry),this.autoCountryDeferred.resolve())},_loadAutoCountry:function(){t.fn[s].autoCountry?this.handleAutoCountry():t.fn[s].startedLoadingAutoCountry||(t.fn[s].startedLoadingAutoCountry=!0,"function"==typeof this.options.geoIpLookup&&this.options.geoIpLookup((function(e){t.fn[s].autoCountry=e.toLowerCase(),setTimeout((function(){t(".country-select input").countrySelect("handleAutoCountry")}))})))},_focus:function(){this.countryInput.focus();var t=this.countryInput[0];if(t.setSelectionRange){var e=this.countryInput.val().length;t.setSelectionRange(e,e)}},_showDropdown:function(){this._setDropdownPosition();var t=this.countryList.children(".active");this._highlightListItem(t),this.countryList.removeClass("hide"),this._scrollTo(t),this._bindDropdownListeners(),this.selectedFlagInner.parent().children(".arrow").addClass("up")},_setDropdownPosition:function(){var i=this.countryInput.offset().top,n=t(e).scrollTop(),s=i+this.countryInput.outerHeight()+this.dropdownHeight<n+t(e).height(),o=i-this.dropdownHeight>n,r=!s&&o?"-"+(this.dropdownHeight-1)+"px":"";this.countryList.css("top",r)},_bindDropdownListeners:function(){var e=this;this.countryList.on("mouseover"+this.ns,".country",(function(i){e._highlightListItem(t(this))})),this.countryList.on("click"+this.ns,".country",(function(i){e._selectListItem(t(this))}));var n=!0;t("html").on("click"+this.ns,(function(t){t.preventDefault(),n||e._closeDropdown(),n=!1})),t(i).on("keydown"+this.ns,(function(t){t.preventDefault(),t.which==a.UP||t.which==a.DOWN?e._handleUpDownKey(t.which):t.which==a.ENTER?e._handleEnterKey():t.which==a.ESC?e._closeDropdown():t.which>=a.A&&t.which<=a.Z||t.which===a.SPACE?(e.typedLetters+=String.fromCharCode(t.which),e._filterCountries(e.typedLetters)):t.which===a.BACKSPACE&&(e.typedLetters=e.typedLetters.slice(0,-1),e._filterCountries(e.typedLetters))}))},_handleUpDownKey:function(t){var e=this.countryList.children(".highlight").first(),i=t==a.UP?e.prev():e.next();i.length&&(i.hasClass("divider")&&(i=t==a.UP?i.prev():i.next()),this._highlightListItem(i),this._scrollTo(i))},_handleEnterKey:function(){var t=this.countryList.children(".highlight").first();t.length&&this._selectListItem(t)},_filterCountries:function(e){var i=this.countryListItems.filter((function(){return 0===t(this).text().toUpperCase().indexOf(e)&&!t(this).hasClass("preferred")}));if(i.length){var n,s=i.filter(".highlight").first();n=s&&s.next()&&0===s.next().text().toUpperCase().indexOf(e)?s.next():i.first(),this._highlightListItem(n),this._scrollTo(n)}},_updateFlagFromInputVal:function(){var e=this,i=this.countryInput.val().replace(/(?=[() ])/g,"\\");if(i){var n=[],s=new RegExp(i,"i");if(i.length<=2)for(var o=0;o<this.countries.length;o++)this.countries[o].iso2.match(s)&&n.push(this.countries[o].iso2);if(0==n.length)for(o=0;o<this.countries.length;o++)this.countries[o].name.match(s)&&n.push(this.countries[o].iso2);var r=!1;return t.each(n,(function(t,i){e.selectedFlagInner.hasClass(i)&&(r=!0)})),r||(this._selectFlag(n[0]),this.countryCodeInput.val(n[0]).trigger("change")),!0}return!1},_highlightListItem:function(t){this.countryListItems.removeClass("highlight"),t.addClass("highlight")},_getCountryData:function(t,e){for(var i=e?d:this.countries,n=0;n<i.length;n++)if(i[n].iso2==t)return i[n];return null},_selectFlag:function(t){if(!t)return!1;this.selectedFlagInner.attr("class","flag "+t);var e=this._getCountryData(t);this.selectedFlagInner.parent().attr("title",e.name);var i=this.countryListItems.children(".flag."+t).first().parent();this.countryListItems.removeClass("active"),i.addClass("active")},_selectListItem:function(t){var e=t.attr("data-country-code");this._selectFlag(e),this._closeDropdown(),this._updateName(e),this.countryInput.trigger("change"),this.countryCodeInput.trigger("change"),this._focus()},_closeDropdown:function(){this.countryList.addClass("hide"),this.selectedFlagInner.parent().children(".arrow").removeClass("up"),t(i).off("keydown"+this.ns),t("html").off("click"+this.ns),this.countryList.off(this.ns),this.typedLetters=""},_scrollTo:function(t){if(t&&t.offset()){var e=this.countryList,i=e.height(),n=e.offset().top,s=n+i,o=t.outerHeight(),r=t.offset().top,a=r+o,l=r-n+e.scrollTop();if(r<n)e.scrollTop(l);else if(a>s){var d=i-o;e.scrollTop(l-d)}}},_updateName:function(t){this.countryCodeInput.val(t).trigger("change"),this.countryInput.val(this._getCountryData(t).name)},handleAutoCountry:function(){"auto"===this.options.initialCountry&&(this.defaultCountry=t.fn[s].autoCountry,this.countryInput.val()||this.selectCountry(this.defaultCountry),this.autoCountryDeferred.resolve())},getSelectedCountryData:function(){var t=this.selectedFlagInner.attr("class").split(" ")[1];return this._getCountryData(t)},selectCountry:function(t){t=t.toLowerCase(),this.selectedFlagInner.hasClass(t)||(this._selectFlag(t),this._updateName(t))},setCountry:function(t){this.countryInput.val(t),this._updateFlagFromInputVal()},destroy:function(){this.countryInput.off(this.ns),this.selectedFlagInner.parent().off(this.ns),this.countryInput.parent().before(this.countryInput).remove()}},t.fn[s]=function(e){var i,o=arguments;return e===n||"object"==typeof e?this.each((function(){t.data(this,"plugin_"+s)||t.data(this,"plugin_"+s,new l(this,e))})):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(this.each((function(){var n=t.data(this,"plugin_"+s);n instanceof l&&"function"==typeof n[e]&&(i=n[e].apply(n,Array.prototype.slice.call(o,1))),"destroy"===e&&t.data(this,"plugin_"+s,null)})),i!==n?i:this):void 0},t.fn[s].getCountryData=function(){return d},t.fn[s].setCountryData=function(t){d=t};var d=t.each([{n:"Afghanistan (‫افغانستان‬‎)",i:"af"},{n:"Åland Islands (Åland)",i:"ax"},{n:"Albania (Shqipëri)",i:"al"},{n:"Algeria (‫الجزائر‬‎)",i:"dz"},{n:"American Samoa",i:"as"},{n:"Andorra",i:"ad"},{n:"Angola",i:"ao"},{n:"Anguilla",i:"ai"},{n:"Antarctica",i:"aq"},{n:"Antigua and Barbuda",i:"ag"},{n:"Argentina",i:"ar"},{n:"Armenia (Հայաստան)",i:"am"},{n:"Aruba",i:"aw"},{n:"Australia",i:"au"},{n:"Austria (Österreich)",i:"at"},{n:"Azerbaijan (Azərbaycan)",i:"az"},{n:"Bahamas",i:"bs"},{n:"Bahrain (‫البحرين‬‎)",i:"bh"},{n:"Bangladesh (বাংলাদেশ)",i:"bd"},{n:"Barbados",i:"bb"},{n:"Belarus (Беларусь)",i:"by"},{n:"Belgium (België)",i:"be"},{n:"Belize",i:"bz"},{n:"Benin (Bénin)",i:"bj"},{n:"Bermuda",i:"bm"},{n:"Bhutan (འབྲུག)",i:"bt"},{n:"Bolivia",i:"bo"},{n:"Bosnia and Herzegovina (Босна и Херцеговина)",i:"ba"},{n:"Botswana",i:"bw"},{n:"Bouvet Island (Bouvetøya)",i:"bv"},{n:"Brazil (Brasil)",i:"br"},{n:"British Indian Ocean Territory",i:"io"},{n:"British Virgin Islands",i:"vg"},{n:"Brunei",i:"bn"},{n:"Bulgaria (България)",i:"bg"},{n:"Burkina Faso",i:"bf"},{n:"Burundi (Uburundi)",i:"bi"},{n:"Cambodia (កម្ពុជា)",i:"kh"},{n:"Cameroon (Cameroun)",i:"cm"},{n:"Canada",i:"ca"},{n:"Cape Verde (Kabu Verdi)",i:"cv"},{n:"Caribbean Netherlands",i:"bq"},{n:"Cayman Islands",i:"ky"},{n:"Central African Republic (République Centrafricaine)",i:"cf"},{n:"Chad (Tchad)",i:"td"},{n:"Chile",i:"cl"},{n:"China (中国)",i:"cn"},{n:"Christmas Island",i:"cx"},{n:"Cocos (Keeling) Islands (Kepulauan Cocos (Keeling))",i:"cc"},{n:"Colombia",i:"co"},{n:"Comoros (‫جزر القمر‬‎)",i:"km"},{n:"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)",i:"cd"},{n:"Congo (Republic) (Congo-Brazzaville)",i:"cg"},{n:"Cook Islands",i:"ck"},{n:"Costa Rica",i:"cr"},{n:"Côte d’Ivoire",i:"ci"},{n:"Croatia (Hrvatska)",i:"hr"},{n:"Cuba",i:"cu"},{n:"Curaçao",i:"cw"},{n:"Cyprus (Κύπρος)",i:"cy"},{n:"Czech Republic (Česká republika)",i:"cz"},{n:"Denmark (Danmark)",i:"dk"},{n:"Djibouti",i:"dj"},{n:"Dominica",i:"dm"},{n:"Dominican Republic (República Dominicana)",i:"do"},{n:"Ecuador",i:"ec"},{n:"Egypt (‫مصر‬‎)",i:"eg"},{n:"El Salvador",i:"sv"},{n:"Equatorial Guinea (Guinea Ecuatorial)",i:"gq"},{n:"Eritrea",i:"er"},{n:"Estonia (Eesti)",i:"ee"},{n:"Ethiopia",i:"et"},{n:"Falkland Islands (Islas Malvinas)",i:"fk"},{n:"Faroe Islands (Føroyar)",i:"fo"},{n:"Fiji",i:"fj"},{n:"Finland (Suomi)",i:"fi"},{n:"France",i:"fr"},{n:"French Guiana (Guyane française)",i:"gf"},{n:"French Polynesia (Polynésie française)",i:"pf"},{n:"French Southern Territories (Terres australes françaises)",i:"tf"},{n:"Gabon",i:"ga"},{n:"Gambia",i:"gm"},{n:"Georgia (საქართველო)",i:"ge"},{n:"Germany (Deutschland)",i:"de"},{n:"Ghana (Gaana)",i:"gh"},{n:"Gibraltar",i:"gi"},{n:"Greece (Ελλάδα)",i:"gr"},{n:"Greenland (Kalaallit Nunaat)",i:"gl"},{n:"Grenada",i:"gd"},{n:"Guadeloupe",i:"gp"},{n:"Guam",i:"gu"},{n:"Guatemala",i:"gt"},{n:"Guernsey",i:"gg"},{n:"Guinea (Guinée)",i:"gn"},{n:"Guinea-Bissau (Guiné Bissau)",i:"gw"},{n:"Guyana",i:"gy"},{n:"Haiti",i:"ht"},{n:"Heard Island and Mcdonald Islands",i:"hm"},{n:"Honduras",i:"hn"},{n:"Hong Kong (香港)",i:"hk"},{n:"Hungary (Magyarország)",i:"hu"},{n:"Iceland (Ísland)",i:"is"},{n:"India (भारत)",i:"in"},{n:"Indonesia",i:"id"},{n:"Iran (‫ایران‬‎)",i:"ir"},{n:"Iraq (‫العراق‬‎)",i:"iq"},{n:"Ireland",i:"ie"},{n:"Isle of Man",i:"im"},{n:"Israel (‫ישראל‬‎)",i:"il"},{n:"Italy (Italia)",i:"it"},{n:"Jamaica",i:"jm"},{n:"Japan (日本)",i:"jp"},{n:"Jersey",i:"je"},{n:"Jordan (‫الأردن‬‎)",i:"jo"},{n:"Kazakhstan (Казахстан)",i:"kz"},{n:"Kenya",i:"ke"},{n:"Kiribati",i:"ki"},{n:"Kosovo (Kosovë)",i:"xk"},{n:"Kuwait (‫الكويت‬‎)",i:"kw"},{n:"Kyrgyzstan (Кыргызстан)",i:"kg"},{n:"Laos (ລາວ)",i:"la"},{n:"Latvia (Latvija)",i:"lv"},{n:"Lebanon (‫لبنان‬‎)",i:"lb"},{n:"Lesotho",i:"ls"},{n:"Liberia",i:"lr"},{n:"Libya (‫ليبيا‬‎)",i:"ly"},{n:"Liechtenstein",i:"li"},{n:"Lithuania (Lietuva)",i:"lt"},{n:"Luxembourg",i:"lu"},{n:"Macau (澳門)",i:"mo"},{n:"Macedonia (FYROM) (Македонија)",i:"mk"},{n:"Madagascar (Madagasikara)",i:"mg"},{n:"Malawi",i:"mw"},{n:"Malaysia",i:"my"},{n:"Maldives",i:"mv"},{n:"Mali",i:"ml"},{n:"Malta",i:"mt"},{n:"Marshall Islands",i:"mh"},{n:"Martinique",i:"mq"},{n:"Mauritania (‫موريتانيا‬‎)",i:"mr"},{n:"Mauritius (Moris)",i:"mu"},{n:"Mayotte",i:"yt"},{n:"Mexico (México)",i:"mx"},{n:"Micronesia",i:"fm"},{n:"Moldova (Republica Moldova)",i:"md"},{n:"Monaco",i:"mc"},{n:"Mongolia (Монгол)",i:"mn"},{n:"Montenegro (Crna Gora)",i:"me"},{n:"Montserrat",i:"ms"},{n:"Morocco (‫المغرب‬‎)",i:"ma"},{n:"Mozambique (Moçambique)",i:"mz"},{n:"Myanmar (Burma) (မြန်မာ)",i:"mm"},{n:"Namibia (Namibië)",i:"na"},{n:"Nauru",i:"nr"},{n:"Nepal (नेपाल)",i:"np"},{n:"Netherlands (Nederland)",i:"nl"},{n:"New Caledonia (Nouvelle-Calédonie)",i:"nc"},{n:"New Zealand",i:"nz"},{n:"Nicaragua",i:"ni"},{n:"Niger (Nijar)",i:"ne"},{n:"Nigeria",i:"ng"},{n:"Niue",i:"nu"},{n:"Norfolk Island",i:"nf"},{n:"North Korea (조선 민주주의 인민 공화국)",i:"kp"},{n:"Northern Mariana Islands",i:"mp"},{n:"Norway (Norge)",i:"no"},{n:"Oman (‫عُمان‬‎)",i:"om"},{n:"Pakistan (‫پاکستان‬‎)",i:"pk"},{n:"Palau",i:"pw"},{n:"Palestine (‫فلسطين‬‎)",i:"ps"},{n:"Panama (Panamá)",i:"pa"},{n:"Papua New Guinea",i:"pg"},{n:"Paraguay",i:"py"},{n:"Peru (Perú)",i:"pe"},{n:"Philippines",i:"ph"},{n:"Pitcairn Islands",i:"pn"},{n:"Poland (Polska)",i:"pl"},{n:"Portugal",i:"pt"},{n:"Puerto Rico",i:"pr"},{n:"Qatar (‫قطر‬‎)",i:"qa"},{n:"Réunion (La Réunion)",i:"re"},{n:"Romania (România)",i:"ro"},{n:"Russia (Россия)",i:"ru"},{n:"Rwanda",i:"rw"},{n:"Saint Barthélemy (Saint-Barthélemy)",i:"bl"},{n:"Saint Helena",i:"sh"},{n:"Saint Kitts and Nevis",i:"kn"},{n:"Saint Lucia",i:"lc"},{n:"Saint Martin (Saint-Martin (partie française))",i:"mf"},{n:"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)",i:"pm"},{n:"Saint Vincent and the Grenadines",i:"vc"},{n:"Samoa",i:"ws"},{n:"San Marino",i:"sm"},{n:"São Tomé and Príncipe (São Tomé e Príncipe)",i:"st"},{n:"Saudi Arabia (‫المملكة العربية السعودية‬‎)",i:"sa"},{n:"Senegal (Sénégal)",i:"sn"},{n:"Serbia (Србија)",i:"rs"},{n:"Seychelles",i:"sc"},{n:"Sierra Leone",i:"sl"},{n:"Singapore",i:"sg"},{n:"Sint Maarten",i:"sx"},{n:"Slovakia (Slovensko)",i:"sk"},{n:"Slovenia (Slovenija)",i:"si"},{n:"Solomon Islands",i:"sb"},{n:"Somalia (Soomaaliya)",i:"so"},{n:"South Africa",i:"za"},{n:"South Georgia & South Sandwich Islands",i:"gs"},{n:"South Korea (대한민국)",i:"kr"},{n:"South Sudan (‫جنوب السودان‬‎)",i:"ss"},{n:"Spain (España)",i:"es"},{n:"Sri Lanka (ශ්‍රී ලංකාව)",i:"lk"},{n:"Sudan (‫السودان‬‎)",i:"sd"},{n:"Suriname",i:"sr"},{n:"Svalbard and Jan Mayen (Svalbard og Jan Mayen)",i:"sj"},{n:"Swaziland",i:"sz"},{n:"Sweden (Sverige)",i:"se"},{n:"Switzerland (Schweiz)",i:"ch"},{n:"Syria (‫سوريا‬‎)",i:"sy"},{n:"Taiwan (台灣)",i:"tw"},{n:"Tajikistan",i:"tj"},{n:"Tanzania",i:"tz"},{n:"Thailand (ไทย)",i:"th"},{n:"Timor-Leste",i:"tl"},{n:"Togo",i:"tg"},{n:"Tokelau",i:"tk"},{n:"Tonga",i:"to"},{n:"Trinidad and Tobago",i:"tt"},{n:"Tunisia (‫تونس‬‎)",i:"tn"},{n:"Turkey (Türkiye)",i:"tr"},{n:"Turkmenistan",i:"tm"},{n:"Turks and Caicos Islands",i:"tc"},{n:"Tuvalu",i:"tv"},{n:"Uganda",i:"ug"},{n:"Ukraine (Україна)",i:"ua"},{n:"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)",i:"ae"},{n:"United Kingdom",i:"gb"},{n:"United States",i:"us"},{n:"U.S. Minor Outlying Islands",i:"um"},{n:"U.S. Virgin Islands",i:"vi"},{n:"Uruguay",i:"uy"},{n:"Uzbekistan (Oʻzbekiston)",i:"uz"},{n:"Vanuatu",i:"vu"},{n:"Vatican City (Città del Vaticano)",i:"va"},{n:"Venezuela",i:"ve"},{n:"Vietnam (Việt Nam)",i:"vn"},{n:"Wallis and Futuna",i:"wf"},{n:"Western Sahara (‫الصحراء الغربية‬‎)",i:"eh"},{n:"Yemen (‫اليمن‬‎)",i:"ye"},{n:"Zambia",i:"zm"},{n:"Zimbabwe",i:"zw"}],(function(t,e){e.name=e.n,e.iso2=e.i,delete e.n,delete e.i}))}(t,window,document)}.apply(e,n))||(t.exports=s)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.js":(t,e,i)=>{var n,s,o;s=[i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery-validation/dist/jquery.validate.js")],void 0===(o="function"==typeof(n=function(t){var e,i=t.validator,n="unobtrusiveValidation";function s(t,e,i){t.rules[e]=i,t.message&&(t.messages[e]=t.message)}function o(t){return t.replace(/^\s+|\s+$/g,"").split(/\s*,\s*/g)}function r(t){return t.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g,"\\$1")}function a(t){return t.substr(0,t.lastIndexOf(".")+1)}function l(t,e){return 0===t.indexOf("*.")&&(t=t.replace("*.",e)),t}function d(e,i){var n=t(this).find("[data-valmsg-for='"+r(i[0].name)+"']"),s=n.attr("data-valmsg-replace"),o=s?!1!==t.parseJSON(s):null;n.removeClass("field-validation-valid").addClass("field-validation-error"),e.data("unobtrusiveContainer",n),o?(n.empty(),e.removeClass("input-validation-error").appendTo(n)):e.hide()}function c(e,i){var n=t(this).find("[data-valmsg-summary=true]"),s=n.find("ul");s&&s.length&&i.errorList.length&&(s.empty(),n.addClass("validation-summary-errors").removeClass("validation-summary-valid"),t.each(i.errorList,(function(){t("<li />").html(this.message).appendTo(s)})))}function u(e){var i=e.data("unobtrusiveContainer");if(i){var n=i.attr("data-valmsg-replace"),s=n?t.parseJSON(n):null;i.addClass("field-validation-valid").removeClass("field-validation-error"),e.removeData("unobtrusiveContainer"),s&&i.empty()}}function h(e){var i=t(this),n="__jquery_unobtrusive_validation_form_reset";if(!i.data(n)){i.data(n,!0);try{i.data("validator").resetForm()}finally{i.removeData(n)}i.find(".validation-summary-errors").addClass("validation-summary-valid").removeClass("validation-summary-errors"),i.find(".field-validation-error").addClass("field-validation-valid").removeClass("field-validation-error").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer")}}function p(e){var s=t(e),o=s.data(n),r=t.proxy(h,e),a=i.unobtrusive.options||{},l=function(i,n){var s=a[i];s&&t.isFunction(s)&&s.apply(e,n)};return o||(o={options:{errorClass:a.errorClass||"input-validation-error",errorElement:a.errorElement||"span",errorPlacement:function(){d.apply(e,arguments),l("errorPlacement",arguments)},invalidHandler:function(){c.apply(e,arguments),l("invalidHandler",arguments)},messages:{},rules:{},success:function(){u.apply(e,arguments),l("success",arguments)}},attachValidation:function(){s.off("reset."+n,r).on("reset."+n,r).validate(this.options)},validate:function(){return s.validate(),s.valid()}},s.data(n,o)),o}return i.unobtrusive={adapters:[],parseElement:function(e,i){var n,s,o,r=t(e),a=r.parents("form")[0];a&&((n=p(a)).options.rules[e.name]=s={},n.options.messages[e.name]=o={},t.each(this.adapters,(function(){var i="data-val-"+this.name,n=r.attr(i),l={};void 0!==n&&(i+="-",t.each(this.params,(function(){l[this]=r.attr(i+this)})),this.adapt({element:e,form:a,message:n,params:l,rules:s,messages:o}))})),t.extend(s,{__dummy__:!0}),i||n.attachValidation())},parse:function(e){var n=t(e),s=n.parents().addBack().filter("form").add(n.find("form")).has("[data-val=true]");n.find("[data-val=true]").each((function(){i.unobtrusive.parseElement(this,!0)})),s.each((function(){var t=p(this);t&&t.attachValidation()}))}},(e=i.unobtrusive.adapters).add=function(t,e,i){return i||(i=e,e=[]),this.push({name:t,params:e,adapt:i}),this},e.addBool=function(t,e){return this.add(t,(function(i){s(i,e||t,!0)}))},e.addMinMax=function(t,e,i,n,o,r){return this.add(t,[o||"min",r||"max"],(function(t){var o=t.params.min,r=t.params.max;o&&r?s(t,n,[o,r]):o?s(t,e,o):r&&s(t,i,r)}))},e.addSingleVal=function(t,e,i){return this.add(t,[e||"val"],(function(n){s(n,i||t,n.params[e])}))},i.addMethod("__dummy__",(function(t,e,i){return!0})),i.addMethod("regex",(function(t,e,i){var n;return!!this.optional(e)||(n=new RegExp(i).exec(t))&&0===n.index&&n[0].length===t.length})),i.addMethod("nonalphamin",(function(t,e,i){var n;return i&&(n=(n=t.match(/\W/g))&&n.length>=i),n})),i.methods.extension?(e.addSingleVal("accept","mimtype"),e.addSingleVal("extension","extension")):e.addSingleVal("extension","extension","accept"),e.addSingleVal("regex","pattern"),e.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url"),e.addMinMax("length","minlength","maxlength","rangelength").addMinMax("range","min","max","range"),e.addMinMax("minlength","minlength").addMinMax("maxlength","minlength","maxlength"),e.add("equalto",["other"],(function(e){var i=a(e.element.name),n=l(e.params.other,i);s(e,"equalTo",t(e.form).find(":input").filter("[name='"+r(n)+"']")[0])})),e.add("required",(function(t){"INPUT"===t.element.tagName.toUpperCase()&&"CHECKBOX"===t.element.type.toUpperCase()||s(t,"required",!0)})),e.add("remote",["url","type","additionalfields"],(function(e){var i={url:e.params.url,type:e.params.type||"GET",data:{}},n=a(e.element.name);t.each(o(e.params.additionalfields||e.element.name),(function(s,o){var a=l(o,n);i.data[a]=function(){var i=t(e.form).find(":input").filter("[name='"+r(a)+"']");return i.is(":checkbox")?i.filter(":checked").val()||i.filter(":hidden").val()||"":i.is(":radio")?i.filter(":checked").val()||"":i.val()}})),s(e,"remote",i)})),e.add("password",["min","nonalphamin","regex"],(function(t){t.params.min&&s(t,"minlength",t.params.min),t.params.nonalphamin&&s(t,"nonalphamin",t.params.nonalphamin),t.params.regex&&s(t,"regex",t.params.regex)})),e.add("fileextensions",["extensions"],(function(t){s(t,"extension",t.params.extensions)})),t((function(){i.unobtrusive.parse(document)})),i.unobtrusive})?n.apply(e,s):n)||(t.exports=o)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery-validation/dist/jquery.validate.js":(t,e,i)=>{var n,s,o;s=[i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js")],void 0===(o="function"==typeof(n=function(t){t.extend(t.fn,{validate:function(e){if(this.length){var i=t.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new t.validator(e,this[0]),t.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",(function(e){i.submitButton=e.currentTarget,t(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==t(this).attr("formnovalidate")&&(i.cancelSubmit=!0)})),this.on("submit.validate",(function(e){function n(){var n,s;return i.submitButton&&(i.settings.submitHandler||i.formSubmitted)&&(n=t("<input type='hidden'/>").attr("name",i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)),!(i.settings.submitHandler&&!i.settings.debug)||(s=i.settings.submitHandler.call(i,i.currentForm,e),n&&n.remove(),void 0!==s&&s)}return i.settings.debug&&e.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,n()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):n():(i.focusInvalid(),!1)}))),i)}e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var e,i,n;return t(this[0]).is("form")?e=this.validate().form():(n=[],e=!0,i=t(this[0].form).validate(),this.each((function(){(e=i.element(this)&&e)||(n=n.concat(i.errorList))})),i.errorList=n),e},rules:function(e,i){var n,s,o,r,a,l,d=this[0],c=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=d&&(!d.form&&c&&(d.form=this.closest("form")[0],d.name=this.attr("name")),null!=d.form)){if(e)switch(s=(n=t.data(d.form,"validator").settings).rules,o=t.validator.staticRules(d),e){case"add":t.extend(o,t.validator.normalizeRule(i)),delete o.messages,s[d.name]=o,i.messages&&(n.messages[d.name]=t.extend(n.messages[d.name],i.messages));break;case"remove":return i?(l={},t.each(i.split(/\s/),(function(t,e){l[e]=o[e],delete o[e]})),l):(delete s[d.name],o)}return(r=t.validator.normalizeRules(t.extend({},t.validator.classRules(d),t.validator.attributeRules(d),t.validator.dataRules(d),t.validator.staticRules(d)),d)).required&&(a=r.required,delete r.required,r=t.extend({required:a},r)),r.remote&&(a=r.remote,delete r.remote,r=t.extend(r,{remote:a})),r}}});var e,i=function(t){return t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")};t.extend(t.expr.pseudos||t.expr[":"],{blank:function(e){return!i(""+t(e).val())},filled:function(e){var n=t(e).val();return null!==n&&!!i(""+n)},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,i){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=i,this.init()},t.validator.format=function(e,i){return 1===arguments.length?function(){var i=t.makeArray(arguments);return i.unshift(e),t.validator.format.apply(this,i)}:(void 0===i||(arguments.length>2&&i.constructor!==Array&&(i=t.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),t.each(i,(function(t,i){e=e.replace(new RegExp("\\{"+t+"\\}","g"),(function(){return i}))}))),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(t)))},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(e,i){var n=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===i.which&&""===this.elementValue(e)||-1!==t.inArray(i.keyCode,n)||(e.name in this.submitted||e.name in this.invalid)&&this.element(e)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).addClass(i).removeClass(n):t(e).addClass(i).removeClass(n)},unhighlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).removeClass(i).addClass(n):t(e).removeClass(i).addClass(n)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}."),step:t.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var e,i=this.currentForm,n=this.groups={};function s(e){var n=void 0!==t(this).attr("contenteditable")&&"false"!==t(this).attr("contenteditable");if(!this.form&&n&&(this.form=t(this).closest("form")[0],this.name=t(this).attr("name")),i===this.form){var s=t.data(this.form,"validator"),o="on"+e.type.replace(/^validate/,""),r=s.settings;r[o]&&!t(this).is(r.ignore)&&r[o].call(s,this,e)}}t.each(this.settings.groups,(function(e,i){"string"==typeof i&&(i=i.split(/\s/)),t.each(i,(function(t,i){n[i]=e}))})),e=this.settings.rules,t.each(e,(function(i,n){e[i]=t.validator.normalizeRule(n)})),t(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",s).on("click.validate","select, option, [type='radio'], [type='checkbox']",s),this.settings.invalidHandler&&t(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){var i,n,s=this.clean(e),o=this.validationTargetFor(s),r=this,a=!0;return void 0===o?delete this.invalid[s.name]:(this.prepareElement(o),this.currentElements=t(o),(n=this.groups[o.name])&&t.each(this.groups,(function(t,e){e===n&&t!==o.name&&(s=r.validationTargetFor(r.clean(r.findByName(t))))&&s.name in r.invalid&&(r.currentElements.push(s),a=r.check(s)&&a)})),i=!1!==this.check(o),a=a&&i,this.invalid[o.name]=!i,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),t(e).attr("aria-invalid",!i)),a},showErrors:function(e){if(e){var i=this;t.extend(this.errorMap,e),this.errorList=t.map(this.errorMap,(function(t,e){return{message:t,element:i.findByName(e)[0]}})),this.successList=t.grep(this.successList,(function(t){return!(t.name in e)}))}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var e=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(e)},resetElements:function(t){var e;if(this.settings.unhighlight)for(e=0;t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,""),this.findByName(t[e].name).removeClass(this.settings.validClass);else t.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e,i=0;for(e in t)void 0!==t[e]&&null!==t[e]&&!1!==t[e]&&i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(t){t.not(this.containers).text(""),this.addWrapper(t).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(t){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,(function(t){return t.element.name===e.name})).length&&e},elements:function(){var e=this,i={};return t(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter((function(){var n=this.name||t(this).attr("name"),s=void 0!==t(this).attr("contenteditable")&&"false"!==t(this).attr("contenteditable");return!n&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),s&&(this.form=t(this).closest("form")[0],this.name=n),!(this.form!==e.currentForm||n in i||!e.objectLength(t(this).rules())||(i[n]=!0,0))}))},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return t(this.settings.errorElement+"."+e,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([])},reset:function(){this.resetInternals(),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var i,n,s=t(e),o=e.type,r=void 0!==s.attr("contenteditable")&&"false"!==s.attr("contenteditable");return"radio"===o||"checkbox"===o?this.findByName(e.name).filter(":checked").val():"number"===o&&void 0!==e.validity?e.validity.badInput?"NaN":s.val():(i=r?s.text():s.val(),"file"===o?"C:\\fakepath\\"===i.substr(0,12)?i.substr(12):(n=i.lastIndexOf("/"))>=0||(n=i.lastIndexOf("\\"))>=0?i.substr(n+1):i:"string"==typeof i?i.replace(/\r/g,""):i)},check:function(e){e=this.validationTargetFor(this.clean(e));var i,n,s,o,r=t(e).rules(),a=t.map(r,(function(t,e){return e})).length,l=!1,d=this.elementValue(e);for(n in this.abortRequest(e),"function"==typeof r.normalizer?o=r.normalizer:"function"==typeof this.settings.normalizer&&(o=this.settings.normalizer),o&&(d=o.call(e,d),delete r.normalizer),r){s={method:n,parameters:r[n]};try{if("dependency-mismatch"===(i=t.validator.methods[n].call(this,d,e,s.parameters))&&1===a){l=!0;continue}if(l=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(e)));if(!i)return this.formatAndAdd(e,s),!1}catch(t){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+s.method+"' method.",t),t instanceof TypeError&&(t.message+=".  Exception occurred when checking element "+e.id+", check the '"+s.method+"' method."),t}}if(!l)return this.objectLength(r)&&this.successList.push(e),!0},customDataMessage:function(e,i){return t(e).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||t(e).data("msg")},customMessage:function(t,e){var i=this.settings.messages[t];return i&&(i.constructor===String?i:i[e])},findDefined:function(){for(var t=0;t<arguments.length;t++)if(void 0!==arguments[t])return arguments[t]},defaultMessage:function(e,i){"string"==typeof i&&(i={method:i});var n=this.findDefined(this.customMessage(e.name,i.method),this.customDataMessage(e,i.method),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[i.method],"<strong>Warning: No message defined for "+e.name+"</strong>"),s=/\$?\{(\d+)\}/g;return"function"==typeof n?n=n.call(this,i.parameters,e):s.test(n)&&(n=t.validator.format(n.replace(s,"{$1}"),i.parameters)),n},formatAndAdd:function(t,e){var i=this.defaultMessage(t,e);this.errorList.push({message:i,element:t,method:e.method}),this.errorMap[t.name]=i,this.submitted[t.name]=i},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e,i;for(t=0;this.errorList[t];t++)i=this.errorList[t],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map((function(){return this.element}))},showLabel:function(e,i){var n,s,o,r,a=this.errorsFor(e),l=this.idOrName(e),d=t(e).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),this.settings&&this.settings.escapeHtml?a.text(i||""):a.html(i||"")):(a=t("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass),this.settings&&this.settings.escapeHtml?a.text(i||""):a.html(i||""),n=a,this.settings.wrapper&&(n=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement.call(this,n,t(e)):n.insertAfter(e),a.is("label")?a.attr("for",l):0===a.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(o=a.attr("id"),d?d.match(new RegExp("\\b"+this.escapeCssMeta(o)+"\\b"))||(d+=" "+o):d=o,t(e).attr("aria-describedby",d),(s=this.groups[e.name])&&(r=this,t.each(r.groups,(function(e,i){i===s&&t("[name='"+r.escapeCssMeta(e)+"']",r.currentForm).attr("aria-describedby",a.attr("id"))}))))),!i&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,e)),this.toShow=this.toShow.add(a)},errorsFor:function(e){var i=this.escapeCssMeta(this.idOrName(e)),n=t(e).attr("aria-describedby"),s="label[for='"+i+"'], label[for='"+i+"'] *";return n&&(s=s+", #"+this.escapeCssMeta(n).replace(/\s+/g,", #")),this.errors().filter(s)},escapeCssMeta:function(t){return void 0===t?"":t.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),t(e).not(this.settings.ignore)[0]},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+this.escapeCssMeta(e)+"']")},getLength:function(e,i){switch(i.nodeName.toLowerCase()){case"select":return t("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return e.length},depend:function(t,e){return!this.dependTypes[typeof t]||this.dependTypes[typeof t](t,e)},dependTypes:{boolean:function(t){return t},string:function(e,i){return!!t(e,i.form).length},function:function(t,e){return t(e)}},optional:function(e){var i=this.elementValue(e);return!t.validator.methods.required.call(this,i,e)&&"dependency-mismatch"},elementAjaxPort:function(t){return"validate"+t.name},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,t(e).addClass(this.settings.pendingClass),this.pending[e.name]=!0)},stopRequest:function(e,i){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],t(e).removeClass(this.settings.pendingClass),i&&0===this.pendingRequest&&this.formSubmitted&&this.form()&&0===this.pendingRequest?(t(this.currentForm).trigger("submit"),this.submitButton&&t("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},abortRequest:function(e){var i;this.pending[e.name]&&(i=this.elementAjaxPort(e),t.ajaxAbort(i),this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],t(e).removeClass(this.settings.pendingClass))},previousValue:function(e,i){return i="string"==typeof i&&i||"remote",t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,{method:i})})},destroy:function(){this.resetForm(),t(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,i){e.constructor===String?this.classRuleSettings[e]=i:t.extend(this.classRuleSettings,e)},classRules:function(e){var i={},n=t(e).attr("class");return n&&t.each(n.split(" "),(function(){this in t.validator.classRuleSettings&&t.extend(i,t.validator.classRuleSettings[this])})),i},normalizeAttributeRule:function(t,e,i,n){/min|max|step/.test(i)&&(null===e||/number|range|text/.test(e))&&(n=Number(n),isNaN(n)&&(n=void 0)),n||0===n?t[i]=n:e===i&&"range"!==e&&(t["date"===e?"dateISO":i]=!0)},attributeRules:function(e){var i,n,s={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)"required"===i?(""===(n=e.getAttribute(i))&&(n=!0),n=!!n):n=o.attr(i),this.normalizeAttributeRule(s,r,i,n);return s.maxlength&&/-1|2147483647|524288/.test(s.maxlength)&&delete s.maxlength,s},dataRules:function(e){var i,n,s={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)""===(n=o.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()))&&(n=!0),this.normalizeAttributeRule(s,r,i,n);return s},staticRules:function(e){var i={},n=t.data(e.form,"validator");return n.settings.rules&&(i=t.validator.normalizeRule(n.settings.rules[e.name])||{}),i},normalizeRules:function(e,i){return t.each(e,(function(n,s){if(!1!==s){if(s.param||s.depends){var o=!0;switch(typeof s.depends){case"string":o=!!t(s.depends,i.form).length;break;case"function":o=s.depends.call(i,i)}o?e[n]=void 0===s.param||s.param:(t.data(i.form,"validator").resetElements(t(i)),delete e[n])}}else delete e[n]})),t.each(e,(function(t,n){e[t]="function"==typeof n&&"normalizer"!==t?n(i):n})),t.each(["minlength","maxlength"],(function(){e[this]&&(e[this]=Number(e[this]))})),t.each(["rangelength","range"],(function(){var t;e[this]&&(Array.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(t=e[this].replace(/[\[\]]/g,"").split(/[\s,]+/),e[this]=[Number(t[0]),Number(t[1])]))})),t.validator.autoCreateRanges&&(null!=e.min&&null!=e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),null!=e.minlength&&null!=e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var i={};t.each(e.split(/\s/),(function(){i[this]=!0})),e=i}return e},addMethod:function(e,i,n){t.validator.methods[e]=i,t.validator.messages[e]=void 0!==n?n:t.validator.messages[e],i.length<3&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,i,n){if(!this.depend(n,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var s=t(i).val();return s&&s.length>0}return this.checkable(i)?this.getLength(e,i)>0:null!=e&&e.length>0},email:function(t,e){return this.optional(e)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(t)},url:function(t,e){return this.optional(e)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(t)},date:(e=!1,function(t,i){return e||(e=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(i)||!/Invalid|NaN/.test(new Date(t).toString())}),dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(t)},number:function(t,e){return this.optional(e)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},minlength:function(t,e,i){var n=Array.isArray(t)?t.length:this.getLength(t,e);return this.optional(e)||n>=i},maxlength:function(t,e,i){var n=Array.isArray(t)?t.length:this.getLength(t,e);return this.optional(e)||n<=i},rangelength:function(t,e,i){var n=Array.isArray(t)?t.length:this.getLength(t,e);return this.optional(e)||n>=i[0]&&n<=i[1]},min:function(t,e,i){return this.optional(e)||t>=i},max:function(t,e,i){return this.optional(e)||t<=i},range:function(t,e,i){return this.optional(e)||t>=i[0]&&t<=i[1]},step:function(e,i,n){var s,o=t(i).attr("type"),r="Step attribute on input type "+o+" is not supported.",a=["text","number","range"],l=new RegExp("\\b"+o+"\\b"),d=function(t){var e=(""+t).match(/(?:\.(\d+))?$/);return e&&e[1]?e[1].length:0},c=function(t){return Math.round(t*Math.pow(10,s))},u=!0;if(o&&!l.test(a.join()))throw new Error(r);return s=d(n),(d(e)>s||c(e)%c(n)!=0)&&(u=!1),this.optional(i)||u},equalTo:function(e,i,n){var s=t(n);return this.settings.onfocusout&&s.not(".validate-equalTo-blur").length&&s.addClass("validate-equalTo-blur").on("blur.validate-equalTo",(function(){t(i).valid()})),e===s.val()},remote:function(e,i,n,s){if(this.optional(i))return"dependency-mismatch";s="string"==typeof s&&s||"remote";var o,r,a,l=this.previousValue(i,s);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[i.name][s],this.settings.messages[i.name][s]=l.message,n="string"==typeof n&&{url:n}||n,a=t.param(t.extend({data:e},n.data)),l.old===a?l.valid:(l.old=a,o=this,this.startRequest(i),(r={})[i.name]=e,t.ajax(t.extend(!0,{mode:"abort",port:this.elementAjaxPort(i),dataType:"json",data:r,context:o.currentForm,success:function(t){var n,r,a,d=!0===t||"true"===t;o.settings.messages[i.name][s]=l.originalMessage,d?(a=o.formSubmitted,o.toHide=o.errorsFor(i),o.formSubmitted=a,o.successList.push(i),o.invalid[i.name]=!1,o.showErrors()):(n={},r=t||o.defaultMessage(i,{method:s,parameters:e}),n[i.name]=l.message=r,o.invalid[i.name]=!0,o.showErrors(n)),l.valid=d,o.stopRequest(i,d)}},n)),"pending")}}});var n,s={};return t.ajaxPrefilter?t.ajaxPrefilter((function(e,i,n){var o=e.port;"abort"===e.mode&&(t.ajaxAbort(o),s[o]=n)})):(n=t.ajax,t.ajax=function(e){var i=("mode"in e?e:t.ajaxSettings).mode,o=("port"in e?e:t.ajaxSettings).port;return"abort"===i?(t.ajaxAbort(o),s[o]=n.apply(this,arguments),s[o]):n.apply(this,arguments)}),t.ajaxAbort=function(t){s[t]&&(s[t].abort(),delete s[t])},t})?n.apply(e,s):n)||(t.exports=o)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js":function(t,e){var i;!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(n,s){"use strict";var o=[],r=Object.getPrototypeOf,a=o.slice,l=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},d=o.push,c=o.indexOf,u={},h=u.toString,p=u.hasOwnProperty,f=p.toString,g=f.call(Object),m={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},b=function(t){return null!=t&&t===t.window},y=n.document,C={type:!0,src:!0,nonce:!0,noModule:!0};function _(t,e,i){var n,s,o=(i=i||y).createElement("script");if(o.text=t,e)for(n in C)(s=e[n]||e.getAttribute&&e.getAttribute(n))&&o.setAttribute(n,s);i.head.appendChild(o).parentNode.removeChild(o)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?u[h.call(t)]||"object":typeof t}var M="3.7.1",w=/HTML$/i,R=function(t,e){return new R.fn.init(t,e)};function A(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!v(t)&&!b(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function D(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}R.fn=R.prototype={jquery:M,constructor:R,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=R.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return R.each(this,t)},map:function(t){return this.pushStack(R.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(R.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(R.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:d,sort:o.sort,splice:o.splice},R.extend=R.fn.extend=function(){var t,e,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,d=!1;for("boolean"==typeof r&&(d=r,r=arguments[a]||{},a++),"object"==typeof r||v(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(d&&n&&(R.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[e],o=s&&!Array.isArray(i)?[]:s||R.isPlainObject(i)?i:{},s=!1,r[e]=R.extend(d,o,n)):void 0!==n&&(r[e]=n));return r},R.extend({expando:"jQuery"+(M+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==h.call(t))&&(!(e=r(t))||"function"==typeof(i=p.call(e,"constructor")&&e.constructor)&&f.call(i)===g)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){_(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(A(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},text:function(t){var e,i="",n=0,s=t.nodeType;if(!s)for(;e=t[n++];)i+=R.text(e);return 1===s||11===s?t.textContent:9===s?t.documentElement.textContent:3===s||4===s?t.nodeValue:i},makeArray:function(t,e){var i=e||[];return null!=t&&(A(Object(t))?R.merge(i,"string"==typeof t?[t]:t):d.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:c.call(e,t,i)},isXMLDoc:function(t){var e=t&&t.namespaceURI,i=t&&(t.ownerDocument||t).documentElement;return!w.test(e||i&&i.nodeName||"HTML")},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,o=t.length,r=!i;s<o;s++)!e(t[s],s)!==r&&n.push(t[s]);return n},map:function(t,e,i){var n,s,o=0,r=[];if(A(t))for(n=t.length;o<n;o++)null!=(s=e(t[o],o,i))&&r.push(s);else for(o in t)null!=(s=e(t[o],o,i))&&r.push(s);return l(r)},guid:1,support:m}),"function"==typeof Symbol&&(R.fn[Symbol.iterator]=o[Symbol.iterator]),R.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){u["[object "+e+"]"]=e.toLowerCase()}));var T=o.pop,S=o.sort,k=o.splice,B="[\\x20\\t\\r\\n\\f]",V=new RegExp("^"+B+"+|((?:^|[^\\\\])(?:\\\\.)*)"+B+"+$","g");R.contains=function(t,e){var i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(t.contains?t.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))};var j=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function E(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}R.escapeSelector=function(t){return(t+"").replace(j,E)};var P=y,L=d;!function(){var t,e,i,s,r,l,d,u,h,f,g=L,v=R.expando,b=0,y=0,C=tt(),_=tt(),x=tt(),M=tt(),w=function(t,e){return t===e&&(r=!0),0},A="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="(?:\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",E="\\["+B+"*("+j+")(?:"+B+"*([*^$|!~]?=)"+B+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+B+"*\\]",O=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+E+")*)|.*)\\)|)",I=new RegExp(B+"+","g"),F=new RegExp("^"+B+"*,"+B+"*"),N=new RegExp("^"+B+"*([>+~]|"+B+")"+B+"*"),Y=new RegExp(B+"|>"),K=new RegExp(O),H=new RegExp("^"+j+"$"),z={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+E),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+B+"*(even|odd|(([+-]|)(\\d*)n|)"+B+"*(?:([+-]|)"+B+"*(\\d+)|))"+B+"*\\)|)","i"),bool:new RegExp("^(?:"+A+")$","i"),needsContext:new RegExp("^"+B+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+B+"*((?:-\\d)?\\d*)"+B+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,$=/^h\d$/i,q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,U=/[+~]/,X=new RegExp("\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\([^\\r\\n\\f])","g"),G=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},Q=function(){lt()},J=ht((function(t){return!0===t.disabled&&D(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{g.apply(o=a.call(P.childNodes),P.childNodes),o[P.childNodes.length].nodeType}catch(t){g={apply:function(t,e){L.apply(t,a.call(e))},call:function(t){L.apply(t,a.call(arguments,1))}}}function Z(t,e,i,n){var s,o,r,a,d,c,p,f=e&&e.ownerDocument,b=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==b&&9!==b&&11!==b)return i;if(!n&&(lt(e),e=e||l,u)){if(11!==b&&(d=q.exec(t)))if(s=d[1]){if(9===b){if(!(r=e.getElementById(s)))return i;if(r.id===s)return g.call(i,r),i}else if(f&&(r=f.getElementById(s))&&Z.contains(e,r)&&r.id===s)return g.call(i,r),i}else{if(d[2])return g.apply(i,e.getElementsByTagName(t)),i;if((s=d[3])&&e.getElementsByClassName)return g.apply(i,e.getElementsByClassName(s)),i}if(!(M[t+" "]||h&&h.test(t))){if(p=t,f=e,1===b&&(Y.test(t)||N.test(t))){for((f=U.test(t)&&at(e.parentNode)||e)==e&&m.scope||((a=e.getAttribute("id"))?a=R.escapeSelector(a):e.setAttribute("id",a=v)),o=(c=ct(t)).length;o--;)c[o]=(a?"#"+a:":scope")+" "+ut(c[o]);p=c.join(",")}try{return g.apply(i,f.querySelectorAll(p)),i}catch(e){M(t,!0)}finally{a===v&&e.removeAttribute("id")}}}return bt(t.replace(V,"$1"),e,i,n)}function tt(){var t=[];return function i(n,s){return t.push(n+" ")>e.cacheLength&&delete i[t.shift()],i[n+" "]=s}}function et(t){return t[v]=!0,t}function it(t){var e=l.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function nt(t){return function(e){return D(e,"input")&&e.type===t}}function st(t){return function(e){return(D(e,"input")||D(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&J(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function rt(t){return et((function(e){return e=+e,et((function(i,n){for(var s,o=t([],i.length,e),r=o.length;r--;)i[s=o[r]]&&(i[s]=!(n[s]=i[s]))}))}))}function at(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var i,n=t?t.ownerDocument||t:P;return n!=l&&9===n.nodeType&&n.documentElement?(d=(l=n).documentElement,u=!R.isXMLDoc(l),f=d.matches||d.webkitMatchesSelector||d.msMatchesSelector,d.msMatchesSelector&&P!=l&&(i=l.defaultView)&&i.top!==i&&i.addEventListener("unload",Q),m.getById=it((function(t){return d.appendChild(t).id=R.expando,!l.getElementsByName||!l.getElementsByName(R.expando).length})),m.disconnectedMatch=it((function(t){return f.call(t,"*")})),m.scope=it((function(){return l.querySelectorAll(":scope")})),m.cssHas=it((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),m.getById?(e.filter.ID=function(t){var e=t.replace(X,G);return function(t){return t.getAttribute("id")===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&u){var i=e.getElementById(t);return i?[i]:[]}}):(e.filter.ID=function(t){var e=t.replace(X,G);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&u){var i,n,s,o=e.getElementById(t);if(o){if((i=o.getAttributeNode("id"))&&i.value===t)return[o];for(s=e.getElementsByName(t),n=0;o=s[n++];)if((i=o.getAttributeNode("id"))&&i.value===t)return[o]}return[]}}),e.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},e.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&u)return e.getElementsByClassName(t)},h=[],it((function(t){var e;d.appendChild(t).innerHTML="<a id='"+v+"' href='' disabled='disabled'></a><select id='"+v+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||h.push("\\["+B+"*(?:value|"+A+")"),t.querySelectorAll("[id~="+v+"-]").length||h.push("~="),t.querySelectorAll("a#"+v+"+*").length||h.push(".#.+[+~]"),t.querySelectorAll(":checked").length||h.push(":checked"),(e=l.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),(e=l.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||h.push("\\["+B+"*name"+B+"*="+B+"*(?:''|\"\")")})),m.cssHas||h.push(":has"),h=h.length&&new RegExp(h.join("|")),w=function(t,e){if(t===e)return r=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!m.sortDetached&&e.compareDocumentPosition(t)===i?t===l||t.ownerDocument==P&&Z.contains(P,t)?-1:e===l||e.ownerDocument==P&&Z.contains(P,e)?1:s?c.call(s,t)-c.call(s,e):0:4&i?-1:1)},l):l}for(t in Z.matches=function(t,e){return Z(t,null,null,e)},Z.matchesSelector=function(t,e){if(lt(t),u&&!M[e+" "]&&(!h||!h.test(e)))try{var i=f.call(t,e);if(i||m.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){M(e,!0)}return Z(e,l,null,[t]).length>0},Z.contains=function(t,e){return(t.ownerDocument||t)!=l&&lt(t),R.contains(t,e)},Z.attr=function(t,i){(t.ownerDocument||t)!=l&&lt(t);var n=e.attrHandle[i.toLowerCase()],s=n&&p.call(e.attrHandle,i.toLowerCase())?n(t,i,!u):void 0;return void 0!==s?s:t.getAttribute(i)},Z.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},R.uniqueSort=function(t){var e,i=[],n=0,o=0;if(r=!m.sortStable,s=!m.sortStable&&a.call(t,0),S.call(t,w),r){for(;e=t[o++];)e===t[o]&&(n=i.push(o));for(;n--;)k.call(t,i[n],1)}return s=null,t},R.fn.uniqueSort=function(){return this.pushStack(R.uniqueSort(a.apply(this)))},e=R.expr={cacheLength:50,createPseudo:et,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(X,G),t[3]=(t[3]||t[4]||t[5]||"").replace(X,G),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Z.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Z.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return z.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&K.test(i)&&(e=ct(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(X,G).toLowerCase();return"*"===t?function(){return!0}:function(t){return D(t,e)}},CLASS:function(t){var e=C[t+" "];return e||(e=new RegExp("(^|"+B+")"+t+"("+B+"|$)"))&&C(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var s=Z.attr(n,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&s.indexOf(i)>-1:"$="===e?i&&s.slice(-i.length)===i:"~="===e?(" "+s.replace(I," ")+" ").indexOf(i)>-1:"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var d,c,u,h,p,f=o!==r?"nextSibling":"previousSibling",g=e.parentNode,m=a&&e.nodeName.toLowerCase(),y=!l&&!a,C=!1;if(g){if(o){for(;f;){for(u=e;u=u[f];)if(a?D(u,m):1===u.nodeType)return!1;p=f="only"===t&&!p&&"nextSibling"}return!0}if(p=[r?g.firstChild:g.lastChild],r&&y){for(C=(h=(d=(c=g[v]||(g[v]={}))[t]||[])[0]===b&&d[1])&&d[2],u=h&&g.childNodes[h];u=++h&&u&&u[f]||(C=h=0)||p.pop();)if(1===u.nodeType&&++C&&u===e){c[t]=[b,h,C];break}}else if(y&&(C=h=(d=(c=e[v]||(e[v]={}))[t]||[])[0]===b&&d[1]),!1===C)for(;(u=++h&&u&&u[f]||(C=h=0)||p.pop())&&(!(a?D(u,m):1===u.nodeType)||!++C||(y&&((c=u[v]||(u[v]={}))[t]=[b,C]),u!==e)););return(C-=s)===n||C%n==0&&C/n>=0}}},PSEUDO:function(t,i){var n,s=e.pseudos[t]||e.setFilters[t.toLowerCase()]||Z.error("unsupported pseudo: "+t);return s[v]?s(i):s.length>1?(n=[t,t,"",i],e.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,e){for(var n,o=s(t,i),r=o.length;r--;)t[n=c.call(t,o[r])]=!(e[n]=o[r])})):function(t){return s(t,0,n)}):s}},pseudos:{not:et((function(t){var e=[],i=[],n=vt(t.replace(V,"$1"));return n[v]?et((function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))})):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}})),has:et((function(t){return function(e){return Z(t,e).length>0}})),contains:et((function(t){return t=t.replace(X,G),function(e){return(e.textContent||R.text(e)).indexOf(t)>-1}})),lang:et((function(t){return H.test(t||"")||Z.error("unsupported lang: "+t),t=t.replace(X,G).toLowerCase(),function(e){var i;do{if(i=u?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===d},focus:function(t){return t===function(){try{return l.activeElement}catch(t){}}()&&l.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return D(t,"input")&&!!t.checked||D(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!e.pseudos.empty(t)},header:function(t){return $.test(t.nodeName)},input:function(t){return W.test(t.nodeName)},button:function(t){return D(t,"input")&&"button"===t.type||D(t,"button")},text:function(t){var e;return D(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:rt((function(){return[0]})),last:rt((function(t,e){return[e-1]})),eq:rt((function(t,e,i){return[i<0?i+e:i]})),even:rt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:rt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:rt((function(t,e,i){var n;for(n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:rt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}},e.pseudos.nth=e.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})e.pseudos[t]=nt(t);for(t in{submit:!0,reset:!0})e.pseudos[t]=st(t);function dt(){}function ct(t,i){var n,s,o,r,a,l,d,c=_[t+" "];if(c)return i?0:c.slice(0);for(a=t,l=[],d=e.preFilter;a;){for(r in n&&!(s=F.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),n=!1,(s=N.exec(a))&&(n=s.shift(),o.push({value:n,type:s[0].replace(V," ")}),a=a.slice(n.length)),e.filter)!(s=z[r].exec(a))||d[r]&&!(s=d[r](s))||(n=s.shift(),o.push({value:n,type:r,matches:s}),a=a.slice(n.length));if(!n)break}return i?a.length:a?Z.error(t):_(t,l).slice(0)}function ut(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function ht(t,e,i){var n=e.dir,s=e.next,o=s||n,r=i&&"parentNode"===o,a=y++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,s);return!1}:function(e,i,l){var d,c,u=[b,a];if(l){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||r)if(c=e[v]||(e[v]={}),s&&D(e,s))e=e[n]||e;else{if((d=c[o])&&d[0]===b&&d[1]===a)return u[2]=d[2];if(c[o]=u,u[2]=t(e,i,l))return!0}return!1}}function pt(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function ft(t,e,i,n,s){for(var o,r=[],a=0,l=t.length,d=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,n,s)||(r.push(o),d&&e.push(a)));return r}function gt(t,e,i,n,s,o){return n&&!n[v]&&(n=gt(n)),s&&!s[v]&&(s=gt(s,o)),et((function(o,r,a,l){var d,u,h,p,f=[],m=[],v=r.length,b=o||function(t,e,i){for(var n=0,s=e.length;n<s;n++)Z(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),y=!t||!o&&e?b:ft(b,f,t,a,l);if(i?i(y,p=s||(o?t:v||n)?[]:r,a,l):p=y,n)for(d=ft(p,m),n(d,[],a,l),u=d.length;u--;)(h=d[u])&&(p[m[u]]=!(y[m[u]]=h));if(o){if(s||t){if(s){for(d=[],u=p.length;u--;)(h=p[u])&&d.push(y[u]=h);s(null,p=[],d,l)}for(u=p.length;u--;)(h=p[u])&&(d=s?c.call(o,h):f[u])>-1&&(o[d]=!(r[d]=h))}}else p=ft(p===r?p.splice(v,p.length):p),s?s(null,r,p,l):g.apply(r,p)}))}function mt(t){for(var n,s,o,r=t.length,a=e.relative[t[0].type],l=a||e.relative[" "],d=a?1:0,u=ht((function(t){return t===n}),l,!0),h=ht((function(t){return c.call(n,t)>-1}),l,!0),p=[function(t,e,s){var o=!a&&(s||e!=i)||((n=e).nodeType?u(t,e,s):h(t,e,s));return n=null,o}];d<r;d++)if(s=e.relative[t[d].type])p=[ht(pt(p),s)];else{if((s=e.filter[t[d].type].apply(null,t[d].matches))[v]){for(o=++d;o<r&&!e.relative[t[o].type];o++);return gt(d>1&&pt(p),d>1&&ut(t.slice(0,d-1).concat({value:" "===t[d-2].type?"*":""})).replace(V,"$1"),s,d<o&&mt(t.slice(d,o)),o<r&&mt(t=t.slice(o)),o<r&&ut(t))}p.push(s)}return pt(p)}function vt(t,n){var s,o=[],r=[],a=x[t+" "];if(!a){for(n||(n=ct(t)),s=n.length;s--;)(a=mt(n[s]))[v]?o.push(a):r.push(a);a=x(t,function(t,n){var s=n.length>0,o=t.length>0,r=function(r,a,d,c,h){var p,f,m,v=0,y="0",C=r&&[],_=[],x=i,M=r||o&&e.find.TAG("*",h),w=b+=null==x?1:Math.random()||.1,A=M.length;for(h&&(i=a==l||a||h);y!==A&&null!=(p=M[y]);y++){if(o&&p){for(f=0,a||p.ownerDocument==l||(lt(p),d=!u);m=t[f++];)if(m(p,a||l,d)){g.call(c,p);break}h&&(b=w)}s&&((p=!m&&p)&&v--,r&&C.push(p))}if(v+=y,s&&y!==v){for(f=0;m=n[f++];)m(C,_,a,d);if(r){if(v>0)for(;y--;)C[y]||_[y]||(_[y]=T.call(c));_=ft(_)}g.apply(c,_),h&&!r&&_.length>0&&v+n.length>1&&R.uniqueSort(c)}return h&&(b=w,i=x),C};return s?et(r):r}(r,o)),a.selector=t}return a}function bt(t,i,n,s){var o,r,a,l,d,c="function"==typeof t&&t,h=!s&&ct(t=c.selector||t);if(n=n||[],1===h.length){if((r=h[0]=h[0].slice(0)).length>2&&"ID"===(a=r[0]).type&&9===i.nodeType&&u&&e.relative[r[1].type]){if(!(i=(e.find.ID(a.matches[0].replace(X,G),i)||[])[0]))return n;c&&(i=i.parentNode),t=t.slice(r.shift().value.length)}for(o=z.needsContext.test(t)?0:r.length;o--&&(a=r[o],!e.relative[l=a.type]);)if((d=e.find[l])&&(s=d(a.matches[0].replace(X,G),U.test(r[0].type)&&at(i.parentNode)||i))){if(r.splice(o,1),!(t=s.length&&ut(r)))return g.apply(n,s),n;break}}return(c||vt(t,h))(s,i,!u,n,!i||U.test(t)&&at(i.parentNode)||i),n}dt.prototype=e.filters=e.pseudos,e.setFilters=new dt,m.sortStable=v.split("").sort(w).join("")===v,lt(),m.sortDetached=it((function(t){return 1&t.compareDocumentPosition(l.createElement("fieldset"))})),R.find=Z,R.expr[":"]=R.expr.pseudos,R.unique=R.uniqueSort,Z.compile=vt,Z.select=bt,Z.setDocument=lt,Z.tokenize=ct,Z.escape=R.escapeSelector,Z.getText=R.text,Z.isXML=R.isXMLDoc,Z.selectors=R.expr,Z.support=R.support,Z.uniqueSort=R.uniqueSort}();var O=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&R(t).is(i))break;n.push(t)}return n},I=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},F=R.expr.match.needsContext,N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function Y(t,e,i){return v(e)?R.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?R.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?R.grep(t,(function(t){return c.call(e,t)>-1!==i})):R.filter(e,t,i)}R.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?R.find.matchesSelector(n,t)?[n]:[]:R.find.matches(t,R.grep(e,(function(t){return 1===t.nodeType})))},R.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(R(t).filter((function(){for(e=0;e<n;e++)if(R.contains(s[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)R.find(t,s[e],i);return n>1?R.uniqueSort(i):i},filter:function(t){return this.pushStack(Y(this,t||[],!1))},not:function(t){return this.pushStack(Y(this,t||[],!0))},is:function(t){return!!Y(this,"string"==typeof t&&F.test(t)?R(t):t||[],!1).length}});var K,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(R.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||K,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:H.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof R?e[0]:e,R.merge(this,R.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:y,!0)),N.test(n[1])&&R.isPlainObject(e))for(n in e)v(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=y.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==i.ready?i.ready(t):t(R):R.makeArray(t,this)}).prototype=R.fn,K=R(y);var z=/^(?:parents|prev(?:Until|All))/,W={children:!0,contents:!0,next:!0,prev:!0};function $(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}R.fn.extend({has:function(t){var e=R(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(R.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,s=this.length,o=[],r="string"!=typeof t&&R(t);if(!F.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&R.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?R.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?c.call(R(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(R.uniqueSort(R.merge(this.get(),R(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),R.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return O(t,"parentNode")},parentsUntil:function(t,e,i){return O(t,"parentNode",i)},next:function(t){return $(t,"nextSibling")},prev:function(t){return $(t,"previousSibling")},nextAll:function(t){return O(t,"nextSibling")},prevAll:function(t){return O(t,"previousSibling")},nextUntil:function(t,e,i){return O(t,"nextSibling",i)},prevUntil:function(t,e,i){return O(t,"previousSibling",i)},siblings:function(t){return I((t.parentNode||{}).firstChild,t)},children:function(t){return I(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(D(t,"template")&&(t=t.content||t),R.merge([],t.childNodes))}},(function(t,e){R.fn[t]=function(i,n){var s=R.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=R.filter(n,s)),this.length>1&&(W[t]||R.uniqueSort(s),z.test(t)&&s.reverse()),this.pushStack(s)}}));var q=/[^\x20\t\r\n\f]+/g;function U(t){return t}function X(t){throw t}function G(t,e,i,n){var s;try{t&&v(s=t.promise)?s.call(t).done(e).fail(i):t&&v(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}R.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return R.each(t.match(q)||[],(function(t,i){e[i]=!0})),e}(t):R.extend({},t);var e,i,n,s,o=[],r=[],a=-1,l=function(){for(s=s||t.once,n=e=!0;r.length;a=-1)for(i=r.shift();++a<o.length;)!1===o[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=o.length,i=!1);t.memory||(i=!1),e=!1,s&&(o=i?[]:"")},d={add:function(){return o&&(i&&!e&&(a=o.length-1,r.push(i)),function e(i){R.each(i,(function(i,n){v(n)?t.unique&&d.has(n)||o.push(n):n&&n.length&&"string"!==x(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return R.each(arguments,(function(t,e){for(var i;(i=R.inArray(e,o,i))>-1;)o.splice(i,1),i<=a&&a--})),this},has:function(t){return t?R.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return s=r=[],o=i="",this},disabled:function(){return!o},lock:function(){return s=r=[],i||e||(o=i=""),this},locked:function(){return!!s},fireWith:function(t,i){return s||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},R.extend({Deferred:function(t){var e=[["notify","progress",R.Callbacks("memory"),R.Callbacks("memory"),2],["resolve","done",R.Callbacks("once memory"),R.Callbacks("once memory"),0,"resolved"],["reject","fail",R.Callbacks("once memory"),R.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return R.Deferred((function(i){R.each(e,(function(e,n){var s=v(t[n[4]])&&t[n[4]];o[n[1]]((function(){var t=s&&s.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,i,s){var o=0;function r(t,e,i,s){return function(){var a=this,l=arguments,d=function(){var n,d;if(!(t<o)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");d=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(d)?s?d.call(n,r(o,e,U,s),r(o,e,X,s)):(o++,d.call(n,r(o,e,U,s),r(o,e,X,s),r(o,e,U,e.notifyWith))):(i!==U&&(a=void 0,l=[n]),(s||e.resolveWith)(a,l))}},c=s?d:function(){try{d()}catch(n){R.Deferred.exceptionHook&&R.Deferred.exceptionHook(n,c.error),t+1>=o&&(i!==X&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?c():(R.Deferred.getErrorHook?c.error=R.Deferred.getErrorHook():R.Deferred.getStackHook&&(c.error=R.Deferred.getStackHook()),n.setTimeout(c))}}return R.Deferred((function(n){e[0][3].add(r(0,n,v(s)?s:U,n.notifyWith)),e[1][3].add(r(0,n,v(t)?t:U)),e[2][3].add(r(0,n,v(i)?i:X))})).promise()},promise:function(t){return null!=t?R.extend(t,s):s}},o={};return R.each(e,(function(t,n){var r=n[2],a=n[5];s[n[1]]=r.add,a&&r.add((function(){i=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),r.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=r.fireWith})),s.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,i=e,n=Array(i),s=a.call(arguments),o=R.Deferred(),r=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?a.call(arguments):i,--e||o.resolveWith(n,s)}};if(e<=1&&(G(t,o.done(r(i)).resolve,o.reject,!e),"pending"===o.state()||v(s[i]&&s[i].then)))return o.then();for(;i--;)G(s[i],r(i),o.reject);return o.promise()}});var Q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;R.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&Q.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},R.readyException=function(t){n.setTimeout((function(){throw t}))};var J=R.Deferred();function Z(){y.removeEventListener("DOMContentLoaded",Z),n.removeEventListener("load",Z),R.ready()}R.fn.ready=function(t){return J.then(t).catch((function(t){R.readyException(t)})),this},R.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--R.readyWait:R.isReady)||(R.isReady=!0,!0!==t&&--R.readyWait>0||J.resolveWith(y,[R]))}}),R.ready.then=J.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?n.setTimeout(R.ready):(y.addEventListener("DOMContentLoaded",Z),n.addEventListener("load",Z));var tt=function(t,e,i,n,s,o,r){var a=0,l=t.length,d=null==i;if("object"===x(i))for(a in s=!0,i)tt(t,e,a,i[a],!0,o,r);else if(void 0!==n&&(s=!0,v(n)||(r=!0),d&&(r?(e.call(t,n),e=null):(d=e,e=function(t,e,i){return d.call(R(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return s?t:d?e.call(t):l?e(t[0],i):o},et=/^-ms-/,it=/-([a-z])/g;function nt(t,e){return e.toUpperCase()}function st(t){return t.replace(et,"ms-").replace(it,nt)}var ot=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function rt(){this.expando=R.expando+rt.uid++}rt.uid=1,rt.prototype={cache:function(t){var e=t[this.expando];return e||(e={},ot(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[st(e)]=i;else for(n in e)s[st(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][st(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(st):(e=st(e))in n?[e]:e.match(q)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||R.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!R.isEmptyObject(e)}};var at=new rt,lt=new rt,dt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ct=/[A-Z]/g;function ut(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(ct,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:dt.test(t)?JSON.parse(t):t)}(i)}catch(t){}lt.set(t,e,i)}else i=void 0;return i}R.extend({hasData:function(t){return lt.hasData(t)||at.hasData(t)},data:function(t,e,i){return lt.access(t,e,i)},removeData:function(t,e){lt.remove(t,e)},_data:function(t,e,i){return at.access(t,e,i)},_removeData:function(t,e){at.remove(t,e)}}),R.fn.extend({data:function(t,e){var i,n,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=lt.get(o),1===o.nodeType&&!at.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=st(n.slice(5)),ut(o,n,s[n]));at.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){lt.set(this,t)})):tt(this,(function(e){var i;if(o&&void 0===e)return void 0!==(i=lt.get(o,t))||void 0!==(i=ut(o,t))?i:void 0;this.each((function(){lt.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){lt.remove(this,t)}))}}),R.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=at.get(t,e),i&&(!n||Array.isArray(i)?n=at.access(t,e,R.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=R.queue(t,e),n=i.length,s=i.shift(),o=R._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete o.stop,s.call(t,(function(){R.dequeue(t,e)}),o)),!n&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return at.get(t,i)||at.access(t,i,{empty:R.Callbacks("once memory").add((function(){at.remove(t,[e+"queue",i])}))})}}),R.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?R.queue(this[0],t):void 0===e?this:this.each((function(){var i=R.queue(this,t,e);R._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&R.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){R.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=R.Deferred(),o=this,r=this.length,a=function(){--n||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=at.get(o[r],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var ht=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,pt=new RegExp("^(?:([+-])=|)("+ht+")([a-z%]*)$","i"),ft=["Top","Right","Bottom","Left"],gt=y.documentElement,mt=function(t){return R.contains(t.ownerDocument,t)},vt={composed:!0};gt.getRootNode&&(mt=function(t){return R.contains(t.ownerDocument,t)||t.getRootNode(vt)===t.ownerDocument});var bt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&mt(t)&&"none"===R.css(t,"display")};function yt(t,e,i,n){var s,o,r=20,a=n?function(){return n.cur()}:function(){return R.css(t,e,"")},l=a(),d=i&&i[3]||(R.cssNumber[e]?"":"px"),c=t.nodeType&&(R.cssNumber[e]||"px"!==d&&+l)&&pt.exec(R.css(t,e));if(c&&c[3]!==d){for(l/=2,d=d||c[3],c=+l||1;r--;)R.style(t,e,c+d),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),c/=o;c*=2,R.style(t,e,c+d),i=i||[]}return i&&(c=+c||+l||0,s=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=d,n.start=c,n.end=s)),s}var Ct={};function _t(t){var e,i=t.ownerDocument,n=t.nodeName,s=Ct[n];return s||(e=i.body.appendChild(i.createElement(n)),s=R.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),Ct[n]=s,s)}function xt(t,e){for(var i,n,s=[],o=0,r=t.length;o<r;o++)(n=t[o]).style&&(i=n.style.display,e?("none"===i&&(s[o]=at.get(n,"display")||null,s[o]||(n.style.display="")),""===n.style.display&&bt(n)&&(s[o]=_t(n))):"none"!==i&&(s[o]="none",at.set(n,"display",i)));for(o=0;o<r;o++)null!=s[o]&&(t[o].style.display=s[o]);return t}R.fn.extend({show:function(){return xt(this,!0)},hide:function(){return xt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){bt(this)?R(this).show():R(this).hide()}))}});var Mt,wt,Rt=/^(?:checkbox|radio)$/i,At=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Dt=/^$|^module$|\/(?:java|ecma)script/i;Mt=y.createDocumentFragment().appendChild(y.createElement("div")),(wt=y.createElement("input")).setAttribute("type","radio"),wt.setAttribute("checked","checked"),wt.setAttribute("name","t"),Mt.appendChild(wt),m.checkClone=Mt.cloneNode(!0).cloneNode(!0).lastChild.checked,Mt.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!Mt.cloneNode(!0).lastChild.defaultValue,Mt.innerHTML="<option></option>",m.option=!!Mt.lastChild;var Tt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function St(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&D(t,e)?R.merge([t],i):i}function kt(t,e){for(var i=0,n=t.length;i<n;i++)at.set(t[i],"globalEval",!e||at.get(e[i],"globalEval"))}Tt.tbody=Tt.tfoot=Tt.colgroup=Tt.caption=Tt.thead,Tt.th=Tt.td,m.option||(Tt.optgroup=Tt.option=[1,"<select multiple='multiple'>","</select>"]);var Bt=/<|&#?\w+;/;function Vt(t,e,i,n,s){for(var o,r,a,l,d,c,u=e.createDocumentFragment(),h=[],p=0,f=t.length;p<f;p++)if((o=t[p])||0===o)if("object"===x(o))R.merge(h,o.nodeType?[o]:o);else if(Bt.test(o)){for(r=r||u.appendChild(e.createElement("div")),a=(At.exec(o)||["",""])[1].toLowerCase(),l=Tt[a]||Tt._default,r.innerHTML=l[1]+R.htmlPrefilter(o)+l[2],c=l[0];c--;)r=r.lastChild;R.merge(h,r.childNodes),(r=u.firstChild).textContent=""}else h.push(e.createTextNode(o));for(u.textContent="",p=0;o=h[p++];)if(n&&R.inArray(o,n)>-1)s&&s.push(o);else if(d=mt(o),r=St(u.appendChild(o),"script"),d&&kt(r),i)for(c=0;o=r[c++];)Dt.test(o.type||"")&&i.push(o);return u}var jt=/^([^.]*)(?:\.(.+)|)/;function Et(){return!0}function Pt(){return!1}function Lt(t,e,i,n,s,o){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)Lt(t,a,i,n,e[a],o);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Pt;else if(!s)return t;return 1===o&&(r=s,s=function(t){return R().off(t),r.apply(this,arguments)},s.guid=r.guid||(r.guid=R.guid++)),t.each((function(){R.event.add(this,e,s,n,i)}))}function Ot(t,e,i){i?(at.set(t,e,!1),R.event.add(t,e,{namespace:!1,handler:function(t){var i,n=at.get(this,e);if(1&t.isTrigger&&this[e]){if(n)(R.event.special[e]||{}).delegateType&&t.stopPropagation();else if(n=a.call(arguments),at.set(this,e,n),this[e](),i=at.get(this,e),at.set(this,e,!1),n!==i)return t.stopImmediatePropagation(),t.preventDefault(),i}else n&&(at.set(this,e,R.event.trigger(n[0],n.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=Et)}})):void 0===at.get(t,e)&&R.event.add(t,e,Et)}R.event={global:{},add:function(t,e,i,n,s){var o,r,a,l,d,c,u,h,p,f,g,m=at.get(t);if(ot(t))for(i.handler&&(i=(o=i).handler,s=o.selector),s&&R.find.matchesSelector(gt,s),i.guid||(i.guid=R.guid++),(l=m.events)||(l=m.events=Object.create(null)),(r=m.handle)||(r=m.handle=function(e){return void 0!==R&&R.event.triggered!==e.type?R.event.dispatch.apply(t,arguments):void 0}),d=(e=(e||"").match(q)||[""]).length;d--;)p=g=(a=jt.exec(e[d])||[])[1],f=(a[2]||"").split(".").sort(),p&&(u=R.event.special[p]||{},p=(s?u.delegateType:u.bindType)||p,u=R.event.special[p]||{},c=R.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&R.expr.match.needsContext.test(s),namespace:f.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(p,r)),u.add&&(u.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,c):h.push(c),R.event.global[p]=!0)},remove:function(t,e,i,n,s){var o,r,a,l,d,c,u,h,p,f,g,m=at.hasData(t)&&at.get(t);if(m&&(l=m.events)){for(d=(e=(e||"").match(q)||[""]).length;d--;)if(p=g=(a=jt.exec(e[d])||[])[1],f=(a[2]||"").split(".").sort(),p){for(u=R.event.special[p]||{},h=l[p=(n?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=h.length;o--;)c=h[o],!s&&g!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,u.remove&&u.remove.call(t,c));r&&!h.length&&(u.teardown&&!1!==u.teardown.call(t,f,m.handle)||R.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)R.event.remove(t,p+e[d],i,n,!0);R.isEmptyObject(l)&&at.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,o,r,a=new Array(arguments.length),l=R.event.fix(t),d=(at.get(this,"events")||Object.create(null))[l.type]||[],c=R.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(r=R.event.handlers.call(this,l,d),e=0;(s=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(n=((R.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,s,o,r,a=[],l=e.delegateCount,d=t.target;if(l&&d.nodeType&&!("click"===t.type&&t.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==t.type||!0!==d.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[s=(n=e[i]).selector+" "]&&(r[s]=n.needsContext?R(s,this).index(d)>-1:R.find(s,this,null,[d]).length),r[s]&&o.push(n);o.length&&a.push({elem:d,handlers:o})}return d=this,l<e.length&&a.push({elem:d,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(R.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[R.expando]?t:new R.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return Rt.test(e.type)&&e.click&&D(e,"input")&&Ot(e,"click",!0),!1},trigger:function(t){var e=this||t;return Rt.test(e.type)&&e.click&&D(e,"input")&&Ot(e,"click"),!0},_default:function(t){var e=t.target;return Rt.test(e.type)&&e.click&&D(e,"input")&&at.get(e,"click")||D(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},R.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},R.Event=function(t,e){if(!(this instanceof R.Event))return new R.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Et:Pt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&R.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[R.expando]=!0},R.Event.prototype={constructor:R.Event,isDefaultPrevented:Pt,isPropagationStopped:Pt,isImmediatePropagationStopped:Pt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Et,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Et,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Et,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},R.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},R.event.addProp),R.each({focus:"focusin",blur:"focusout"},(function(t,e){function i(t){if(y.documentMode){var i=at.get(this,"handle"),n=R.event.fix(t);n.type="focusin"===t.type?"focus":"blur",n.isSimulated=!0,i(t),n.target===n.currentTarget&&i(n)}else R.event.simulate(e,t.target,R.event.fix(t))}R.event.special[t]={setup:function(){var n;if(Ot(this,t,!0),!y.documentMode)return!1;(n=at.get(this,e))||this.addEventListener(e,i),at.set(this,e,(n||0)+1)},trigger:function(){return Ot(this,t),!0},teardown:function(){var t;if(!y.documentMode)return!1;(t=at.get(this,e)-1)?at.set(this,e,t):(this.removeEventListener(e,i),at.remove(this,e))},_default:function(e){return at.get(e.target,t)},delegateType:e},R.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,s=y.documentMode?this:n,o=at.get(s,e);o||(y.documentMode?this.addEventListener(e,i):n.addEventListener(t,i,!0)),at.set(s,e,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,s=y.documentMode?this:n,o=at.get(s,e)-1;o?at.set(s,e,o):(y.documentMode?this.removeEventListener(e,i):n.removeEventListener(t,i,!0),at.remove(s,e))}}})),R.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){R.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,s=t.handleObj;return n&&(n===this||R.contains(this,n))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}})),R.fn.extend({on:function(t,e,i,n){return Lt(this,t,e,i,n)},one:function(t,e,i,n){return Lt(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,R(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Pt),this.each((function(){R.event.remove(this,t,i,e)}))}});var It=/<script|<style|<link/i,Ft=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Yt(t,e){return D(t,"table")&&D(11!==e.nodeType?e:e.firstChild,"tr")&&R(t).children("tbody")[0]||t}function Kt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ht(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function zt(t,e){var i,n,s,o,r,a;if(1===e.nodeType){if(at.hasData(t)&&(a=at.get(t).events))for(s in at.remove(e,"handle events"),a)for(i=0,n=a[s].length;i<n;i++)R.event.add(e,s,a[s][i]);lt.hasData(t)&&(o=lt.access(t),r=R.extend({},o),lt.set(e,r))}}function Wt(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Rt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function $t(t,e,i,n){e=l(e);var s,o,r,a,d,c,u=0,h=t.length,p=h-1,f=e[0],g=v(f);if(g||h>1&&"string"==typeof f&&!m.checkClone&&Ft.test(f))return t.each((function(s){var o=t.eq(s);g&&(e[0]=f.call(this,s,o.html())),$t(o,e,i,n)}));if(h&&(o=(s=Vt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===s.childNodes.length&&(s=o),o||n)){for(a=(r=R.map(St(s,"script"),Kt)).length;u<h;u++)d=s,u!==p&&(d=R.clone(d,!0,!0),a&&R.merge(r,St(d,"script"))),i.call(t[u],d,u);if(a)for(c=r[r.length-1].ownerDocument,R.map(r,Ht),u=0;u<a;u++)d=r[u],Dt.test(d.type||"")&&!at.access(d,"globalEval")&&R.contains(c,d)&&(d.src&&"module"!==(d.type||"").toLowerCase()?R._evalUrl&&!d.noModule&&R._evalUrl(d.src,{nonce:d.nonce||d.getAttribute("nonce")},c):_(d.textContent.replace(Nt,""),d,c))}return t}function qt(t,e,i){for(var n,s=e?R.filter(e,t):t,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||R.cleanData(St(n)),n.parentNode&&(i&&mt(n)&&kt(St(n,"script")),n.parentNode.removeChild(n));return t}R.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,s,o,r,a=t.cloneNode(!0),l=mt(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||R.isXMLDoc(t)))for(r=St(a),n=0,s=(o=St(t)).length;n<s;n++)Wt(o[n],r[n]);if(e)if(i)for(o=o||St(t),r=r||St(a),n=0,s=o.length;n<s;n++)zt(o[n],r[n]);else zt(t,a);return(r=St(a,"script")).length>0&&kt(r,!l&&St(t,"script")),a},cleanData:function(t){for(var e,i,n,s=R.event.special,o=0;void 0!==(i=t[o]);o++)if(ot(i)){if(e=i[at.expando]){if(e.events)for(n in e.events)s[n]?R.event.remove(i,n):R.removeEvent(i,n,e.handle);i[at.expando]=void 0}i[lt.expando]&&(i[lt.expando]=void 0)}}}),R.fn.extend({detach:function(t){return qt(this,t,!0)},remove:function(t){return qt(this,t)},text:function(t){return tt(this,(function(t){return void 0===t?R.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return $t(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Yt(this,t).appendChild(t)}))},prepend:function(){return $t(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Yt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return $t(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return $t(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(R.cleanData(St(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return R.clone(this,t,e)}))},html:function(t){return tt(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!It.test(t)&&!Tt[(At.exec(t)||["",""])[1].toLowerCase()]){t=R.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(R.cleanData(St(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return $t(this,arguments,(function(e){var i=this.parentNode;R.inArray(this,t)<0&&(R.cleanData(St(this)),i&&i.replaceChild(e,this))}),t)}}),R.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){R.fn[t]=function(t){for(var i,n=[],s=R(t),o=s.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),R(s[r])[e](i),d.apply(n,i.get());return this.pushStack(n)}}));var Ut=new RegExp("^("+ht+")(?!px)[a-z%]+$","i"),Xt=/^--/,Gt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Qt=function(t,e,i){var n,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in n=i.call(t),e)t.style[s]=o[s];return n},Jt=new RegExp(ft.join("|"),"i");function Zt(t,e,i){var n,s,o,r,a=Xt.test(e),l=t.style;return(i=i||Gt(t))&&(r=i.getPropertyValue(e)||i[e],a&&r&&(r=r.replace(V,"$1")||void 0),""!==r||mt(t)||(r=R.style(t,e)),!m.pixelBoxStyles()&&Ut.test(r)&&Jt.test(e)&&(n=l.width,s=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=r,r=i.width,l.width=n,l.minWidth=s,l.maxWidth=o)),void 0!==r?r+"":r}function te(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){d.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",gt.appendChild(d).appendChild(c);var t=n.getComputedStyle(c);i="1%"!==t.top,l=12===e(t.marginLeft),c.style.right="60%",r=36===e(t.right),s=36===e(t.width),c.style.position="absolute",o=12===e(c.offsetWidth/3),gt.removeChild(d),c=null}}function e(t){return Math.round(parseFloat(t))}var i,s,o,r,a,l,d=y.createElement("div"),c=y.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,R.extend(m,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),r},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,i,s;return null==a&&(t=y.createElement("table"),e=y.createElement("tr"),i=y.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="box-sizing:content-box;border:1px solid",e.style.height="1px",i.style.height="9px",i.style.display="block",gt.appendChild(t).appendChild(e).appendChild(i),s=n.getComputedStyle(e),a=parseInt(s.height,10)+parseInt(s.borderTopWidth,10)+parseInt(s.borderBottomWidth,10)===e.offsetHeight,gt.removeChild(t)),a}}))}();var ee=["Webkit","Moz","ms"],ie=y.createElement("div").style,ne={};function se(t){var e=R.cssProps[t]||ne[t];return e||(t in ie?t:ne[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=ee.length;i--;)if((t=ee[i]+e)in ie)return t}(t)||t)}var oe=/^(none|table(?!-c[ea]).+)/,re={position:"absolute",visibility:"hidden",display:"block"},ae={letterSpacing:"0",fontWeight:"400"};function le(t,e,i){var n=pt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function de(t,e,i,n,s,o){var r="width"===e?1:0,a=0,l=0,d=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(d+=R.css(t,i+ft[r],!0,s)),n?("content"===i&&(l-=R.css(t,"padding"+ft[r],!0,s)),"margin"!==i&&(l-=R.css(t,"border"+ft[r]+"Width",!0,s))):(l+=R.css(t,"padding"+ft[r],!0,s),"padding"!==i?l+=R.css(t,"border"+ft[r]+"Width",!0,s):a+=R.css(t,"border"+ft[r]+"Width",!0,s));return!n&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))||0),l+d}function ce(t,e,i){var n=Gt(t),s=(!m.boxSizingReliable()||i)&&"border-box"===R.css(t,"boxSizing",!1,n),o=s,r=Zt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(Ut.test(r)){if(!i)return r;r="auto"}return(!m.boxSizingReliable()&&s||!m.reliableTrDimensions()&&D(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===R.css(t,"display",!1,n))&&t.getClientRects().length&&(s="border-box"===R.css(t,"boxSizing",!1,n),(o=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+de(t,e,i||(s?"border":"content"),o,n,r)+"px"}function ue(t,e,i,n,s){return new ue.prototype.init(t,e,i,n,s)}R.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Zt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=st(e),l=Xt.test(e),d=t.style;if(l||(e=se(a)),r=R.cssHooks[e]||R.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(t,!1,n))?s:d[e];"string"===(o=typeof i)&&(s=pt.exec(i))&&s[1]&&(i=yt(t,e,s),o="number"),null!=i&&i==i&&("number"!==o||l||(i+=s&&s[3]||(R.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==i||0!==e.indexOf("background")||(d[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?d.setProperty(e,i):d[e]=i))}},css:function(t,e,i,n){var s,o,r,a=st(e);return Xt.test(e)||(e=se(a)),(r=R.cssHooks[e]||R.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,i)),void 0===s&&(s=Zt(t,e,n)),"normal"===s&&e in ae&&(s=ae[e]),""===i||i?(o=parseFloat(s),!0===i||isFinite(o)?o||0:s):s}}),R.each(["height","width"],(function(t,e){R.cssHooks[e]={get:function(t,i,n){if(i)return!oe.test(R.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ce(t,e,n):Qt(t,re,(function(){return ce(t,e,n)}))},set:function(t,i,n){var s,o=Gt(t),r=!m.scrollboxSize()&&"absolute"===o.position,a=(r||n)&&"border-box"===R.css(t,"boxSizing",!1,o),l=n?de(t,e,n,a,o):0;return a&&r&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-de(t,e,"border",!1,o)-.5)),l&&(s=pt.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=R.css(t,e)),le(0,i,l)}}})),R.cssHooks.marginLeft=te(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Zt(t,"marginLeft"))||t.getBoundingClientRect().left-Qt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),R.each({margin:"",padding:"",border:"Width"},(function(t,e){R.cssHooks[t+e]={expand:function(i){for(var n=0,s={},o="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+ft[n]+e]=o[n]||o[n-2]||o[0];return s}},"margin"!==t&&(R.cssHooks[t+e].set=le)})),R.fn.extend({css:function(t,e){return tt(this,(function(t,e,i){var n,s,o={},r=0;if(Array.isArray(e)){for(n=Gt(t),s=e.length;r<s;r++)o[e[r]]=R.css(t,e[r],!1,n);return o}return void 0!==i?R.style(t,e,i):R.css(t,e)}),t,e,arguments.length>1)}}),R.Tween=ue,ue.prototype={constructor:ue,init:function(t,e,i,n,s,o){this.elem=t,this.prop=i,this.easing=s||R.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=o||(R.cssNumber[i]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,i=ue.propHooks[this.prop];return this.options.duration?this.pos=e=R.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ue.propHooks._default.set(this),this}},ue.prototype.init.prototype=ue.prototype,ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=R.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){R.fx.step[t.prop]?R.fx.step[t.prop](t):1!==t.elem.nodeType||!R.cssHooks[t.prop]&&null==t.elem.style[se(t.prop)]?t.elem[t.prop]=t.now:R.style(t.elem,t.prop,t.now+t.unit)}}},ue.propHooks.scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},R.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},R.fx=ue.prototype.init,R.fx.step={};var he,pe,fe=/^(?:toggle|show|hide)$/,ge=/queueHooks$/;function me(){pe&&(!1===y.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(me):n.setTimeout(me,R.fx.interval),R.fx.tick())}function ve(){return n.setTimeout((function(){he=void 0})),he=Date.now()}function be(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=ft[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function ye(t,e,i){for(var n,s=(Ce.tweeners[e]||[]).concat(Ce.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,e,t))return n}function Ce(t,e,i){var n,s,o=0,r=Ce.prefilters.length,a=R.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=he||ve(),i=Math.max(0,d.startTime+d.duration-e),n=1-(i/d.duration||0),o=0,r=d.tweens.length;o<r;o++)d.tweens[o].run(n);return a.notifyWith(t,[d,n,i]),n<1&&r?i:(r||a.notifyWith(t,[d,1,0]),a.resolveWith(t,[d]),!1)},d=a.promise({elem:t,props:R.extend({},e),opts:R.extend(!0,{specialEasing:{},easing:R.easing._default},i),originalProperties:e,originalOptions:i,startTime:he||ve(),duration:i.duration,tweens:[],createTween:function(e,i){var n=R.Tween(t,d.opts,e,i,d.opts.specialEasing[e]||d.opts.easing);return d.tweens.push(n),n},stop:function(e){var i=0,n=e?d.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)d.tweens[i].run(1);return e?(a.notifyWith(t,[d,1,0]),a.resolveWith(t,[d,e])):a.rejectWith(t,[d,e]),this}}),c=d.props;for(!function(t,e){var i,n,s,o,r;for(i in t)if(s=e[n=st(i)],o=t[i],Array.isArray(o)&&(s=o[1],o=t[i]=o[0]),i!==n&&(t[n]=o,delete t[i]),(r=R.cssHooks[n])&&"expand"in r)for(i in o=r.expand(o),delete t[n],o)i in t||(t[i]=o[i],e[i]=s);else e[n]=s}(c,d.opts.specialEasing);o<r;o++)if(n=Ce.prefilters[o].call(d,t,c,d.opts))return v(n.stop)&&(R._queueHooks(d.elem,d.opts.queue).stop=n.stop.bind(n)),n;return R.map(c,ye,d),v(d.opts.start)&&d.opts.start.call(t,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),R.fx.timer(R.extend(l,{elem:t,anim:d,queue:d.opts.queue})),d}R.Animation=R.extend(Ce,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return yt(i.elem,t,pt.exec(e),i),i}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(q);for(var i,n=0,s=t.length;n<s;n++)i=t[n],Ce.tweeners[i]=Ce.tweeners[i]||[],Ce.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,o,r,a,l,d,c,u="width"in e||"height"in e,h=this,p={},f=t.style,g=t.nodeType&&bt(t),m=at.get(t,"fxshow");for(n in i.queue||(null==(r=R._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always((function(){h.always((function(){r.unqueued--,R.queue(t,"fx").length||r.empty.fire()}))}))),e)if(s=e[n],fe.test(s)){if(delete e[n],o=o||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||R.style(t,n)}if((l=!R.isEmptyObject(e))||!R.isEmptyObject(p))for(n in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(d=m&&m.display)&&(d=at.get(t,"display")),"none"===(c=R.css(t,"display"))&&(d?c=d:(xt([t],!0),d=t.style.display||d,c=R.css(t,"display"),xt([t]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===R.css(t,"float")&&(l||(h.done((function(){f.display=d})),null==d&&(c=f.display,d="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=at.access(t,"fxshow",{display:d}),o&&(m.hidden=!g),g&&xt([t],!0),h.done((function(){for(n in g||xt([t]),at.remove(t,"fxshow"),p)R.style(t,n,p[n])}))),l=ye(g?m[n]:0,n,h),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?Ce.prefilters.unshift(t):Ce.prefilters.push(t)}}),R.speed=function(t,e,i){var n=t&&"object"==typeof t?R.extend({},t):{complete:i||!i&&e||v(t)&&t,duration:t,easing:i&&e||e&&!v(e)&&e};return R.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in R.fx.speeds?n.duration=R.fx.speeds[n.duration]:n.duration=R.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){v(n.old)&&n.old.call(this),n.queue&&R.dequeue(this,n.queue)},n},R.fn.extend({fadeTo:function(t,e,i,n){return this.filter(bt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=R.isEmptyObject(t),o=R.speed(e,i,n),r=function(){var e=Ce(this,R.extend({},t),o);(s||at.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",o=R.timers,r=at.get(this);if(s)r[s]&&r[s].stop&&n(r[s]);else for(s in r)r[s]&&r[s].stop&&ge.test(s)&&n(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(i),e=!1,o.splice(s,1));!e&&i||R.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=at.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],o=R.timers,r=n?n.length:0;for(i.finish=!0,R.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),R.each(["toggle","show","hide"],(function(t,e){var i=R.fn[e];R.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(be(e,!0),t,n,s)}})),R.each({slideDown:be("show"),slideUp:be("hide"),slideToggle:be("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){R.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),R.timers=[],R.fx.tick=function(){var t,e=0,i=R.timers;for(he=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||R.fx.stop(),he=void 0},R.fx.timer=function(t){R.timers.push(t),R.fx.start()},R.fx.interval=13,R.fx.start=function(){pe||(pe=!0,me())},R.fx.stop=function(){pe=null},R.fx.speeds={slow:600,fast:200,_default:400},R.fn.delay=function(t,e){return t=R.fx&&R.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,i){var s=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(s)}}))},function(){var t=y.createElement("input"),e=y.createElement("select").appendChild(y.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=y.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var _e,xe=R.expr.attrHandle;R.fn.extend({attr:function(t,e){return tt(this,R.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){R.removeAttr(this,t)}))}}),R.extend({attr:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?R.prop(t,e,i):(1===o&&R.isXMLDoc(t)||(s=R.attrHooks[e.toLowerCase()]||(R.expr.match.bool.test(e)?_e:void 0)),void 0!==i?null===i?void R.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=R.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&D(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(q);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),_e={set:function(t,e,i){return!1===e?R.removeAttr(t,i):t.setAttribute(i,i),i}},R.each(R.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=xe[e]||R.find.attr;xe[e]=function(t,e,n){var s,o,r=e.toLowerCase();return n||(o=xe[r],xe[r]=s,s=null!=i(t,e,n)?r:null,xe[r]=o),s}}));var Me=/^(?:input|select|textarea|button)$/i,we=/^(?:a|area)$/i;function Re(t){return(t.match(q)||[]).join(" ")}function Ae(t){return t.getAttribute&&t.getAttribute("class")||""}function De(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(q)||[]}R.fn.extend({prop:function(t,e){return tt(this,R.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[R.propFix[t]||t]}))}}),R.extend({prop:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&R.isXMLDoc(t)||(e=R.propFix[e]||e,s=R.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=R.find.attr(t,"tabindex");return e?parseInt(e,10):Me.test(t.nodeName)||we.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(R.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),R.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){R.propFix[this.toLowerCase()]=this})),R.fn.extend({addClass:function(t){var e,i,n,s,o,r;return v(t)?this.each((function(e){R(this).addClass(t.call(this,e,Ae(this)))})):(e=De(t)).length?this.each((function(){if(n=Ae(this),i=1===this.nodeType&&" "+Re(n)+" "){for(o=0;o<e.length;o++)s=e[o],i.indexOf(" "+s+" ")<0&&(i+=s+" ");r=Re(i),n!==r&&this.setAttribute("class",r)}})):this},removeClass:function(t){var e,i,n,s,o,r;return v(t)?this.each((function(e){R(this).removeClass(t.call(this,e,Ae(this)))})):arguments.length?(e=De(t)).length?this.each((function(){if(n=Ae(this),i=1===this.nodeType&&" "+Re(n)+" "){for(o=0;o<e.length;o++)for(s=e[o];i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r=Re(i),n!==r&&this.setAttribute("class",r)}})):this:this.attr("class","")},toggleClass:function(t,e){var i,n,s,o,r=typeof t,a="string"===r||Array.isArray(t);return v(t)?this.each((function(i){R(this).toggleClass(t.call(this,i,Ae(this),e),e)})):"boolean"==typeof e&&a?e?this.addClass(t):this.removeClass(t):(i=De(t),this.each((function(){if(a)for(o=R(this),s=0;s<i.length;s++)n=i[s],o.hasClass(n)?o.removeClass(n):o.addClass(n);else void 0!==t&&"boolean"!==r||((n=Ae(this))&&at.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===t?"":at.get(this,"__className__")||""))})))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+Re(Ae(i))+" ").indexOf(e)>-1)return!0;return!1}});var Te=/\r/g;R.fn.extend({val:function(t){var e,i,n,s=this[0];return arguments.length?(n=v(t),this.each((function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,R(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=R.map(s,(function(t){return null==t?"":t+""}))),(e=R.valHooks[this.type]||R.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=R.valHooks[s.type]||R.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(Te,""):null==i?"":i:void 0}}),R.extend({valHooks:{option:{get:function(t){var e=R.find.attr(t,"value");return null!=e?e:Re(R.text(t))}},select:{get:function(t){var e,i,n,s=t.options,o=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?o+1:s.length;for(n=o<0?l:r?o:0;n<l;n++)if(((i=s[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!D(i.parentNode,"optgroup"))){if(e=R(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,n,s=t.options,o=R.makeArray(e),r=s.length;r--;)((n=s[r]).selected=R.inArray(R.valHooks.option.get(n),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),R.each(["radio","checkbox"],(function(){R.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=R.inArray(R(t).val(),e)>-1}},m.checkOn||(R.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Se=n.location,ke={guid:Date.now()},Be=/\?/;R.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){}return i=e&&e.getElementsByTagName("parsererror")[0],e&&!i||R.error("Invalid XML: "+(i?R.map(i.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Ve=/^(?:focusinfocus|focusoutblur)$/,je=function(t){t.stopPropagation()};R.extend(R.event,{trigger:function(t,e,i,s){var o,r,a,l,d,c,u,h,f=[i||y],g=p.call(t,"type")?t.type:t,m=p.call(t,"namespace")?t.namespace.split("."):[];if(r=h=a=i=i||y,3!==i.nodeType&&8!==i.nodeType&&!Ve.test(g+R.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),d=g.indexOf(":")<0&&"on"+g,(t=t[R.expando]?t:new R.Event(g,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:R.makeArray(e,[t]),u=R.event.special[g]||{},s||!u.trigger||!1!==u.trigger.apply(i,e))){if(!s&&!u.noBubble&&!b(i)){for(l=u.delegateType||g,Ve.test(l+g)||(r=r.parentNode);r;r=r.parentNode)f.push(r),a=r;a===(i.ownerDocument||y)&&f.push(a.defaultView||a.parentWindow||n)}for(o=0;(r=f[o++])&&!t.isPropagationStopped();)h=r,t.type=o>1?l:u.bindType||g,(c=(at.get(r,"events")||Object.create(null))[t.type]&&at.get(r,"handle"))&&c.apply(r,e),(c=d&&r[d])&&c.apply&&ot(r)&&(t.result=c.apply(r,e),!1===t.result&&t.preventDefault());return t.type=g,s||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(f.pop(),e)||!ot(i)||d&&v(i[g])&&!b(i)&&((a=i[d])&&(i[d]=null),R.event.triggered=g,t.isPropagationStopped()&&h.addEventListener(g,je),i[g](),t.isPropagationStopped()&&h.removeEventListener(g,je),R.event.triggered=void 0,a&&(i[d]=a)),t.result}},simulate:function(t,e,i){var n=R.extend(new R.Event,i,{type:t,isSimulated:!0});R.event.trigger(n,null,e)}}),R.fn.extend({trigger:function(t,e){return this.each((function(){R.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return R.event.trigger(t,e,i,!0)}});var Ee=/\[\]$/,Pe=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,Oe=/^(?:input|select|textarea|keygen)/i;function Ie(t,e,i,n){var s;if(Array.isArray(e))R.each(e,(function(e,s){i||Ee.test(t)?n(t,s):Ie(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)}));else if(i||"object"!==x(e))n(t,e);else for(s in e)Ie(t+"["+s+"]",e[s],i,n)}R.param=function(t,e){var i,n=[],s=function(t,e){var i=v(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!R.isPlainObject(t))R.each(t,(function(){s(this.name,this.value)}));else for(i in t)Ie(i,t[i],e,s);return n.join("&")},R.fn.extend({serialize:function(){return R.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=R.prop(this,"elements");return t?R.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!R(this).is(":disabled")&&Oe.test(this.nodeName)&&!Le.test(t)&&(this.checked||!Rt.test(t))})).map((function(t,e){var i=R(this).val();return null==i?null:Array.isArray(i)?R.map(i,(function(t){return{name:e.name,value:t.replace(Pe,"\r\n")}})):{name:e.name,value:i.replace(Pe,"\r\n")}})).get()}});var Fe=/%20/g,Ne=/#.*$/,Ye=/([?&])_=[^&]*/,Ke=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:GET|HEAD)$/,ze=/^\/\//,We={},$e={},qe="*/".concat("*"),Ue=y.createElement("a");function Xe(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,o=e.toLowerCase().match(q)||[];if(v(i))for(;n=o[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Ge(t,e,i,n){var s={},o=t===$e;function r(a){var l;return s[a]=!0,R.each(t[a]||[],(function(t,a){var d=a(e,i,n);return"string"!=typeof d||o||s[d]?o?!(l=d):void 0:(e.dataTypes.unshift(d),r(d),!1)})),l}return r(e.dataTypes[0])||!s["*"]&&r("*")}function Qe(t,e){var i,n,s=R.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&R.extend(!0,t,n),t}Ue.href=Se.href,R.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":R.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Qe(Qe(t,R.ajaxSettings),e):Qe(R.ajaxSettings,t)},ajaxPrefilter:Xe(We),ajaxTransport:Xe($e),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,s,o,r,a,l,d,c,u,h,p=R.ajaxSetup({},e),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?R(f):R.event,m=R.Deferred(),v=R.Callbacks("once memory"),b=p.statusCode||{},C={},_={},x="canceled",M={readyState:0,getResponseHeader:function(t){var e;if(d){if(!r)for(r={};e=Ke.exec(o);)r[e[1].toLowerCase()+" "]=(r[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=r[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return d?o:null},setRequestHeader:function(t,e){return null==d&&(t=_[t.toLowerCase()]=_[t.toLowerCase()]||t,C[t]=e),this},overrideMimeType:function(t){return null==d&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(d)M.always(t[M.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||x;return i&&i.abort(e),w(0,e),this}};if(m.promise(M),p.url=((t||p.url||Se.href)+"").replace(ze,Se.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(q)||[""],null==p.crossDomain){l=y.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ue.protocol+"//"+Ue.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=R.param(p.data,p.traditional)),Ge(We,p,e,M),d)return M;for(u in(c=R.event&&p.global)&&0==R.active++&&R.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!He.test(p.type),s=p.url.replace(Ne,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Fe,"+")):(h=p.url.slice(s.length),p.data&&(p.processData||"string"==typeof p.data)&&(s+=(Be.test(s)?"&":"?")+p.data,delete p.data),!1===p.cache&&(s=s.replace(Ye,"$1"),h=(Be.test(s)?"&":"?")+"_="+ke.guid+++h),p.url=s+h),p.ifModified&&(R.lastModified[s]&&M.setRequestHeader("If-Modified-Since",R.lastModified[s]),R.etag[s]&&M.setRequestHeader("If-None-Match",R.etag[s])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&M.setRequestHeader("Content-Type",p.contentType),M.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+qe+"; q=0.01":""):p.accepts["*"]),p.headers)M.setRequestHeader(u,p.headers[u]);if(p.beforeSend&&(!1===p.beforeSend.call(f,M,p)||d))return M.abort();if(x="abort",v.add(p.complete),M.done(p.success),M.fail(p.error),i=Ge($e,p,e,M)){if(M.readyState=1,c&&g.trigger("ajaxSend",[M,p]),d)return M;p.async&&p.timeout>0&&(a=n.setTimeout((function(){M.abort("timeout")}),p.timeout));try{d=!1,i.send(C,w)}catch(t){if(d)throw t;w(-1,t)}}else w(-1,"No Transport");function w(t,e,r,l){var u,h,y,C,_,x=e;d||(d=!0,a&&n.clearTimeout(a),i=void 0,o=l||"",M.readyState=t>0?4:0,u=t>=200&&t<300||304===t,r&&(C=function(t,e,i){for(var n,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(p,M,r)),!u&&R.inArray("script",p.dataTypes)>-1&&R.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),C=function(t,e,i,n){var s,o,r,a,l,d={},c=t.dataTypes.slice();if(c[1])for(r in t.converters)d[r.toLowerCase()]=t.converters[r];for(o=c.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=d[l+" "+o]||d["* "+o]))for(s in d)if((a=s.split(" "))[1]===o&&(r=d[l+" "+a[0]]||d["* "+a[0]])){!0===r?r=d[s]:!0!==d[s]&&(o=a[0],c.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(p,C,M,u),u?(p.ifModified&&((_=M.getResponseHeader("Last-Modified"))&&(R.lastModified[s]=_),(_=M.getResponseHeader("etag"))&&(R.etag[s]=_)),204===t||"HEAD"===p.type?x="nocontent":304===t?x="notmodified":(x=C.state,h=C.data,u=!(y=C.error))):(y=x,!t&&x||(x="error",t<0&&(t=0))),M.status=t,M.statusText=(e||x)+"",u?m.resolveWith(f,[h,x,M]):m.rejectWith(f,[M,x,y]),M.statusCode(b),b=void 0,c&&g.trigger(u?"ajaxSuccess":"ajaxError",[M,p,u?h:y]),v.fireWith(f,[M,x]),c&&(g.trigger("ajaxComplete",[M,p]),--R.active||R.event.trigger("ajaxStop")))}return M},getJSON:function(t,e,i){return R.get(t,e,i,"json")},getScript:function(t,e){return R.get(t,void 0,e,"script")}}),R.each(["get","post"],(function(t,e){R[e]=function(t,i,n,s){return v(i)&&(s=s||n,n=i,i=void 0),R.ajax(R.extend({url:t,type:e,dataType:s,data:i,success:n},R.isPlainObject(t)&&t))}})),R.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),R._evalUrl=function(t,e,i){return R.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){R.globalEval(t,e,i)}})},R.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=R(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){R(this).wrapInner(t.call(this,e))})):this.each((function(){var e=R(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(i){R(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){R(this).replaceWith(this.childNodes)})),this}}),R.expr.pseudos.hidden=function(t){return!R.expr.pseudos.visible(t)},R.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},R.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Ze=R.ajaxSettings.xhr();m.cors=!!Ze&&"withCredentials"in Ze,m.ajax=Ze=!!Ze,R.ajaxTransport((function(t){var e,i;if(m.cors||Ze&&!t.crossDomain)return{send:function(s,o){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];for(r in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(r,s[r]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Je[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){e&&i()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),R.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),R.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return R.globalEval(t),t}}}),R.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),R.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,s){e=R("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),y.head.appendChild(e[0])},abort:function(){i&&i()}}}));var ti,ei=[],ii=/(=)\?(?=&|$)|\?\?/;R.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ei.pop()||R.expando+"_"+ke.guid++;return this[t]=!0,t}}),R.ajaxPrefilter("json jsonp",(function(t,e,i){var s,o,r,a=!1!==t.jsonp&&(ii.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ii.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(ii,"$1"+s):!1!==t.jsonp&&(t.url+=(Be.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||R.error(s+" was not called"),r[0]},t.dataTypes[0]="json",o=n[s],n[s]=function(){r=arguments},i.always((function(){void 0===o?R(n).removeProp(s):n[s]=o,t[s]&&(t.jsonpCallback=e.jsonpCallback,ei.push(s)),r&&v(o)&&o(r[0]),r=o=void 0})),"script"})),m.createHTMLDocument=((ti=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),R.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(m.createHTMLDocument?((n=(e=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,e.head.appendChild(n)):e=y),o=!i&&[],(s=N.exec(t))?[e.createElement(s[1])]:(s=Vt([t],e,o),o&&o.length&&R(o).remove(),R.merge([],s.childNodes)));var n,s,o},R.fn.load=function(t,e,i){var n,s,o,r=this,a=t.indexOf(" ");return a>-1&&(n=Re(t.slice(a)),t=t.slice(0,a)),v(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),r.length>0&&R.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){o=arguments,r.html(n?R("<div>").append(R.parseHTML(t)).find(n):t)})).always(i&&function(t,e){r.each((function(){i.apply(this,o||[t.responseText,e,t])}))}),this},R.expr.pseudos.animated=function(t){return R.grep(R.timers,(function(e){return t===e.elem})).length},R.offset={setOffset:function(t,e,i){var n,s,o,r,a,l,d=R.css(t,"position"),c=R(t),u={};"static"===d&&(t.style.position="relative"),a=c.offset(),o=R.css(t,"top"),l=R.css(t,"left"),("absolute"===d||"fixed"===d)&&(o+l).indexOf("auto")>-1?(r=(n=c.position()).top,s=n.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),v(e)&&(e=e.call(t,i,R.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+s),"using"in e?e.using.call(t,u):c.css(u)}},R.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){R.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],s={top:0,left:0};if("fixed"===R.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===R.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((s=R(t).offset()).top+=R.css(t,"borderTopWidth",!0),s.left+=R.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-R.css(n,"marginTop",!0),left:e.left-s.left-R.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===R.css(t,"position");)t=t.offsetParent;return t||gt}))}}),R.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;R.fn[t]=function(n){return tt(this,(function(t,n,s){var o;if(b(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===s)return o?o[e]:t[n];o?o.scrollTo(i?o.pageXOffset:s,i?s:o.pageYOffset):t[n]=s}),t,n,arguments.length)}})),R.each(["top","left"],(function(t,e){R.cssHooks[e]=te(m.pixelPosition,(function(t,i){if(i)return i=Zt(t,e),Ut.test(i)?R(t).position()[e]+"px":i}))})),R.each({Height:"height",Width:"width"},(function(t,e){R.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){R.fn[n]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(!0===s||!0===o?"margin":"border");return tt(this,(function(e,i,s){var o;return b(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===s?R.css(e,i,a):R.style(e,i,s,a)}),e,r?s:void 0,r)}}))})),R.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){R.fn[e]=function(t){return this.on(e,t)}})),R.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),R.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){R.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var ni=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;R.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=a.call(arguments,2),s=function(){return t.apply(e||this,n.concat(a.call(arguments)))},s.guid=t.guid=t.guid||R.guid++,s},R.holdReady=function(t){t?R.readyWait++:R.ready(!0)},R.isArray=Array.isArray,R.parseJSON=JSON.parse,R.nodeName=D,R.isFunction=v,R.isWindow=b,R.camelCase=st,R.type=x,R.now=Date.now,R.isNumeric=function(t){var e=R.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},R.trim=function(t){return null==t?"":(t+"").replace(ni,"$1")},void 0===(i=function(){return R}.apply(e,[]))||(t.exports=i);var si=n.jQuery,oi=n.$;return R.noConflict=function(t){return n.$===R&&(n.$=oi),t&&n.jQuery===R&&(n.jQuery=si),R},void 0===s&&(n.jQuery=n.$=R),R}))},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/index.js":(t,e,i)=>{"use strict";i.r(e);var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/statisticsDashboard.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/utilities.js"),o=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/chart.js/auto/auto.js"),r=(i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/datatables.net-bs5/js/dataTables.bootstrap5.mjs"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/country-select-js/build/js/countrySelect.js"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js"));const a="https://localhost:7246/api/Categories",l="https://localhost:7246/api/Transactions",d=document.getElementById("menu-container"),c=(document.getElementById("sidebar"),document.getElementById("sentimentChart")),u=document.getElementById("necessityChart"),h=r("#updateCategory-modal"),p=h.find("#updateCategory-label"),f=h.find("#updateCategory_id"),g=h.find("#updateCategory_name"),m=h.find("#updateCategory_budget"),v=h.find("#updateCategory_groupId"),b=r("#add-category-modal"),y=r("#add-transaction-modal"),C=document.getElementById("flip-container-inner"),_=document.getElementById("reevalCategories-container"),x=document.getElementById("reevalInfo");o.default.defaults.color="#ffffff",o.default.defaults.scales.linear.min=0,o.default.defaults.plugins.legend.labels.filter=t=>void 0!==t.text,o.default.defaults.plugins.tooltip.filter=t=>""!==t.label,o.default.register({id:"emptypiechart",beforeInit:function(t){t.data.datasets[0].backgroundColor.push("#d2dee2"),t.data.datasets[0].data.push(Number.MIN_VALUE)}});var M=0,w=0;!async function(){for(var t=await async function(){try{var t=await fetch(`${a}/filteredByEvaluation`,{method:"GET"});if(t.ok)return await t.json();console.error(`HTTP Post Error: ${t.status}`)}catch(t){console.error(t)}}(),e=document.createDocumentFragment(),i=0;i<t.length;i++)t[i].transactions.length>0&&e.appendChild(T(t[i]));_.innerHTML="",_.appendChild(e),S()}();const R=new n.default,A=r("#transactions-table").DataTable({info:!1,dom:'<"pb-1" t<"d-flex justify-content-between mt-3"<"pt-1"l>p>>',columns:[{data:"title"},{data:"dateTime"},{data:"amount"},{data:"category"},{data:null,defaultContent:"<svg  width='20' height='20' fill='rgba(255, 255, 255, 1)' class='me-1' viewBox='0 0 16 16'>\n                    <path d='M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z'/>\n                    <path fill-rule=\"evenodd\" d='M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z'>\n                </svg >\n                <svg width=\"20\" height=\"20\" fill=\"rgba(255, 255, 255, 1)\" viewBox=\"0 0 16 16\">\n                  <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\"/>\n                  <path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\"/>\n                </svg>",targets:-1,sortable:!1}],columnDefs:[{targets:2,render:function(t,e,i){return"display"===e?window.userNumberFormat.format(t):t}},{targets:1,render:function(t,e,i){return"display"===e?new Date(t).toLocaleString(window.userLocale):t}}],scrollX:!0,scrollCollapse:!0});r("#country").countrySelect({defaultCountry:window.userLocale.region.toLowerCase(),preferredCountries:["at","us"],responsiveDropdown:!0});r("#statistics-yearSelector").datepicker({format:"yyyy",minViewMode:"years",autoclose:!0}).on("changeDate",(async function(){await R.getData(r(this).datepicker("getDate").getFullYear()),R.updateCharts()})).datepicker("setDate",new Date),r(".yearPicker .calendar-button").on("click",(function(){let t=r(this).siblings(".yearSelector");t.data("datepicker").picker.is(":visible")||t.datepicker("show")}));async function D(t,e,i,n){try{var s=parseInt(t.get("PageModel.Transaction.Id"));console.log("Removed Transaction with id "+s);var o=document.getElementById(`reeval_transaction_${s}`),r=[{op:"replace",path:"/IsHappy",value:"true"===t.get("PageModel.Transaction.IsHappy")},{op:"replace",path:"/IsNecessary",value:"true"===t.get("PageModel.Transaction.IsNecessary")},{op:"replace",path:"/PreviousIsHappy",value:"true"===o.dataset.isHappy},{op:"replace",path:"/PreviousIsNecessary",value:"true"===o.dataset.isNecessary},{op:"replace",path:"/Evaluated",value:!0}],a=await fetch(`${l}/${s}`,{method:"PATCH",headers:{"Content-Type":"application/json-patch+json"},body:JSON.stringify(r)});a.ok?(e.remove(),0==i.childElementCount&&n.remove(),S()):console.error(`HTTP Patch Error: ${a.status}`)}catch(t){console.error(t)}}function T(t){var e=document.createElement("div");e.classList.add("accordion");var i=document.createElement("div");i.classList.add("accordion-item");var n=document.createElement("h5");n.id=`accordionHeader_${t.id}`,n.textContent=`${decodeURIComponent(t.name)}`,n.classList.add("accordion-header","me-auto");var s=document.createElement("div");s.classList.add("accordion-caret","rotate");var o=document.createElement("div");o.id=`accordion-head_${t.id}`,o.classList.add("accordion-head","d-flex"),o.addEventListener("click",(()=>{r(o).next().collapse("toggle"),s.classList.toggle("rotate")}));var a=document.createElement("div");a.classList.add("accordion-collapse","collapse","show"),a.setAttribute("aria-labelledby",`accordionHeader_${t.id}`);var l=document.createElement("div");l.classList.add("accordion-body");for(var d=0;d<t.transactions.length;d++){let i=t.transactions[d],n=document.createElement("div");n.id=`reeval_transaction_${i.id}`,n.className="transaction-body",n.setAttribute("data-id",i.id),n.setAttribute("data-ishappy",i.isHappy),n.setAttribute("data-isnecessary",i.isNecessary);var c=document.createElement("div");c.textContent=decodeURIComponent(i.title);var u=document.createElement("div");u.className="ms-2",u.textContent=new Date(i.dateTime).toLocaleDateString(window.userLocale);var h=document.createElement("div");h.className="ms-2 me-auto",h.textContent=window.userNumberFormat.format(i.amount);var p=document.createElement("form");p.id=`reevaluate-transaction-form_${i.id}`,p.className="reevaluate-transaction-form",p.setAttribute("novalidate","novalidate"),p.addEventListener("submit",(async function(t){if(t.preventDefault(),r(p).valid()){let t=n;await D(new FormData(this),t,l,e)}})),p.innerHTML=`<input type="hidden" value="${i.id}" data-val="true" data-val-required="The Id field is required." id="reeval_transaction_${i.id}" name="PageModel.Transaction.Id">\n                            <div class="d-flex justify-content-around">\n                                <div class="me-3 d-flex align-items-center">\n                                    <input type="radio" value="true" id="isHappyTrue_${i.id}" class="iconRadioButton" data-val="true" data-val-required="The IsHappy field is required." name="PageModel.Transaction.IsHappy">\n                                    <label class="reevalIconLabel" for="isHappyTrue_${i.id}">\n                                        <div class="reevalIconContainer">\n                                            <svg xmlns="http://www.w3.org/2000/svg" width="50px" height="50px" viewBox="0 0 2050 2050" class="reevalIcon">\n                                                <g data-name="Layer 3" id="Layer_3">\n                                                    <circle fill="#ffc500" cx="1025" cy="1025" r="613.7"></circle>\n                                                    <path fill="#ff9f1e" d="M1068.5,1551.8c-339,0-613.7-274.8-613.7-613.7a613.5,613.5,0,0,1,44.4-229.8A610.7,610.7,0,0,0,411.3,1025c0,338.9,274.8,613.7,613.7,613.7,257.7,0,478.3-158.8,569.2-383.9C1486.8,1432.8,1291.5,1551.8,1068.5,1551.8Z"></path>\n                                                    <path fill="#ffe059" d="M1025,411.3A610.4,610.4,0,0,0,659.9,531.7a706.9,706.9,0,0,1,453.2-18.9,27.8,27.8,0,0,0-3.3,5.1c-18.2,33.9,18.9,89.1,82.7,123.3s130.4,34.6,148.6.8a38.6,38.6,0,0,0,3.7-10.5c165.2,128,271.9,328.1,272.9,553.1a613.3,613.3,0,0,0,21-159.6C1638.7,686.1,1363.9,411.3,1025,411.3Z"></path>\n                                                    <ellipse fill="#ffe059" cx="1339.4" cy="698.8" rx="30.8" ry="52.8" transform="translate(396.9 1879.5) rotate(-79)"></ellipse>\n                                                    <ellipse fill="#ffe059" cx="1235.1" cy="718.7" rx="17.2" ry="25" transform="translate(-4.9 1429) rotate(-60)"></ellipse>\n                                                    <path fill="#00305f" d="M1146.1,883.2a30.6,30.6,0,0,1-13.7-3.2,30,30,0,0,1-13-40.4c26.2-51.3,63.4-79.5,104.7-79.5s78.5,28.2,104.7,79.5a30,30,0,1,1-53.4,27.3c-15-29.3-34.2-46.8-51.3-46.8s-36.3,17.5-51.3,46.8A29.9,29.9,0,0,1,1146.1,883.2Z"></path>\n                                                    <path fill="#00305f" d="M903.9,883.2a29.9,29.9,0,0,1-26.7-16.3c-15-29.3-34.2-46.8-51.3-46.8s-36.3,17.5-51.3,46.8a30,30,0,1,1-53.4-27.3c26.2-51.3,63.4-79.5,104.7-79.5s78.5,28.2,104.7,79.5a30,30,0,0,1-13,40.4A30.6,30.6,0,0,1,903.9,883.2Z"></path>\n                                                    <path fill="#00305f" d="M863.1,1280.8a29.4,29.4,0,0,1-15.8-4.5,29.9,29.9,0,0,1-9.6-41.3,89.9,89.9,0,0,0,13.4-47.4,88.9,88.9,0,0,0-16.9-52.5,30,30,0,0,1,48.6-35.2,150.2,150.2,0,0,1,5.8,166.8A30.1,30.1,0,0,1,863.1,1280.8Z"></path>\n                                                    <path fill="#00305f" d="M1186.9,1280.8a30.1,30.1,0,0,1-25.5-14.1,150.2,150.2,0,0,1,5.8-166.8,30,30,0,1,1,48.6,35.2,88.9,88.9,0,0,0-16.9,52.5,89.9,89.9,0,0,0,13.4,47.4,29.9,29.9,0,0,1-9.6,41.3A29.4,29.4,0,0,1,1186.9,1280.8Z"></path>\n                                                    <path fill="#00305f" d="M1025,1247.3a293.2,293.2,0,0,1-135.5-33.1,30,30,0,1,1,27.6-53.2,234.3,234.3,0,0,0,215.8,0c46.2-19.3,34.3,19.6,27.6,53.2A293.2,293.2,0,0,1,1025,1247.3Z"></path>\n                                                </g>\n                                            </svg>\n                                        </div>\n                                    </label>\n                                    <input type="radio" value="false" id="isHappyFalse_${i.id}" class="iconRadioButton" checked="" name="PageModel.Transaction.IsHappy">\n                                    <label class="reevalIconLabel" for="isHappyFalse_${i.id}">\n                                        <div class="reevalIconContainer">\n                                            <svg xmlns="http://www.w3.org/2000/svg" width="50px" height="50px" viewBox="0 0 2050 2050" class="reevalIcon">\n                                                <g data-name="Layer 3" id="Layer_3">\n                                                    <circle fill="#ffc500" cx="1025" cy="1025" r="613.7"></circle>\n                                                    <path fill="#ff9f1e" d="M1068.5,1551.8c-339,0-613.7-274.8-613.7-613.7a613.5,613.5,0,0,1,44.4-229.8A610.7,610.7,0,0,0,411.3,1025c0,338.9,274.8,613.7,613.7,613.7,257.7,0,478.3-158.8,569.2-383.9C1486.8,1432.8,1291.5,1551.8,1068.5,1551.8Z"></path>\n                                                    <ellipse fill="#00305f" cx="773.9" cy="896.3" rx="94.9" ry="60.2" transform="translate(-155.1 1630.7) rotate(-87.5)"></ellipse>\n                                                    <circle fill="#00305f" cx="803.6" cy="857.7" r="16.6"></circle>\n                                                    <ellipse fill="#00305f" cx="1276.1" cy="896.3" rx="60.2" ry="94.9" transform="translate(-37.7 56.1) rotate(-2.5)"></ellipse>\n                                                    <circle fill="#00305f" cx="1296.4" cy="857.7" r="16.6"></circle>\n                                                    <path fill="#ffe059" d="M1025,411.3A610.4,610.4,0,0,0,659.9,531.7a706.9,706.9,0,0,1,453.2-18.9,27.8,27.8,0,0,0-3.3,5.1c-18.2,33.9,18.9,89.1,82.7,123.3s130.4,34.6,148.6.8a38.6,38.6,0,0,0,3.7-10.5c165.2,128,271.9,328.1,272.9,553.1a613.3,613.3,0,0,0,21-159.6C1638.7,686.1,1363.9,411.3,1025,411.3Z"></path>\n                                                    <ellipse fill="#ffe059" cx="1339.4" cy="698.8" rx="30.8" ry="52.8" transform="translate(396.9 1879.5) rotate(-79)"></ellipse>\n                                                    <ellipse fill="#ffe059" cx="1235.1" cy="718.7" rx="17.2" ry="25" transform="translate(-4.9 1429) rotate(-60)"></ellipse>\n                                                    <path fill="#00305f" d="M1296.4,1314.5a29.7,29.7,0,0,1-23-10.7c-32.3-38.4-70-68.5-112-89.5s-88.8-32.4-136-32.4c-91.6,0-178.2,41.6-243.9,117.1a30,30,0,0,1-45.3-39.4c37.5-43,81-76.8,129.5-100.5a361.4,361.4,0,0,1,322.6,1.6c49.3,24.7,93.4,59.8,131,104.5a29.9,29.9,0,0,1-22.9,49.3Z"></path>\n                                                </g>\n                                            </svg>\n                                        </div>\n                                    </label>\n                                </div>\n                                <div class="me-3  ms-1 d-flex align-items-center">\n                                    <input type="radio" value="true" id="isNecessaryTrue_${i.id}" class="iconRadioButton" data-val="true" data-val-required="The IsNecessary field is required." name="PageModel.Transaction.IsNecessary">\n                                    <label class="reevalIconLabel" for="isNecessaryTrue_${i.id}">\n                                        <div class="reevalIconContainer">\n                                            <svg xmlns="http://www.w3.org/2000/svg" height="30px" width="30px" viewBox="0 0 512 512" class="reevalIconNecessity">\n                                                <path style="fill:#FFC61B;" d="M452.656,499.209c-7.881,0-14.269-6.39-14.269-14.269V234.027l-32.225,30.763\n\t                                                c-5.701,5.442-14.732,5.233-20.176-0.468c-5.441-5.701-5.233-14.733,0.468-20.175l56.347-53.791\n\t                                                c4.131-3.944,10.215-5.046,15.467-2.797c5.251,2.246,8.656,7.407,8.656,13.118V484.94\n\t                                                C466.925,492.819,460.537,499.209,452.656,499.209z"></path>\n                                                <g>\n                                                    <path style="fill:#FEE187;" d="M338.188,309.953c-2.499,2.386-5.849,3.683-9.302,3.584c-3.455-0.093-6.729-1.56-9.097-4.075\n\t\t                        l-51.775-54.994l-21.981,22.543V484.94h103.312V299.302L338.188,309.953z"></path>\n                                                    <polygon style="fill:#FEE187;" points="121.207,318.315 37.615,404.139 37.615,484.94 140.927,484.94 140.927,340.529"></polygon>\n                                                </g>\n                                                <path style="fill:#FFC61B;" d="M396.309,470.671h-32.695V299.302c0-0.645-0.059-1.276-0.141-1.899\n\t                        c-0.02-0.148-0.043-0.295-0.067-0.444c-0.098-0.595-0.224-1.179-0.394-1.747c-0.007-0.023-0.011-0.047-0.019-0.07\n\t                        c-0.184-0.606-0.417-1.19-0.676-1.759c-0.051-0.114-0.107-0.225-0.163-0.338c-0.251-0.512-0.525-1.01-0.833-1.485\n\t                        c-0.033-0.05-0.06-0.103-0.093-0.153c-0.337-0.507-0.711-0.983-1.107-1.441c-0.098-0.113-0.2-0.221-0.301-0.332\n\t                        c-0.367-0.397-0.751-0.775-1.16-1.127c-0.061-0.053-0.118-0.111-0.181-0.164c-0.471-0.392-0.972-0.746-1.49-1.077\n\t                        c-0.116-0.073-0.233-0.143-0.35-0.213c-0.541-0.323-1.097-0.622-1.681-0.872l0,0l0,0c-0.588-0.253-1.201-0.454-1.828-0.625\n\t                        c-0.127-0.036-0.255-0.067-0.384-0.098c-0.559-0.137-1.13-0.248-1.714-0.317c-0.054-0.006-0.108-0.019-0.163-0.024\n\t                        c-0.502-0.053-1.01-0.084-1.525-0.084c-0.104,0-0.205,0.013-0.31,0.016c-0.161,0.003-0.321,0.016-0.481,0.024\n\t                        c-0.511,0.029-1.015,0.081-1.51,0.163c-0.116,0.019-0.23,0.031-0.345,0.053c-0.616,0.116-1.219,0.27-1.804,0.462\n\t                        c-0.086,0.029-0.168,0.063-0.253,0.093c-0.522,0.183-1.029,0.395-1.521,0.635c-0.107,0.051-0.215,0.1-0.322,0.156\n\t                        c-0.548,0.284-1.076,0.598-1.58,0.949c-0.093,0.064-0.181,0.137-0.274,0.204c-0.44,0.321-0.86,0.668-1.26,1.036\n\t                        c-0.061,0.057-0.133,0.101-0.194,0.16l-10.208,9.747l-50.879-54.041c-2.667-2.832-6.374-4.453-10.264-4.489\n\t                        c-3.843-0.016-7.626,1.523-10.341,4.308l-21.981,22.543c-0.305,0.314-0.592,0.642-0.866,0.98c-0.334,0.287-0.661,0.585-0.972,0.906\n\t                        l-54.225,56.092c-5.478,5.666-5.325,14.699,0.341,20.177c5.666,5.478,14.702,5.325,20.177-0.341l29.697-30.718v156.528h-74.773\n\t                        v-130.14c0-0.461-0.026-0.92-0.07-1.374c-0.019-0.194-0.053-0.382-0.078-0.574c-0.036-0.254-0.067-0.508-0.116-0.759\n\t                        c-0.044-0.231-0.103-0.458-0.158-0.685c-0.05-0.205-0.098-0.41-0.157-0.612c-0.07-0.238-0.15-0.471-0.231-0.703\n\t                        c-0.066-0.187-0.131-0.374-0.204-0.558c-0.091-0.228-0.19-0.452-0.293-0.675c-0.084-0.186-0.171-0.368-0.264-0.549\n\t                        c-0.107-0.21-0.22-0.415-0.337-0.619c-0.108-0.188-0.221-0.372-0.337-0.555c-0.12-0.187-0.241-0.372-0.37-0.554\n\t                        c-0.133-0.188-0.271-0.371-0.414-0.554c-0.13-0.167-0.261-0.332-0.398-0.492c-0.059-0.068-0.11-0.141-0.168-0.208l-19.719-22.215\n\t                        c-2.631-2.964-6.378-4.7-10.341-4.792c-3.974-0.113-7.787,1.47-10.552,4.309L27.4,394.188c-2.596,2.664-4.047,6.237-4.047,9.957\n\t                        v80.8c0,7.88,6.388,14.269,14.269,14.269h103.31h103.312c0.303,0,0.599-0.027,0.898-0.046c0.298,0.019,0.595,0.046,0.898,0.046\n\t                        h103.312h46.965c7.881,0,14.269-6.39,14.269-14.269C410.585,477.066,404.19,470.671,396.309,470.671z M51.884,409.94l68.837-70.676\n\t                        l5.935,6.687v124.72H51.884V409.94z M260.302,282.815l7.531-7.723l41.567,44.151c4.94,5.247,11.904,8.365,19.078,8.556\n\t                        c2.24,0.057,4.455-0.148,6.597-0.615v143.484h-74.773V282.815z"></path>\n                                                <polygon style="fill:#FEE187;" points="407.582,51.21 497.729,27.055 473.575,117.203 "></polygon>\n                                                <path style="fill:#FFC61B;" d="M507.82,16.965c-3.606-3.603-8.861-5.014-13.784-3.693l-90.147,24.155\n\t                        c-4.924,1.32-8.77,5.166-10.09,10.09c-1.32,4.923,0.089,10.178,3.693,13.783l23.831,23.831l-91.555,87.464l-51.201-54.382\n\t                        c-2.667-2.832-6.374-4.453-10.264-4.489c-3.878-0.006-7.626,1.523-10.341,4.308l-95.528,97.966l-30.114-33.924\n\t                        c-2.631-2.964-6.378-4.7-10.341-4.792c-3.988-0.098-7.787,1.468-10.552,4.309L4.048,291.838c-5.499,5.645-5.38,14.679,0.265,20.178\n\t                        c2.774,2.704,6.366,4.048,9.956,4.048c3.716,0,7.427-1.443,10.224-4.312l96.672-99.254l30.11,33.92\n\t                        c2.631,2.964,6.376,4.7,10.337,4.792c3.958,0.108,7.784-1.465,10.551-4.304L268,148.622l50.846,54.005\n\t                        c2.607,2.768,6.21,4.382,10.011,4.483c3.766,0.118,7.484-1.318,10.234-3.947l102.419-97.845l21.976,21.976\n\t                        c2.711,2.71,6.356,4.18,10.09,4.18c1.231,0,2.471-0.158,3.693-0.487c4.924-1.32,8.77-5.166,10.09-10.09l24.155-90.147\n\t                        C512.833,25.825,511.424,20.571,507.82,16.965z M466.189,89.636L435.15,58.598l42.4-11.361L466.189,89.636z"></path>\n                                            </svg>\n                                        </div>\n                                    </label>\n                                    <input type="radio" value="false" id="isNecessaryFalse_${i.id}" class="iconRadioButton" checked="" name="PageModel.Transaction.IsNecessary">\n                                    <label class="reevalIconLabel" for="isNecessaryFalse_${i.id}">\n                                        <div class="reevalIconContainer">\n                                            <svg xmlns="http://www.w3.org/2000/svg" height="30px" width="30px" viewBox="0 0 512 512" class="reevalIconNecessity">\n                                                <path style="fill:#FFC61B;" d="M14.183,471.406C6.35,471.406,0,465.055,0,457.223V174.677c0-5.678,3.386-10.806,8.603-13.039\n\t                        c5.219-2.235,11.267-1.14,15.373,2.78l56.006,53.466c5.666,5.408,5.875,14.387,0.465,20.054c-5.408,5.665-14.386,5.875-20.052,0.465\n\t                        l-32.03-30.577v249.398C28.366,465.055,22.016,471.406,14.183,471.406z"></path>\n                                                <g>\n                                                    <path style="fill:#FEE187;" d="M127.957,283.293c2.483,2.371,5.814,3.661,9.246,3.563c3.434-0.092,6.689-1.55,9.042-4.051\n\t\t                        l51.462-54.662l21.848,22.407v206.672H116.87V272.708L127.957,283.293z"></path>\n                                                    <polygon style="fill:#FEE187;" points="343.628,291.605 426.715,376.91 426.715,457.223 324.028,457.223 324.028,313.686 \t"></polygon>\n                                                </g>\n                                                <path style="fill:#FFC61B;" d="M436.875,367.013l-83.086-85.305c-2.749-2.821-6.527-4.402-10.49-4.283\n\t                        c-3.939,0.091-7.663,1.817-10.279,4.763l-19.6,22.08c-0.06,0.067-0.111,0.14-0.169,0.208c-0.136,0.159-0.265,0.322-0.394,0.488\n\t                        c-0.142,0.182-0.279,0.363-0.411,0.55c-0.128,0.182-0.251,0.367-0.37,0.555c-0.113,0.179-0.224,0.36-0.33,0.543\n\t                        c-0.119,0.206-0.233,0.414-0.34,0.625c-0.089,0.176-0.174,0.353-0.257,0.532c-0.104,0.225-0.204,0.452-0.296,0.685\n\t                        c-0.071,0.177-0.133,0.357-0.197,0.538c-0.084,0.237-0.165,0.474-0.235,0.716c-0.057,0.194-0.104,0.391-0.152,0.589\n\t                        c-0.057,0.231-0.116,0.461-0.162,0.698c-0.047,0.245-0.078,0.492-0.113,0.74c-0.027,0.194-0.061,0.386-0.081,0.582\n\t                        c-0.044,0.452-0.07,0.908-0.07,1.364v129.354h-74.32V287.457l29.518,30.532c5.445,5.632,14.423,5.784,20.055,0.339\n\t                        c5.632-5.445,5.784-14.423,0.339-20.055l-53.897-55.753c-0.309-0.321-0.635-0.617-0.969-0.903c-0.271-0.335-0.555-0.66-0.858-0.97\n\t                        l-21.848-22.407c-2.671-2.739-6.333-4.282-10.155-4.282c-0.041,0-0.084,0-0.123,0c-3.868,0.034-7.553,1.645-10.202,4.462\n\t                        l-50.571,53.716l-10.147-9.687c-0.061-0.058-0.13-0.102-0.191-0.157c-0.399-0.367-0.817-0.712-1.255-1.033\n\t                        c-0.089-0.065-0.176-0.136-0.267-0.2c-0.502-0.349-1.028-0.662-1.574-0.945c-0.104-0.054-0.21-0.101-0.315-0.152\n\t                        c-0.491-0.24-0.997-0.451-1.518-0.634c-0.084-0.03-0.165-0.064-0.25-0.091c-0.582-0.191-1.18-0.345-1.793-0.46\n\t                        c-0.115-0.023-0.231-0.034-0.347-0.054c-0.491-0.079-0.987-0.132-1.493-0.16c-0.162-0.009-0.322-0.021-0.485-0.024\n\t                        c-0.102-0.001-0.201-0.016-0.305-0.016c-0.512,0-1.018,0.03-1.516,0.084c-0.057,0.006-0.112,0.018-0.167,0.026\n\t                        c-0.58,0.069-1.146,0.179-1.702,0.315c-0.125,0.031-0.248,0.061-0.372,0.095c-1.245,0.342-2.42,0.848-3.503,1.496\n\t                        c-0.111,0.067-0.221,0.132-0.33,0.201c-0.519,0.33-1.021,0.685-1.492,1.078c-0.058,0.048-0.111,0.102-0.167,0.152\n\t                        c-0.411,0.355-0.797,0.735-1.164,1.132c-0.099,0.108-0.2,0.214-0.295,0.325c-0.396,0.455-0.767,0.93-1.102,1.435\n\t                        c-0.033,0.048-0.06,0.101-0.091,0.149c-0.306,0.474-0.58,0.969-0.83,1.479c-0.054,0.112-0.109,0.221-0.162,0.335\n\t                        c-0.258,0.566-0.489,1.146-0.672,1.749c-0.007,0.023-0.011,0.045-0.017,0.068c-0.169,0.563-0.294,1.146-0.391,1.736\n\t                        c-0.024,0.148-0.047,0.292-0.067,0.441c-0.082,0.618-0.14,1.245-0.14,1.888V443.04H70.19c-7.833,0-14.183,6.351-14.183,14.183\n\t                        s6.35,14.183,14.183,14.183h46.681h102.686c0.301,0,0.596-0.027,0.892-0.045c0.296,0.018,0.591,0.045,0.892,0.045h102.686h102.686\n\t                        c7.832,0,14.183-6.351,14.183-14.183V376.91C440.897,373.214,439.455,369.662,436.875,367.013z M205.373,443.04h-74.32V300.422\n\t                        c1.882,0.411,3.818,0.621,5.784,0.621c0.003,0,0.004,0,0.007,0c0.255,0,0.511-0.004,0.738-0.011\n\t                        c7.161-0.19,14.084-3.29,18.991-8.506l41.315-43.883l7.486,7.676V443.04H205.373z M412.531,443.04h-74.32V319.072l5.899-6.646\n\t                        l68.421,70.249V443.04z"></path>\n                                                <polygon style="fill:#FEE187;" points="408.215,298.51 497.817,322.519 473.808,232.917 "></polygon>\n                                                <path style="fill:#FFC61B;" d="M511.516,318.847l-24.009-89.602c-1.312-4.895-5.134-8.717-10.029-10.029\n\t                        c-4.896-1.315-10.117,0.089-13.699,3.671l-22.947,22.947l-87.482-90.125c-2.749-2.822-6.55-4.37-10.488-4.283\n\t                        c-3.939,0.091-7.662,1.817-10.279,4.763l-29.932,33.719l-94.95-97.374c-2.699-2.767-6.414-4.275-10.28-4.282\n\t                        c-3.866,0.034-7.551,1.645-10.202,4.462l-50.892,54.055L29.3,44.521c-5.663-5.409-14.641-5.205-20.052,0.457\n\t                        C3.837,50.642,4.041,59.62,9.706,65.031l117.357,112.118c2.733,2.613,6.404,4.048,10.172,3.923c3.778-0.099,7.36-1.703,9.951-4.456\n\t                        l50.539-53.68l95.26,97.691c2.749,2.82,6.543,4.344,10.487,4.278c3.937-0.091,7.659-1.817,10.274-4.763l29.928-33.715l77.1,79.467\n\t                        l-22.587,22.587c-3.583,3.583-4.983,8.806-3.671,13.699c1.312,4.895,5.134,8.717,10.029,10.029l89.602,24.009\n\t                        c1.213,0.325,2.447,0.484,3.669,0.484c3.713,0,7.336-1.459,10.03-4.154C511.43,328.964,512.828,323.742,511.516,318.847z\n\t                        M435.615,291.167l30.851-30.851l11.293,42.144L435.615,291.167z"></path>\n                                            </svg>\n                                        </div>\n                                    </label>\n                                </div>\n                                <div>\n                                    <button class="reeval-submit-button" type="submit" value="">\n                                        <svg class="reeval-submit-svg" width="40px" height="40px" viewBox="0 0 24 24">\n                                            <circle cx="12" cy="12" r="10" stroke-width="1.5"></circle>\n                                            <path d="M8.5 12.5L10.5 14.5L15.5 9.5" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>\n                                        </svg>\n                                    </button>\n                                </div>\n                            </div>\n                            <span class="text-danger field-validation-valid" data-valmsg-for="PageModel.Transaction.IsHappy" data-valmsg-replace="true"></span>\n                            <span class="text-danger field-validation-valid" data-valmsg-for="PageModel.Transaction.IsNecessary" data-valmsg-replace="true"></span>`,n.appendChild(c),n.appendChild(u),n.appendChild(h),n.appendChild(p),l.appendChild(n)}return o.appendChild(n),o.appendChild(s),a.appendChild(l),i.appendChild(o),i.appendChild(a),e.appendChild(i),e}function S(){0==_.childElementCount?x.style.display="block":x.style.display="none"}r("#home-monthSelector").datepicker({format:"MM yyyy",startView:"months",minViewMode:"months",autoclose:!0}).datepicker("setDate",new Date),r(".monthPicker .calendar-button").on("click",(function(){let t=r(this).siblings(".monthSelector");t.data("datepicker").picker.is(":visible")||t.datepicker("show")})),new o.default(c,{type:"doughnut",data:{labels:["Happy","Unhappy"],datasets:[{label:"Total Amount",data:[parseFloat(c.dataset.happy),parseFloat(c.dataset.unhappy)],backgroundColor:["rgb(25,135,84)","rgb(220,53,69)"],hoverOffset:4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{tooltip:{callbacks:{label:function(t){let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=window.userNumberFormat.format(t.parsed)),e}}}}}}),new o.default(u,{type:"doughnut",data:{labels:["Necessary","Unnecessary"],datasets:[{label:"Total Amount",data:[parseFloat(u.dataset.necessary),parseFloat(u.dataset.unnecessary)],backgroundColor:["rgb(25,135,84)","rgb(220,53,69)"],hoverOffset:4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{tooltip:{callbacks:{label:function(t){let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=window.userNumberFormat.format(t.parsed)),e}}}}}}),A.on("click","svg",(function(){var t=A.row(r(this).parents("tr")).data();console.log(t)})),r(".accordion-head").on("click",(function(t){if(t.target.closest("svg.add-icon")){var e=r(this).closest(".accordion").data("id");b.modal("show"),b.find("#GroupId").val(e)}else{r(this).next().collapse("toggle"),r(".accordion-caret",this)[0].classList.toggle("rotate")}})),r("#add-category-form").on("submit",(async function(t){t.preventDefault(),r(this).valid()&&(b.modal("hide"),await async function(t){try{var e=await fetch(`${a}`,{method:"POST",headers:{"Content-Type":"application/json",RequestVerificationToken:t.get("__RequestVerificationToken")},body:JSON.stringify({Name:t.get("Name"),Budget:parseFloat(t.get("Budget")),GroupId:parseInt(t.get("GroupId"))})});return e.ok?(document.querySelector(`#group_${t.get("GroupId")} .accordion-body`).innerHTML+=`\n    <div class="category border p-2">\n        <div class="d-flex">\n            <div>${(await e.json()).name}</div>\n            <div class="ms-auto">Balance: 700 / 700</div>\n        </div>\n        <div class="progress">\n            <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>\n        </div>\n    </div>`,!0):(console.error(`HTTP Post Error: ${e.status}`),!1)}catch(t){return console.error(t),!1}}(new FormData(this)))})),r("#add-transaction-form").on("submit",(async function(t){t.preventDefault(),r(this).valid()&&(y.modal("hide"),await async function(t){try{var e=await fetch(`${l}`,{method:"POST",headers:{"Content-Type":"application/json",RequestVerificationToken:t.get("__RequestVerificationToken")},body:JSON.stringify({Title:t.get("Title"),Amount:parseFloat(t.get("Amount")),DateTime:t.get("DateTime"),IsHappy:"true"===t.get("IsHappy"),IsNecessary:"true"===t.get("IsNecessary"),CategoryId:parseInt(t.get("CategoryId"))})});e.ok||console.error(`HTTP Post Error: ${e.status}`)}catch(t){console.error(t)}}(new FormData(this)))})),r("#update-category-form").on("submit",(async function(t){t.preventDefault(),r(this).valid()&&(h.modal("hide"),await async function(t){try{var e=parseInt(t.get("Id")),i=await fetch(`${a}/${e}`,{method:"PUT",headers:{"Content-Type":"application/json",RequestVerificationToken:t.get("__RequestVerificationToken")},body:JSON.stringify({Name:t.get("Name"),Budget:parseFloat(t.get("Budget")),GroupId:parseInt(t.get("GroupId")),Id:e})});return!!i.ok||(console.error(`HTTP Post Error: ${i.status}`),!1)}catch(t){return console.error(t),!1}}(new FormData(this)))})),r("#search-form").on("submit",(async function(t){t.preventDefault(),r(this).valid()&&await async function(t){try{let i=new URLSearchParams;for(let[e,n]of t.entries())void 0!==n&&""!==n&&i.append(e,n);let n=i.toString();var e=await fetch(`${l}?${n}`,{method:"GET"});if(e.ok){t=await e.json();A.clear(),A.rows.add(t),A.draw()}else A.clear(),console.error(`HTTP GET Error: ${e.status}`)}catch(t){console.error(t)}}(new FormData(this))})),r(".category").on("click",(function(t){0!=d.dataset.category&&document.getElementById(`category_${d.dataset.category}`).querySelector(".border-animation").classList.remove("border-rotate");d.dataset.category=this.dataset.id,d.style.left=this.style.left+t.pageX-100+"px",d.style.top=t.pageY-100+"px",d.classList.add("active"),this.querySelector(".border-animation").classList.add("border-rotate")})),document.getElementById("close-menu").onclick=function(){d.classList.remove("active");var t=d.dataset.category;document.getElementById(`category_${t}`).querySelector(".border-animation").classList.remove("border-rotate"),d.dataset.category=0,d.dataset.groupId=0},document.getElementById("delete-menu").onclick=function(){var t=d.querySelector("input").value;(async function(t,e){try{var i=await fetch(`${a}/${t}`,{method:"DELETE",headers:{RequestVerificationToken:e}});return i.ok?(document.getElementById(`category_${t}`).remove(),!0):(console.error(`HTTP Delete Error: ${i.status}`),!1)}catch(t){return console.error(t),!1}})(d.dataset.category,t)&&(d.classList.remove("active"),d.dataset.category=0,d.dataset.groupId=0)},document.getElementById("add-menu").onclick=function(){var t=d.dataset.category;y.find("#CategoryId").val(t),y.modal("show")},document.getElementById("edit-menu").onclick=function(){var t=document.getElementById(`category_${d.dataset.category}`);p.text(`Edit ${t.dataset.name}`),f.val(t.dataset.id),g.val(t.dataset.name),m.val(t.dataset.budget),v.val(t.dataset.groupid),h.modal("show")},document.getElementById("details-menu").onclick=function(){var t=d.dataset.category;window.location.href="Category/"+t},r("#action-sidebar").on("click",".sidebar-button-container",(async function(t){if(M!==this.dataset.index){var e=(0,s.shortestAngle)(M,this.dataset.index);w+=e,C.style=`transform: rotateY(${w}deg)`,M=this.dataset.index}})),C.addEventListener("transitionend",(()=>{w%=360,(0,s.resetStyle)(C,`transform: rotateY(${w}deg)`)}))},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/statisticsDashboard.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/chart.js/auto/auto.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/utilities.js");class o{#t;#e;#i;#n;#s;#o;#r;#a;#l;constructor(){this.#t=null,this.#e=this.init()}async init(){await this.getData((new Date).getFullYear()),this.#i=new n.default(document.getElementById("sentimentChartYear"),{type:"doughnut",data:{labels:["Happy","Unhappy"],datasets:[{label:"Total Amount",data:[this.#t.happyEvaluatedTotal,this.#t.unhappyEvaluatedTotal],backgroundColor:["rgb(25,135,84)","rgb(220,53,69)"],hoverOffset:4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{tooltip:{callbacks:{label:function(t){let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=window.userNumberFormat.format(t.parsed)),e}}}}}}),this.#n=new n.default(document.getElementById("necessityChartYear"),{type:"doughnut",data:{labels:["Necessary","Unnecessary"],datasets:[{label:"Total Amount",data:[this.#t.necessaryEvaluatedTotal,this.#t.unnecessaryEvaluatedTotal],backgroundColor:["rgb(25,135,84)","rgb(220,53,69)"],hoverOffset:4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{tooltip:{callbacks:{label:function(t){let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=window.userNumberFormat.format(t.parsed)),e}}}}}}),this.#s=new n.default(document.getElementById("sentimentLineChartYear"),{type:"bar",data:{labels:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"],datasets:[{label:"Happy",stack:"Unevaluated",data:this.#t.happyPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:"#20c997"},{label:"Unhappy",stack:"Unevaluated",data:this.#t.unhappyPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:"rgb(220,53,69)"},{label:"Happy (Eval.)",stack:"Evaluated",data:this.#t.happyEvaluatedPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:"#0f7c5c"},{label:"Unhappy (Eval.)",stack:"Evaluated",data:this.#t.unhappyEvaluatedPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:"#881d27"},{label:"Unevaluated",stack:"Evaluated",data:this.#t.unevaluatedPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:"#1c1c1c"}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{y:{border:{color:"#d3d3d3"},grid:{color:"#d3d3d3",lineWidth:.2},ticks:{color:"#d3d3d3",callback:function(t,e,i){return window.userNumberFormat.format(t)}}},x:{border:{color:"#d3d3d3"},grid:{display:!1,tickColor:"#d3d3d3"},ticks:{color:"#d3d3d3"}}},plugins:{emptypiechart:!1,tooltip:{callbacks:{label:function(t){let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=window.userNumberFormat.format(t.parsed.y)),e}}}}}}),this.#o=new n.default(document.getElementById("necessityLineChartYear"),{type:"bar",data:{labels:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"],datasets:[{label:"Necessary",stack:"Unevaluated",data:this.#t.necessaryPerMonth,backgroundColor:"#20c997",borderWidth:2,borderColor:"#d3d3d3"},{label:"Unnecessary",stack:"Unevaluated",data:this.#t.unnecessaryPerMonth,backgroundColor:"rgb(220,53,69)",borderWidth:2,borderColor:"#d3d3d3"},{label:"Necessary (Eval.)",stack:"Evaluated",data:this.#t.necessaryEvaluatedPerMonth,backgroundColor:"#0f7c5c",borderWidth:2,borderColor:"#d3d3d3"},{label:"Unnecessary (Eval.)",stack:"Evaluated",data:this.#t.unnecessaryEvaluatedPerMonth,backgroundColor:"#881d27",borderWidth:2,borderColor:"#d3d3d3"},{label:"Unevaluated",stack:"Evaluated",data:this.#t.unevaluatedPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:"#1c1c1c"}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{y:{border:{color:"#d3d3d3"},grid:{color:"#d3d3d3",lineWidth:.2},ticks:{color:"#d3d3d3",callback:function(t,e,i){return window.userNumberFormat.format(t)}}},x:{border:{color:"#d3d3d3"},grid:{display:!1,tickColor:"#d3d3d3"},ticks:{color:"#d3d3d3"}}},plugins:{emptypiechart:!1,tooltip:{callbacks:{label:function(t){let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=window.userNumberFormat.format(t.parsed.y)),e}}}}}});let t=[];for(var e=0;e<this.#t.monthlyOverspendingPerCategory.length;e++){var i=this.#t.monthlyOverspendingPerCategory[e];t.push({label:i.category,data:i.overspendingPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:(0,s.getRandomColor)()})}this.#r=new n.default(document.getElementById("overspendingChart"),{type:"bar",data:{labels:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"],datasets:t},options:{plugins:{title:{display:!0,text:"Monthly Overspending Per Category"}},responsive:!0,maintainAspectRatio:!1,indexAxis:"y",scales:{x:{stacked:!0,border:{color:"#d3d3d3"},grid:{color:"#d3d3d3",lineWidth:.2},ticks:{color:"#d3d3d3",callback:function(t,e,i){return window.userNumberFormat.format(t)}}},y:{stacked:!0,border:{color:"#d3d3d3"},grid:{display:!1,tickColor:"#d3d3d3"},ticks:{color:"#d3d3d3"}}},plugins:{emptypiechart:!1,tooltip:{callbacks:{label:function(t){let e=t.dataset.label||"";return e&&(e+=": "),null!==t.parsed.y&&(e+=window.userNumberFormat.format(t.parsed.x)),e}}}}}}),this.#l=document.getElementById("statistics-overspending"),this.#l.textContent=`Overspending: ${window.userNumberFormat.format(this.#t.overspendingTotal)}`,this.#a=new n.default(document.getElementById("totalSpentChart"),{type:"line",data:{labels:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"],datasets:[{label:"Total Spent Per Month",data:this.#t.totalPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:"#20c997"}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{y:{border:{color:"#d3d3d3"},grid:{color:"#d3d3d3",lineWidth:.2},ticks:{color:"#d3d3d3",callback:function(t,e,i){return window.userNumberFormat.format(t)}}},x:{border:{color:"#d3d3d3"},grid:{display:!1,tickColor:"#d3d3d3"},ticks:{color:"#d3d3d3"}}},plugins:{emptypiechart:!1}}})}async getData(t){await this.#e;try{var e=await fetch(`https://localhost:7246/api/Groups/2?year=${t}`,{method:"GET"});e.ok?this.#t=await e.json():console.error(`HTTP Post Error: ${e.status}`)}catch(t){console.error(t)}}async updateCharts(){await this.#e,this.#i.data.datasets[0].data=[this.#t.happyEvaluatedTotal,this.#t.unhappyEvaluatedTotal,Number.MIN_VALUE],this.#i.update(),this.#n.data.datasets[0].data=[this.#t.necessaryEvaluatedTotal,this.#t.unnecessaryEvaluatedTotal,Number.MIN_VALUE],this.#n.update(),this.#s.data.datasets[0].data=this.#t.happyPerMonth,this.#s.data.datasets[1].data=this.#t.unhappyPerMonth,this.#s.data.datasets[2].data=this.#t.happyEvaluatedPerMonth,this.#s.data.datasets[3].data=this.#t.unhappyEvaluatedPerMonth,this.#s.data.datasets[4].data=this.#t.unevaluatedPerMonth,this.#s.update(),this.#o.data.datasets[0].data=this.#t.necessaryPerMonth,this.#o.data.datasets[1].data=this.#t.unnecessaryPerMonth,this.#o.data.datasets[2].data=this.#t.necessaryEvaluatedPerMonth,this.#o.data.datasets[3].data=this.#t.unnecessaryEvaluatedPerMonth,this.#o.data.datasets[4].data=this.#t.unevaluatedPerMonth,this.#o.update();let t=[];for(var e=0;e<this.#t.monthlyOverspendingPerCategory.length;e++){var i=this.#t.monthlyOverspendingPerCategory[e];t.push({label:i.category,data:i.overspendingPerMonth,borderWidth:2,borderColor:"#d3d3d3",backgroundColor:(0,s.getRandomColor)()})}this.#r.data.datasets=t,this.#r.update(),this.#l.textContent=`Overspending: ${window.userNumberFormat.format(this.#t.overspendingTotal)}`,this.#a.data.datasets[0].data=this.#t.totalPerMonth,this.#a.update()}}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/utilities.js":(t,e,i)=>{"use strict";function n(t,e){var i=(e-t+4)%4;return 1===i?-90:2===i?-180:3===i?90:0}function s(t,e){t.style=e+"; transition: transform 0s"}function o(){for(var t="#",e=0;e<6;e++)t+="0123456789ABCDEF"[Math.floor(16*Math.random())];return t}i.r(e),i.d(e,{getRandomColor:()=>o,resetStyle:()=>s,shortestAngle:()=>n})},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap-datepicker/dist/css/bootstrap-datepicker3.min.css":(t,e,i)=>{"use strict";i.r(e)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap-icons/font/bootstrap-icons.css":(t,e,i)=>{"use strict";i.r(e)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/country-select-js/build/css/countrySelect.min.css":(t,e,i)=>{"use strict";i.r(e)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/datatables.net-bs5/css/dataTables.bootstrap5.css":(t,e,i)=>{"use strict";i.r(e)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/scss/site.scss":(t,e,i)=>{"use strict";i.r(e)},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@kurkle/color/dist/color.esm.js":(t,e,i)=>{"use strict";function n(t){return t+.5|0}i.r(e),i.d(e,{Color:()=>z,b2n:()=>l,b2p:()=>r,default:()=>W,hexParse:()=>m,hexString:()=>b,hsl2rgb:()=>R,hslString:()=>B,hsv2rgb:()=>D,hueParse:()=>S,hwb2rgb:()=>A,lim:()=>s,n2b:()=>a,n2p:()=>d,nameParse:()=>P,p2b:()=>o,rgb2hsl:()=>M,rgbParse:()=>O,rgbString:()=>I,rotate:()=>k,round:()=>n});const s=(t,e,i)=>Math.max(Math.min(t,i),e);function o(t){return s(n(2.55*t),0,255)}function r(t){return s(n(t/2.55),0,100)}function a(t){return s(n(255*t),0,255)}function l(t){return s(n(t/2.55)/100,0,1)}function d(t){return s(n(100*t),0,100)}const c={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},u=[..."0123456789ABCDEF"],h=t=>u[15&t],p=t=>u[(240&t)>>4]+u[15&t],f=t=>(240&t)>>4==(15&t),g=t=>f(t.r)&&f(t.g)&&f(t.b)&&f(t.a);function m(t){var e,i=t.length;return"#"===t[0]&&(4===i||5===i?e={r:255&17*c[t[1]],g:255&17*c[t[2]],b:255&17*c[t[3]],a:5===i?17*c[t[4]]:255}:7!==i&&9!==i||(e={r:c[t[1]]<<4|c[t[2]],g:c[t[3]]<<4|c[t[4]],b:c[t[5]]<<4|c[t[6]],a:9===i?c[t[7]]<<4|c[t[8]]:255})),e}const v=(t,e)=>t<255?e(t):"";function b(t){var e=g(t)?h:p;return t?"#"+e(t.r)+e(t.g)+e(t.b)+v(t.a,e):void 0}const y=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function C(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function _(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function x(t,e,i){const n=C(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function M(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),r=(s+o)/2;let a,l,d;return s!==o&&(d=s-o,l=r>.5?d/(2-s-o):d/(s+o),a=function(t,e,i,n,s){return t===s?(e-i)/n+(e<i?6:0):e===s?(i-t)/n+2:(t-e)/n+4}(e,i,n,d,s),a=60*a+.5),[0|a,l||0,r]}function w(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(a)}function R(t,e,i){return w(C,t,e,i)}function A(t,e,i){return w(x,t,e,i)}function D(t,e,i){return w(_,t,e,i)}function T(t){return(t%360+360)%360}function S(t){const e=y.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?o(+e[5]):a(+e[5]));const s=T(+e[2]),r=+e[3]/100,l=+e[4]/100;return i="hwb"===e[1]?A(s,r,l):"hsv"===e[1]?D(s,r,l):R(s,r,l),{r:i[0],g:i[1],b:i[2],a:n}}function k(t,e){var i=M(t);i[0]=T(i[0]+e),i=R(i),t.r=i[0],t.g=i[1],t.b=i[2]}function B(t){if(!t)return;const e=M(t),i=e[0],n=d(e[1]),s=d(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${l(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}const V={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},j={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let E;function P(t){E||(E=function(){const t={},e=Object.keys(j),i=Object.keys(V);let n,s,o,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],s=0;s<i.length;s++)o=i[s],a=a.replace(o,V[o]);o=parseInt(j[r],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),E.transparent=[0,0,0,0]);const e=E[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const L=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function O(t){const e=L.exec(t);let i,n,r,a=255;if(e){if(e[7]!==i){const t=+e[7];a=e[8]?o(t):s(255*t,0,255)}return i=+e[1],n=+e[3],r=+e[5],i=255&(e[2]?o(i):s(i,0,255)),n=255&(e[4]?o(n):s(n,0,255)),r=255&(e[6]?o(r):s(r,0,255)),{r:i,g:n,b:r,a}}}function I(t){return t&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${l(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`)}const F=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,N=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Y(t,e,i){if(t){let n=M(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=R(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function K(t,e){return t?Object.assign(e||{},t):t}function H(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=a(t[3]))):(e=K(t,{r:0,g:0,b:0,a:1})).a=a(e.a),e}class z{constructor(t){if(t instanceof z)return t;const e=typeof t;let i;var n;"object"===e?i=H(t):"string"===e&&(i=m(t)||P(t)||("r"===(n=t).charAt(0)?O(n):S(n))),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=K(this._rgb);return t&&(t.a=l(t.a)),t}set rgb(t){this._rgb=H(t)}rgbString(){return this._valid?I(this._rgb):void 0}hexString(){return this._valid?b(this._rgb):void 0}hslString(){return this._valid?B(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let s;const o=e===s?.5:e,r=2*o-1,a=i.a-n.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;s=1-l,i.r=255&l*i.r+s*n.r+.5,i.g=255&l*i.g+s*n.g+.5,i.b=255&l*i.b+s*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=N(l(t.r)),s=N(l(t.g)),o=N(l(t.b));return{r:a(F(n+i*(N(l(e.r))-n))),g:a(F(s+i*(N(l(e.g))-s))),b:a(F(o+i*(N(l(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new z(this.rgb)}alpha(t){return this._rgb.a=a(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=n(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Y(this._rgb,2,t),this}darken(t){return Y(this._rgb,2,-t),this}saturate(t){return Y(this._rgb,1,t),this}desaturate(t){return Y(this._rgb,1,-t),this}rotate(t){return k(this._rgb,t),this}}function W(t){return new z(t)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/chart.js/auto/auto.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Animation:()=>n.Animation,Animations:()=>n.Animations,ArcElement:()=>n.ArcElement,BarController:()=>n.BarController,BarElement:()=>n.BarElement,BasePlatform:()=>n.BasePlatform,BasicPlatform:()=>n.BasicPlatform,BubbleController:()=>n.BubbleController,CategoryScale:()=>n.CategoryScale,Chart:()=>n.Chart,Colors:()=>n.Colors,DatasetController:()=>n.DatasetController,Decimation:()=>n.Decimation,DomPlatform:()=>n.DomPlatform,DoughnutController:()=>n.DoughnutController,Element:()=>n.Element,Filler:()=>n.Filler,Interaction:()=>n.Interaction,Legend:()=>n.Legend,LineController:()=>n.LineController,LineElement:()=>n.LineElement,LinearScale:()=>n.LinearScale,LogarithmicScale:()=>n.LogarithmicScale,PieController:()=>n.PieController,PointElement:()=>n.PointElement,PolarAreaController:()=>n.PolarAreaController,RadarController:()=>n.RadarController,RadialLinearScale:()=>n.RadialLinearScale,Scale:()=>n.Scale,ScatterController:()=>n.ScatterController,SubTitle:()=>n.SubTitle,Ticks:()=>n.Ticks,TimeScale:()=>n.TimeScale,TimeSeriesScale:()=>n.TimeSeriesScale,Title:()=>n.Title,Tooltip:()=>n.Tooltip,_adapters:()=>n._adapters,_detectPlatform:()=>n._detectPlatform,animator:()=>n.animator,controllers:()=>n.controllers,default:()=>s,defaults:()=>n.defaults,elements:()=>n.elements,layouts:()=>n.layouts,plugins:()=>n.plugins,registerables:()=>n.registerables,registry:()=>n.registry,scales:()=>n.scales});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/chart.js/dist/chart.js");n.Chart.register(...n.registerables);const s=n.Chart},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/chart.js/dist/chart.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Animation:()=>l,Animations:()=>d,ArcElement:()=>ye,BarController:()=>k,BarElement:()=>Oe,BasePlatform:()=>lt,BasicPlatform:()=>dt,BubbleController:()=>B,CategoryScale:()=>Ii,Chart:()=>pe,Colors:()=>We,DatasetController:()=>_,Decimation:()=>Ue,DomPlatform:()=>wt,DoughnutController:()=>V,Element:()=>At,Filler:()=>ui,Interaction:()=>U,Legend:()=>gi,LineController:()=>j,LineElement:()=>Te,LinearScale:()=>Yi,LogarithmicScale:()=>qi,PieController:()=>P,PointElement:()=>ke,PolarAreaController:()=>E,RadarController:()=>L,RadialLinearScale:()=>nn,Scale:()=>Lt,ScatterController:()=>O,SubTitle:()=>yi,Ticks:()=>n.aL,TimeScale:()=>un,TimeSeriesScale:()=>pn,Title:()=>vi,Tooltip:()=>Ei,_adapters:()=>Y,_detectPlatform:()=>Rt,animator:()=>o,controllers:()=>I,defaults:()=>n.d,elements:()=>Ie,layouts:()=>at,plugins:()=>Pi,registerables:()=>gn,registry:()=>Ft,scales:()=>fn});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/chart.js/dist/chunks/helpers.segment.js");class s{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=n.r.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,r=s.length-1,a=!1;for(;r>=0;--r)o=s[r],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(s[r]=s[s.length-1],s.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var o=new s;const r="transparent",a={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=(0,n.c)(t||r),o=s.valid&&(0,n.c)(e||r);return o&&o.valid?o.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class l{constructor(t,e,i,s){const o=e[i];s=(0,n.a)([t.to,s,o,t.from]);const r=(0,n.a)([t.from,o,s]);this._active=!0,this._fn=t.fn||a[t.type||typeof r],this._easing=n.e[t.easing]||n.e.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=r,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],o=i-this._start,r=this._duration-o;this._start=i,this._duration=Math.floor(Math.max(r,t.duration)),this._total+=o,this._loop=!!t.loop,this._to=(0,n.a)([t.to,e,s,t.from]),this._from=(0,n.a)([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,r=this._to;let a;if(this._active=s!==r&&(o||e<i),!this._active)return this._target[n]=r,void this._notify(!0);e<0?this._target[n]=s:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(s,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class d{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!(0,n.i)(t))return;const e=Object.keys(n.d.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const o=t[s];if(!(0,n.i)(o))return;const r={};for(const t of e)r[t]=o[t];((0,n.b)(o.properties)&&o.properties||[s]).forEach((t=>{t!==s&&i.has(t)||i.set(t,r)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),r=Date.now();let a;for(a=o.length-1;a>=0;--a){const d=o[a];if("$"===d.charAt(0))continue;if("options"===d){n.push(...this._animateOptions(t,e));continue}const c=e[d];let u=s[d];const h=i.get(d);if(u){if(h&&u.active()){u.update(h,c,r);continue}u.cancel()}h&&h.duration?(s[d]=u=new l(h,t,d,c),n.push(u)):t[d]=c}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(o.add(this._chart,i),!0):void 0}}function c(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function u(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function h(t,e,i,s={}){const o=t.keys,r="single"===s.mode;let a,l,d,c;if(null!==e){for(a=0,l=o.length;a<l;++a){if(d=+o[a],d===i){if(s.all)continue;break}c=t.values[d],(0,n.g)(c)&&(r||0===e||(0,n.s)(e)===(0,n.s)(c))&&(e+=c)}return e}}function p(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function f(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function g(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function m(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:r,index:a}=n,l=o.axis,d=r.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,r,n),u=e.length;let h;for(let t=0;t<u;++t){const i=e[t],{[l]:o,[d]:u}=i;h=(i._stacks||(i._stacks={}))[d]=f(s,c,o),h[a]=u,h._top=g(h,r,!0,n.type),h._bottom=g(h,r,!1,n.type);(h._visualValues||(h._visualValues={}))[a]=u}}function v(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function b(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const y=t=>"reset"===t||"none"===t,C=(t,e)=>e?t:Object.assign({},t);class _{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=p(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&b(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,o=e.xAxisID=(0,n.v)(i.xAxisID,v(t,"x")),r=e.yAxisID=(0,n.v)(i.yAxisID,v(t,"y")),a=e.rAxisID=(0,n.v)(i.rAxisID,v(t,"r")),l=e.indexAxis,d=e.iAxisID=s(l,o,r,a),c=e.vAxisID=s(l,r,o,a);e.xScale=this.getScaleForId(o),e.yScale=this.getScaleForId(r),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(d),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&(0,n.u)(this._data,this),t._stacked&&b(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if((0,n.i)(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){(0,n.u)(i,this);const t=this._cachedMeta;b(t),t._parsed=[]}e&&Object.isExtensible(e)&&(0,n.l)(e,this),this._syncList=[],this._data=e}}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=p(e.vScale,e),e.stack!==i.stack&&(n=!0,b(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&m(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:o,_stacked:r}=i,a=o.axis;let l,d,c,u=0===t&&e===s.length||i._sorted,h=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,c=s;else{c=(0,n.b)(s[t])?this.parseArrayData(i,s,t,e):(0,n.i)(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const o=()=>null===d[a]||h&&d[a]<h[a];for(l=0;l<e;++l)i._parsed[l+t]=d=c[l],u&&(o()&&(u=!1),h=d);i._sorted=u}r&&m(this,c)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,r=s.axis,a=o.axis,l=s.getLabels(),d=s===o,c=new Array(n);let u,h,p;for(u=0,h=n;u<h;++u)p=u+i,c[u]={[r]:d||s.parse(l[p],p),[a]:o.parse(e[p],p)};return c}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,r=new Array(n);let a,l,d,c;for(a=0,l=n;a<l;++a)d=a+i,c=e[d],r[a]={x:s.parse(c[0],d),y:o.parse(c[1],d)};return r}parseObjectData(t,e,i,s){const{xScale:o,yScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,d=new Array(s);let c,u,h,p;for(c=0,u=s;c<u;++c)h=c+i,p=e[h],d[c]={x:o.parse((0,n.f)(p,a),h),y:r.parse((0,n.f)(p,l),h)};return d}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return h({keys:u(n,!0),values:e._stacks[t.axis]._visualValues},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,o=h(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,o=i._sorted&&t===i.iScale,r=s.length,a=this._getOtherScale(t),l=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:u(i,!0),values:null})(e,i,this.chart),d={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:h}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(a);let p,f;function g(){f=s[p];const e=f[a.axis];return!(0,n.g)(f[t.axis])||c>e||h<e}for(p=0;p<r&&(g()||(this.updateRangeFromParsed(d,t,f,l),!o));++p);if(o)for(p=r-1;p>=0;--p)if(!g()){this.updateRangeFromParsed(d,t,f,l);break}return d}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,o,r;for(s=0,o=e.length;s<o;++s)r=e[s][t.axis],(0,n.g)(r)&&i.push(r);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,o;return(0,n.i)(t)?(e=t.top,i=t.right,s=t.bottom,o=t.left):e=i=s=o=t,{top:e,right:i,bottom:s,left:o,disabled:!1===t}}((0,n.v)(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=c(t,i),s=c(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],r=this._drawStart||0,a=this._drawCount||n.length-r,l=this.options.drawActiveElementsOnTop;let d;for(i.dataset&&i.dataset.draw(t,s,r,a),d=r;d<r+a;++d){const e=n[d];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(d=0;d<o.length;++d)o[d].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let o;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];o=e.$context||(e.$context=function(t,e,i){return(0,n.j)(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),o.parsed=this.getParsed(t),o.raw=s.data[t],o.index=o.dataIndex=t}else o=this.$context||(this.$context=function(t,e){return(0,n.j)(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),o.dataset=s,o.index=o.datasetIndex=this.index;return o.active=!!e,o.mode=i,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,o=this._cachedDataOpts,r=t+"-"+e,a=o[r],l=this.enableOptionSharing&&(0,n.h)(i);if(a)return C(a,l);const d=this.chart.config,c=d.datasetElementScopeKeys(this._type,t),u=s?[`${t}Hover`,"hover",t,""]:[t,""],h=d.getOptionScopes(this.getDataset(),c),p=Object.keys(n.d.elements[t]),f=d.resolveNamedOptions(h,p,(()=>this.getContext(i,s,e)),u);return f.$shared&&(f.$shared=l,o[r]=Object.freeze(C(f,l))),f}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,r=s[o];if(r)return r;let a;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);a=n.createResolver(o,this.getContext(t,i,e))}const l=new d(n,a&&a.animations);return a&&a._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||y(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,s=this.getSharedOptions(i),o=this.includeOptions(e,s)||s!==n;return this.updateSharedOptions(s,e,i),{sharedOptions:s,includeOptions:o}}updateElement(t,e,i,n){y(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!y(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=o;r--)t[r]=t[r-e]};for(a(s),r=t;r<o;++r)s[r]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&b(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function x(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=(0,n._)(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,o,r,a,l=e._length;const d=()=>{32767!==r&&-32768!==r&&((0,n.h)(a)&&(l=Math.min(l,Math.abs(r-a)||l)),a=r)};for(s=0,o=i.length;s<o;++s)r=e.getPixelForValue(i[s]),d();for(a=void 0,s=0,o=e.ticks.length;s<o;++s)r=e.getPixelForTick(s),d();return l}function M(t,e,i,s){return(0,n.b)(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),r=Math.min(s,o),a=Math.max(s,o);let l=r,d=a;Math.abs(r)>Math.abs(a)&&(l=a,d=r),e[i.axis]=d,e._custom={barStart:l,barEnd:d,start:s,end:o,min:r,max:a}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function w(t,e,i,n){const s=t.iScale,o=t.vScale,r=s.getLabels(),a=s===o,l=[];let d,c,u,h;for(d=i,c=i+n;d<c;++d)h=e[d],u={},u[s.axis]=a||s.parse(r[d],d),l.push(M(h,u,o,d));return l}function R(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function A(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);if(!0===s)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:d,bottom:c}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=d:(i._bottom||0)===n?s=c:(o[D(c,r,a,l)]=!0,s=d)),o[D(s,r,a,l)]=!0,t.borderSkipped=o}function D(t,e,i,n){var s,o,r;return n?(r=i,t=T(t=(s=t)===(o=e)?r:s===r?o:s,i,e)):t=T(t,e,i),t}function T(t,e,i){return"start"===t?e:"end"===t?i:t}function S(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class k extends _{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return w(t,e,i,n)}parseArrayData(t,e,i,n){return w(t,e,i,n)}parseObjectData(t,e,i,s){const{iScale:o,vScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,d="x"===o.axis?a:l,c="x"===r.axis?a:l,u=[];let h,p,f,g;for(h=i,p=i+s;h<p;++h)g=e[h],f={},f[o.axis]=o.parse((0,n.f)(g,d),h),u.push(M((0,n.f)(g,c),f,r,h));return u}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,r=R(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const o="reset"===s,{index:r,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),d=a.isHorizontal(),c=this._getRuler(),{sharedOptions:u,includeOptions:h}=this._getSharedOptions(e,s);for(let p=e;p<e+i;p++){const e=this.getParsed(p),i=o||(0,n.k)(e[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(p),f=this._calculateBarIndexPixels(p,c),g=(e._stacks||{})[a.axis],m={horizontal:d,base:i.base,enableBorderRadius:!g||R(e._custom)||r===g._top||r===g._bottom,x:d?i.head:f.center,y:d?f.center:i.head,height:d?f.size:Math.abs(i.size),width:d?Math.abs(i.size):f.size};h&&(m.options=u||this.resolveDataElementOptions(p,t[p].active?"active":s));const v=m.options||t[p].options;A(m,v,g,r),S(m,v,c.ratio),this.updateElement(t[p],p,m,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),o=i.options.stacked,r=[],a=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if((0,n.k)(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!a(i))&&((!1===o||-1===r.indexOf(i.stack)||void 0===o&&void 0===i.stack)&&r.push(i.stack),i.index===t))break;return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const r=t.barThickness;return{min:r||x(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:s},options:{base:o,minBarLength:r}}=this,a=o||0,l=this.getParsed(t),d=l._custom,c=R(d);let u,h,p=l[e.axis],f=0,g=i?this.applyStack(e,l,i):p;g!==p&&(f=g-p,g=p),c&&(p=d.barStart,g=d.barEnd-d.barStart,0!==p&&(0,n.s)(p)!==(0,n.s)(d.barEnd)&&(f=0),f+=p);const m=(0,n.k)(o)||c?f:o;let v=e.getPixelForValue(m);if(u=this.chart.getDataVisibility(t)?e.getPixelForValue(f+g):v,h=u-v,Math.abs(h)<r){h=function(t,e,i){return 0!==t?(0,n.s)(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(h,e,a)*r,p===a&&(v-=h/2);const t=e.getPixelForDecimal(0),o=e.getPixelForDecimal(1),d=Math.min(t,o),f=Math.max(t,o);v=Math.max(Math.min(v,f),d),u=v+h,i&&!c&&(l._stacks[e.axis]._visualValues[s]=e.getValueForPixel(u)-e.getValueForPixel(v))}if(v===e.getPixelForValue(a)){const t=(0,n.s)(h)*e.getLineWidthForValue(a)/2;v+=t,h-=t}return{size:h,base:v,head:u,center:u+h/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,o=s.skipNull,r=(0,n.v)(s.maxBarThickness,1/0);let a,l;if(e.grouped){const i=o?this._getStackCount(t):e.stackCount,d="flex"===s.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let r=t>0?s[t-1]:null,a=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===r&&(r=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-r);const d=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:d}}(t,e,s,i):function(t,e,i,s){const o=i.barThickness;let r,a;return(0,n.k)(o)?(r=e.min*i.categoryPercentage,a=i.barPercentage):(r=o*s,a=1),{chunk:r/s,ratio:a,start:e.pixels[t]-r/2}}(t,e,s,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,o?t:void 0);a=d.start+d.chunk*c+d.chunk/2,l=Math.min(r,d.chunk*d.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),l=Math.min(r,e.min*e.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null!==this.getParsed(s)[e.axis]&&i[s].draw(this._ctx)}}class B extends _{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,s){const o=super.parseArrayData(t,e,i,s);for(let t=0;t<o.length;t++){const s=e[i+t];o[t]._custom=(0,n.v)(s[2],this.resolveDataElementOptions(t+i).radius)}return o}parseObjectData(t,e,i,s){const o=super.parseObjectData(t,e,i,s);for(let t=0;t<o.length;t++){const s=e[i+t];o[t]._custom=(0,n.v)(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return o}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),d=o.axis,c=r.axis;for(let u=e;u<e+i;u++){const e=t[u],i=!s&&this.getParsed(u),h={},p=h[d]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[d]),f=h[c]=s?r.getBasePixel():r.getPixelForValue(i[c]);h.skip=isNaN(p)||isNaN(f),l&&(h.options=a||this.resolveDataElementOptions(u,e.active?"active":n),s&&(h.options.radius=0)),this.updateElement(e,u,h,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const o=s.radius;return"active"!==e&&(s.radius=0),s.radius+=(0,n.v)(i&&i._custom,o),s}}class V extends _{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let o,r,a=t=>+i[t];if((0,n.i)(i[t])){const{key:t="value"}=this._parsing;a=e=>+(0,n.f)(i[e],t)}for(o=t,r=t+e;o<r;++o)s._parsed[o]=a(o)}}_getRotation(){return(0,n.t)(this.options.rotation-90)}_getCircumference(){return(0,n.t)(this.options.circumference)}_getRotationExtents(){let t=n.T,e=-n.T;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,o=s.data,r=this.getMaxBorderWidth()+this.getMaxOffset(o)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-r)/2,0),l=Math.min((0,n.m)(this.options.cutout,a),1),d=this._getRingWeight(this.index),{circumference:c,rotation:u}=this._getRotationExtents(),{ratioX:h,ratioY:p,offsetX:f,offsetY:g}=function(t,e,i){let s=1,o=1,r=0,a=0;if(e<n.T){const l=t,d=l+e,c=Math.cos(l),u=Math.sin(l),h=Math.cos(d),p=Math.sin(d),f=(t,e,s)=>(0,n.p)(t,l,d,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>(0,n.p)(t,l,d,!0)?-1:Math.min(e,e*i,s,s*i),m=f(0,c,h),v=f(n.H,u,p),b=g(n.P,c,h),y=g(n.P+n.H,u,p);s=(m-b)/2,o=(v-y)/2,r=-(m+b)/2,a=-(v+y)/2}return{ratioX:s,ratioY:o,offsetX:r,offsetY:a}}(u,c,l),m=(i.width-r)/h,v=(i.height-r)/p,b=Math.max(Math.min(m,v)/2,0),y=(0,n.n)(this.options.radius,b),C=(y-Math.max(y*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*y,this.offsetY=g*y,s.total=this.calculateTotal(),this.outerRadius=y-C*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-C*d,0),this.updateElements(o,0,o.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,o=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*o/n.T)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.chartArea,a=o.options.animation,l=(r.left+r.right)/2,d=(r.top+r.bottom)/2,c=s&&a.animateScale,u=c?0:this.innerRadius,h=c?0:this.outerRadius,{sharedOptions:p,includeOptions:f}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,s);for(g=e;g<e+i;++g){const e=this._circumference(g,s),i=t[g],o={x:l+this.offsetX,y:d+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:h,innerRadius:u};f&&(o.options=p||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?n.T*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],o=(0,n.o)(e._parsed[t],i.options.locale);return{label:s[t]||"",value:o}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,r,a;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,r=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)a=r.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max((0,n.v)(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class j extends _{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:o}=e,r=this.chart._animationsDisabled;let{start:a,count:l}=(0,n.q)(e,s,r);this._drawStart=a,this._drawCount=l,(0,n.w)(e)&&(a=0,l=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!o._decimated,i.points=s;const d=this.resolveDatasetElementOptions(t);this.options.showLine||(d.borderWidth=0),d.segment=this.options.segment,this.updateElement(i,void 0,{animated:!r,options:d},t),this.updateElements(s,a,l,t)}updateElements(t,e,i,s){const o="reset"===s,{iScale:r,vScale:a,_stacked:l,_dataset:d}=this._cachedMeta,{sharedOptions:c,includeOptions:u}=this._getSharedOptions(e,s),h=r.axis,p=a.axis,{spanGaps:f,segment:g}=this.options,m=(0,n.x)(f)?f:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||o||"none"===s,b=e+i,y=t.length;let C=e>0&&this.getParsed(e-1);for(let i=0;i<y;++i){const f=t[i],y=v?f:{};if(i<e||i>=b){y.skip=!0;continue}const _=this.getParsed(i),x=(0,n.k)(_[p]),M=y[h]=r.getPixelForValue(_[h],i),w=y[p]=o||x?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,_,l):_[p],i);y.skip=isNaN(M)||isNaN(w)||x,y.stop=i>0&&Math.abs(_[h]-C[h])>m,g&&(y.parsed=_,y.raw=d.data[i]),u&&(y.options=c||this.resolveDataElementOptions(i,f.active?"active":s)),v||this.updateElement(f,i,y,s),C=_}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}class E extends _{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],o=(0,n.o)(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:o}}parseObjectData(t,e,i,s){return n.y.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const o="reset"===s,r=this.chart,a=r.options.animation,l=this._cachedMeta.rScale,d=l.xCenter,c=l.yCenter,u=l.getIndexAngle(0)-.5*n.P;let h,p=u;const f=360/this.countVisibleElements();for(h=0;h<e;++h)p+=this._computeAngle(h,s,f);for(h=e;h<e+i;h++){const e=t[h];let i=p,n=p+this._computeAngle(h,s,f),g=r.getDataVisibility(h)?l.getDistanceFromCenterForValue(this.getParsed(h).r):0;p=n,o&&(a.animateScale&&(g=0),a.animateRotate&&(i=n=u));const m={x:d,y:c,innerRadius:0,outerRadius:g,startAngle:i,endAngle:n,options:this.resolveDataElementOptions(h,e.active?"active":s)};this.updateElement(e,h,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?(0,n.t)(this.resolveDataElementOptions(t,e).angle||i):0}}class P extends V{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}}class L extends _{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return n.y.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this._cachedMeta.rScale,o="reset"===n;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":n),a=s.getPointPositionForValue(r,this.getParsed(r).r),l=o?s.xCenter:a.x,d=o?s.yCenter:a.y,c={x:l,y:d,angle:a.angle,skip:isNaN(l)||isNaN(d),options:i};this.updateElement(e,r,c,n)}}}class O extends _{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y);return{label:i[t]||"",value:"("+r+", "+a+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:o,count:r}=(0,n.q)(e,i,s);if(this._drawStart=o,this._drawCount=r,(0,n.w)(e)&&(o=0,r=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:r},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,o,r,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,s){const o="reset"===s,{iScale:r,vScale:a,_stacked:l,_dataset:d}=this._cachedMeta,c=this.resolveDataElementOptions(e,s),u=this.getSharedOptions(c),h=this.includeOptions(s,u),p=r.axis,f=a.axis,{spanGaps:g,segment:m}=this.options,v=(0,n.x)(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||o||"none"===s;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),g=b?e:{},C=(0,n.k)(i[f]),_=g[p]=r.getPixelForValue(i[p],c),x=g[f]=o||C?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,i,l):i[f],c);g.skip=isNaN(_)||isNaN(x)||C,g.stop=c>0&&Math.abs(i[p]-y[p])>v,m&&(g.parsed=i,g.raw=d.data[c]),h&&(g.options=u||this.resolveDataElementOptions(c,e.active?"active":s)),b||this.updateElement(e,c,g,s),y=i}this.updateSharedOptions(u,s,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const s=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,s,o)/2}}var I=Object.freeze({__proto__:null,BarController:k,BubbleController:B,DoughnutController:V,LineController:j,PieController:P,PolarAreaController:E,RadarController:L,ScatterController:O});function F(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class N{static override(t){Object.assign(N.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return F()}parse(){return F()}format(){return F()}add(){return F()}diff(){return F()}startOf(){return F()}endOf(){return F()}}var Y={_date:N};function K(t,e,i,s){const{controller:o,data:r,_sorted:a}=t,l=o._cachedMeta.iScale;if(l&&e===l.axis&&"r"!==e&&a&&r.length){const t=l._reversePixels?n.A:n.B;if(!s)return t(r,e,i);if(o._sharedOptions){const n=r[0],s="function"==typeof n.getRange&&n.getRange(e);if(s){const n=t(r,e,i-s),o=t(r,e,i+s);return{lo:n.lo,hi:o.hi}}}}return{lo:0,hi:r.length-1}}function H(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:d}=K(o[t],e,r,s);for(let t=l;t<=d;++t){const e=a[t];e.skip||n(e,i,t)}}}function z(t,e,i,s,o){const r=[];if(!o&&!t.isPointInArea(e))return r;return H(t,i,e,(function(i,a,l){(o||(0,n.C)(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&r.push({element:i,datasetIndex:a,index:l})}),!0),r}function W(t,e,i,n,s,o){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return H(t,i,e,(function(i,d,c){const u=i.inRange(e.x,e.y,s);if(n&&!u)return;const h=i.getCenterPoint(s);if(!(!!o||t.isPointInArea(h))&&!u)return;const p=a(e,h);p<l?(r=[{element:i,datasetIndex:d,index:c}],l=p):p===l&&r.push({element:i,datasetIndex:d,index:c})})),r}function $(t,e,i,s,o,r){return r||t.isPointInArea(e)?"r"!==i||s?W(t,e,i,s,o,r):function(t,e,i,s){let o=[];return H(t,i,e,(function(t,i,r){const{startAngle:a,endAngle:l}=t.getProps(["startAngle","endAngle"],s),{angle:d}=(0,n.D)(t,{x:e.x,y:e.y});(0,n.p)(d,a,l)&&o.push({element:t,datasetIndex:i,index:r})})),o}(t,e,i,o):[]}function q(t,e,i,n,s){const o=[],r="x"===i?"inXRange":"inYRange";let a=!1;return H(t,i,e,((t,n,l)=>{t[r](e[i],s)&&(o.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,s))})),n&&!a?[]:o}var U={evaluateInteractionItems:H,modes:{index(t,e,i,s){const o=(0,n.z)(e,t),r=i.axis||"x",a=i.includeInvisible||!1,l=i.intersect?z(t,o,r,s,a):$(t,o,r,!1,s,a),d=[];return l.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=l[0].index,i=t.data[e];i&&!i.skip&&d.push({element:i,datasetIndex:t.index,index:e})})),d):[]},dataset(t,e,i,s){const o=(0,n.z)(e,t),r=i.axis||"xy",a=i.includeInvisible||!1;let l=i.intersect?z(t,o,r,s,a):$(t,o,r,!1,s,a);if(l.length>0){const e=l[0].datasetIndex,i=t.getDatasetMeta(e).data;l=[];for(let t=0;t<i.length;++t)l.push({element:i[t],datasetIndex:e,index:t})}return l},point:(t,e,i,s)=>z(t,(0,n.z)(e,t),i.axis||"xy",s,i.includeInvisible||!1),nearest(t,e,i,s){const o=(0,n.z)(e,t),r=i.axis||"xy",a=i.includeInvisible||!1;return $(t,o,r,i.intersect,s,a)},x:(t,e,i,s)=>q(t,(0,n.z)(e,t),"x",i.intersect,s),y:(t,e,i,s)=>q(t,(0,n.z)(e,t),"y",i.intersect,s)}};const X=["left","top","right","bottom"];function G(t,e){return t.filter((t=>t.pos===e))}function Q(t,e){return t.filter((t=>-1===X.indexOf(t.pos)&&t.box.axis===e))}function J(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function Z(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!X.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,r,a;for(o=0,r=t.length;o<r;++o){a=t[o];const{fullSize:r}=a.box,l=i[a.stack],d=l&&a.stackWeight/l.weight;a.horizontal?(a.width=d?d*n:r&&e.availableWidth,a.height=s):(a.width=n,a.height=d?d*s:r&&e.availableHeight)}return i}function tt(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function et(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function it(t,e,i,s){const{pos:o,box:r}=i,a=t.maxPadding;if(!(0,n.i)(o)){i.size&&(t[o]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?r.height:r.width),i.size=e.size/e.count,t[o]+=i.size}r.getPadding&&et(a,r.getPadding());const l=Math.max(0,e.outerWidth-tt(a,t,"left","right")),d=Math.max(0,e.outerHeight-tt(a,t,"top","bottom")),c=l!==t.w,u=d!==t.h;return t.w=l,t.h=d,i.horizontal?{same:c,other:u}:{same:u,other:c}}function nt(t,e){const i=e.maxPadding;function n(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}return n(t?["left","right"]:["top","bottom"])}function st(t,e,i,n){const s=[];let o,r,a,l,d,c;for(o=0,r=t.length,d=0;o<r;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,nt(a.horizontal,e));const{same:r,other:u}=it(e,i,a,n);d|=r&&s.length,c=c||u,l.fullSize||s.push(a)}return d&&st(s,e,i,n)||c}function ot(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function rt(t,e,i,s){const o=i.padding;let{x:r,y:a}=e;for(const l of t){const t=l.box,d=s[l.stack]||{count:1,placed:0,weight:1},c=l.stackWeight/d.weight||1;if(l.horizontal){const s=e.w*c,r=d.size||t.height;(0,n.h)(d.start)&&(a=d.start),t.fullSize?ot(t,o.left,a,i.outerWidth-o.right-o.left,r):ot(t,e.left+d.placed,a,s,r),d.start=a,d.placed+=s,a=t.bottom}else{const s=e.h*c,a=d.size||t.width;(0,n.h)(d.start)&&(r=d.start),t.fullSize?ot(t,r,o.top,a,i.outerHeight-o.bottom-o.top):ot(t,r,e.top+d.placed,a,s),d.start=r,d.placed+=s,r=t.right}}e.x=r,e.y=a}var at={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const o=(0,n.E)(t.options.layout.padding),r=Math.max(e-o.width,0),a=Math.max(i-o.height,0),l=function(t){const e=function(t){const e=[];let i,n,s,o,r,a;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:r,stackWeight:a=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&o+r,stackWeight:a});return e}(t),i=J(e.filter((t=>t.box.fullSize)),!0),n=J(G(e,"left"),!0),s=J(G(e,"right")),o=J(G(e,"top"),!0),r=J(G(e,"bottom")),a=Q(e,"x"),l=Q(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:G(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(r).concat(a)}}(t.boxes),d=l.vertical,c=l.horizontal;(0,n.F)(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=d.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,h=Object.freeze({outerWidth:e,outerHeight:i,padding:o,availableWidth:r,availableHeight:a,vBoxMaxWidth:r/2/u,hBoxMaxHeight:a/2}),p=Object.assign({},o);et(p,(0,n.E)(s));const f=Object.assign({maxPadding:p,w:r,h:a,x:o.left,y:o.top},o),g=Z(d.concat(c),h);st(l.fullSize,f,h,g),st(d,f,h,g),st(c,f,h,g)&&st(d,f,h,g),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),rt(l.leftAndTop,f,h,g),f.x+=f.w,f.y+=f.h,rt(l.rightAndBottom,f,h,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},(0,n.F)(l.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class lt{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class dt extends lt{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const ct="$chartjs",ut={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ht=t=>null===t||""===t;const pt=!!n.K&&{passive:!0};function ft(t,e,i){t&&t.canvas&&t.canvas.removeEventListener(e,i,pt)}function gt(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function mt(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||gt(i.addedNodes,n),e=e&&!gt(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function vt(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||gt(i.removedNodes,n),e=e&&!gt(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const bt=new Map;let yt=0;function Ct(){const t=window.devicePixelRatio;t!==yt&&(yt=t,bt.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function _t(t,e,i){const s=t.canvas,o=s&&(0,n.I)(s);if(!o)return;const r=(0,n.L)(((t,e)=>{const n=o.clientWidth;i(t,e),n<o.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||r(i,n)}));return a.observe(o),function(t,e){bt.size||window.addEventListener("resize",Ct),bt.set(t,e)}(t,r),a}function xt(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){bt.delete(t),bt.size||window.removeEventListener("resize",Ct)}(t)}function Mt(t,e,i){const s=t.canvas,o=(0,n.L)((e=>{null!==t.ctx&&i(function(t,e){const i=ut[t.type]||t.type,{x:s,y:o}=(0,n.z)(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==o?o:null}}(e,t))}),t);return function(t,e,i){t&&t.addEventListener(e,i,pt)}(s,e,o),o}class wt extends lt{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),o=t.getAttribute("width");if(t[ct]={initial:{height:s,width:o,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ht(o)){const e=(0,n.J)(t,"width");void 0!==e&&(t.width=e)}if(ht(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=(0,n.J)(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[ct])return!1;const i=e[ct].initial;["height","width"].forEach((t=>{const s=i[t];(0,n.k)(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e[ct],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:mt,detach:vt,resize:_t}[e]||Mt;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];if(!n)return;({attach:xt,detach:xt,resize:xt}[e]||ft)(t,e,n),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return(0,n.G)(t,e,i,s)}isAttached(t){const e=(0,n.I)(t);return!(!e||!e.isConnected)}}function Rt(t){return!(0,n.M)()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?dt:wt}class At{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return(0,n.x)(this.x)&&(0,n.x)(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function Dt(t,e){const i=t.options.ticks,s=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),o=Math.min(i.maxTicksLimit||s,s),r=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],a=r.length,l=r[0],d=r[a-1],c=[];if(a>o)return function(t,e,i,n){let s,o=0,r=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===r&&(e.push(t[s]),o++,r=i[o*n])}(e,c,r,a/o),c;const u=function(t,e,i){const s=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),o=e.length/i;if(!s)return Math.max(o,1);const r=(0,n.N)(s);for(let t=0,e=r.length-1;t<e;t++){const e=r[t];if(e>o)return e}return Math.max(o,1)}(r,e,o);if(a>0){let t,i;const s=a>1?Math.round((d-l)/(a-1)):null;for(Tt(e,c,u,(0,n.k)(s)?0:l-s,l),t=0,i=a-1;t<i;t++)Tt(e,c,u,r[t],r[t+1]);return Tt(e,c,u,d,(0,n.k)(s)?e.length:d+s),c}return Tt(e,c,u),c}function Tt(t,e,i,s,o){const r=(0,n.v)(s,0),a=Math.min((0,n.v)(o,t.length),t.length);let l,d,c,u=0;for(i=Math.ceil(i),o&&(l=o-s,i=l/Math.floor(l/i)),c=r;c<0;)u++,c=Math.round(r+u*i);for(d=Math.max(r,0);d<a;d++)d===c&&(e.push(t[d]),u++,c=Math.round(r+u*i))}const St=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,kt=(t,e)=>Math.min(e||t,t);function Bt(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function Vt(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,r=t._endPixel,a=1e-6;let l,d=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(d-o,r-d):0===e?(t.getPixelForTick(1)-d)/2:(d-t.getPixelForTick(s-1))/2,d+=s<e?l:-l,d<o-a||d>r+a)))return d}function jt(t){return t.drawTicks?t.tickLength:0}function Et(t,e){if(!t.display)return 0;const i=(0,n.a0)(t.font,e),s=(0,n.E)(t.padding);return((0,n.b)(t.text)?t.text.length:1)*i.lineHeight+s.height}function Pt(t,e,i){let s=(0,n.a1)(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class Lt extends At{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=(0,n.O)(t,Number.POSITIVE_INFINITY),e=(0,n.O)(e,Number.NEGATIVE_INFINITY),i=(0,n.O)(i,Number.POSITIVE_INFINITY),s=(0,n.O)(s,Number.NEGATIVE_INFINITY),{min:(0,n.O)(t,i),max:(0,n.O)(e,s),minDefined:(0,n.g)(t),maxDefined:(0,n.g)(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:o,maxDefined:r}=this.getUserBounds();if(o&&r)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let n=0,l=a.length;n<l;++n)e=a[n].controller.getMinMax(this,t),o||(i=Math.min(i,e.min)),r||(s=Math.max(s,e.max));return i=r&&i>s?s:i,s=o&&i>s?i:s,{min:(0,n.O)(i,(0,n.O)(s,i)),max:(0,n.O)(s,(0,n.O)(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){(0,n.Q)(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:o,ticks:r}=this.options,a=r.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=(0,n.R)(this,o,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=a<this.ticks.length;this._convertTicksToLabels(l?Bt(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),r.display&&(r.autoSkip||"auto"===r.source)&&(this.ticks=Dt(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){(0,n.Q)(this.options.afterUpdate,[this])}beforeSetDimensions(){(0,n.Q)(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){(0,n.Q)(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),(0,n.Q)(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){(0,n.Q)(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,o;for(i=0,s=t.length;i<s;i++)o=t[i],o.label=(0,n.Q)(e.callback,[o.value,i,t],this)}afterTickToLabelConversion(){(0,n.Q)(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){(0,n.Q)(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=kt(this.ticks.length,t.ticks.maxTicksLimit),s=e.minRotation||0,o=e.maxRotation;let r,a,l,d=s;if(!this._isVisible()||!e.display||s>=o||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const c=this._getLabelSizes(),u=c.widest.width,h=c.highest.height,p=(0,n.S)(this.chart.width-u,0,this.maxWidth);r=t.offset?this.maxWidth/i:p/(i-1),u+6>r&&(r=p/(i-(t.offset?.5:1)),a=this.maxHeight-jt(t.grid)-e.padding-Et(t.title,this.chart.options.font),l=Math.sqrt(u*u+h*h),d=(0,n.U)(Math.min(Math.asin((0,n.S)((c.highest.height+6)/r,-1,1)),Math.asin((0,n.S)(a/l,-1,1))-Math.asin((0,n.S)(h/l,-1,1)))),d=Math.max(s,Math.min(o,d))),this.labelRotation=d}afterCalculateLabelRotation(){(0,n.Q)(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){(0,n.Q)(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:o}}=this,r=this._isVisible(),a=this.isHorizontal();if(r){const r=Et(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=jt(o)+r):(t.height=this.maxHeight,t.width=jt(o)+r),i.display&&this.ticks.length){const{first:e,last:s,widest:o,highest:r}=this._getLabelSizes(),l=2*i.padding,d=(0,n.t)(this.labelRotation),c=Math.cos(d),u=Math.sin(d);if(a){const e=i.mirror?0:u*o.width+c*r.height;t.height=Math.min(this.maxHeight,t.height+e+l)}else{const e=i.mirror?0:c*o.width+u*r.height;t.width=Math.min(this.maxWidth,t.width+e+l)}this._calculatePadding(e,s,u,c)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,d=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,u=0;a?l?(c=n*t.width,u=i*e.height):(c=i*t.height,u=n*e.width):"start"===s?u=e.width:"end"===s?c=t.width:"inner"!==s&&(c=t.width/2,u=e.width/2),this.paddingLeft=Math.max((c-r+o)*this.width/(this.width-r),0),this.paddingRight=Math.max((u-d+o)*this.width/(this.width-d),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){(0,n.Q)(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)(0,n.k)(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Bt(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:s,_longestTextCache:o}=this,r=[],a=[],l=Math.floor(e/kt(e,i));let d,c,u,h,p,f,g,m,v,b,y,C=0,_=0;for(d=0;d<e;d+=l){if(h=t[d].label,p=this._resolveTickFontOptions(d),s.font=f=p.string,g=o[f]=o[f]||{data:{},gc:[]},m=p.lineHeight,v=b=0,(0,n.k)(h)||(0,n.b)(h)){if((0,n.b)(h))for(c=0,u=h.length;c<u;++c)y=h[c],(0,n.k)(y)||(0,n.b)(y)||(v=(0,n.V)(s,g.data,g.gc,v,y),b+=m)}else v=(0,n.V)(s,g.data,g.gc,v,h),b=m;r.push(v),a.push(b),C=Math.max(v,C),_=Math.max(b,_)}!function(t,e){(0,n.F)(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(o,e);const x=r.indexOf(C),M=a.indexOf(_),w=t=>({width:r[t]||0,height:a[t]||0});return{first:w(0),last:w(e-1),widest:w(x),highest:w(M),widths:r,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return(0,n.W)(this._alignToPixels?(0,n.X)(this.chart,e,0):e)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return(0,n.j)(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=(i=this.chart.getContext(),s=this,(0,n.j)(i,{scale:s,type:"scale"})));var i,s}_tickSize(){const t=this.options.ticks,e=(0,n.t)(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),o=this._getLabelSizes(),r=t.autoSkipPadding||0,a=o?o.widest.width+r:0,l=o?o.highest.height+r:0;return this.isHorizontal()?l*i>a*s?a/i:l/s:l*s<a*i?l/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:o,position:r,border:a}=s,l=o.offset,d=this.isHorizontal(),c=this.ticks.length+(l?1:0),u=jt(o),h=[],p=a.setContext(this.getContext()),f=p.display?p.width:0,g=f/2,m=function(t){return(0,n.X)(i,t,f)};let v,b,y,C,_,x,M,w,R,A,D,T;if("top"===r)v=m(this.bottom),x=this.bottom-u,w=v-g,A=m(t.top)+g,T=t.bottom;else if("bottom"===r)v=m(this.top),A=t.top,T=m(t.bottom)-g,x=v+g,w=this.top+u;else if("left"===r)v=m(this.right),_=this.right-u,M=v-g,R=m(t.left)+g,D=t.right;else if("right"===r)v=m(this.left),R=t.left,D=m(t.right)-g,_=v+g,M=this.left+u;else if("x"===e){if("center"===r)v=m((t.top+t.bottom)/2+.5);else if((0,n.i)(r)){const t=Object.keys(r)[0],e=r[t];v=m(this.chart.scales[t].getPixelForValue(e))}A=t.top,T=t.bottom,x=v+g,w=x+u}else if("y"===e){if("center"===r)v=m((t.left+t.right)/2);else if((0,n.i)(r)){const t=Object.keys(r)[0],e=r[t];v=m(this.chart.scales[t].getPixelForValue(e))}_=v-g,M=_-u,R=t.left,D=t.right}const S=(0,n.v)(s.ticks.maxTicksLimit,c),k=Math.max(1,Math.ceil(c/S));for(b=0;b<c;b+=k){const t=this.getContext(b),e=o.setContext(t),s=a.setContext(t),r=e.lineWidth,c=e.color,u=s.dash||[],p=s.dashOffset,f=e.tickWidth,g=e.tickColor,m=e.tickBorderDash||[],v=e.tickBorderDashOffset;y=Vt(this,b,l),void 0!==y&&(C=(0,n.X)(i,y,r),d?_=M=R=D=C:x=w=A=T=C,h.push({tx1:_,ty1:x,tx2:M,ty2:w,x1:R,y1:A,x2:D,y2:T,width:r,color:c,borderDash:u,borderDashOffset:p,tickWidth:f,tickColor:g,tickBorderDash:m,tickBorderDashOffset:v}))}return this._ticksLength=c,this._borderValue=v,h}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:o}=i,r=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:d,padding:c,mirror:u}=o,h=jt(i.grid),p=h+c,f=u?-c:p,g=-(0,n.t)(this.labelRotation),m=[];let v,b,y,C,_,x,M,w,R,A,D,T,S="middle";if("top"===s)x=this.bottom-f,M=this._getXAxisLabelAlignment();else if("bottom"===s)x=this.top+f,M=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(h);M=t.textAlign,_=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(h);M=t.textAlign,_=t.x}else if("x"===e){if("center"===s)x=(t.top+t.bottom)/2+p;else if((0,n.i)(s)){const t=Object.keys(s)[0],e=s[t];x=this.chart.scales[t].getPixelForValue(e)+p}M=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)_=(t.left+t.right)/2-p;else if((0,n.i)(s)){const t=Object.keys(s)[0],e=s[t];_=this.chart.scales[t].getPixelForValue(e)}M=this._getYAxisLabelAlignment(h).textAlign}"y"===e&&("start"===l?S="top":"end"===l&&(S="bottom"));const k=this._getLabelSizes();for(v=0,b=a.length;v<b;++v){y=a[v],C=y.label;const t=o.setContext(this.getContext(v));w=this.getPixelForTick(v)+o.labelOffset,R=this._resolveTickFontOptions(v),A=R.lineHeight,D=(0,n.b)(C)?C.length:1;const e=D/2,i=t.color,l=t.textStrokeColor,c=t.textStrokeWidth;let h,p=M;if(r?(_=w,"inner"===M&&(p=v===b-1?this.options.reverse?"left":"right":0===v?this.options.reverse?"right":"left":"center"),T="top"===s?"near"===d||0!==g?-D*A+A/2:"center"===d?-k.highest.height/2-e*A+A:-k.highest.height+A/2:"near"===d||0!==g?A/2:"center"===d?k.highest.height/2-e*A:k.highest.height-D*A,u&&(T*=-1),0===g||t.showLabelBackdrop||(_+=A/2*Math.sin(g))):(x=w,T=(1-D)*A/2),t.showLabelBackdrop){const e=(0,n.E)(t.backdropPadding),i=k.heights[v],s=k.widths[v];let o=T-e.top,r=0-e.left;switch(S){case"middle":o-=i/2;break;case"bottom":o-=i}switch(M){case"center":r-=s/2;break;case"right":r-=s;break;case"inner":v===b-1?r-=s:v>0&&(r-=s/2)}h={left:r,top:o,width:s+e.width,height:i+e.height,color:t.backdropColor}}m.push({label:C,font:R,textOffset:T,options:{rotation:g,color:i,strokeColor:l,strokeWidth:c,textAlign:p,textBaseline:S,translation:[_,x],backdrop:h}})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-(0,n.t)(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+s,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));if(i>=0){return e.setContext(this.getContext(i)).lineWidth}return 0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const r=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:s}}=this,o=i.setContext(this.getContext()),r=i.display?o.width:0;if(!r)return;const a=s.setContext(this.getContext(0)).lineWidth,l=this._borderValue;let d,c,u,h;this.isHorizontal()?(d=(0,n.X)(t,this.left,r)-r/2,c=(0,n.X)(t,this.right,a)+a/2,u=h=l):(u=(0,n.X)(t,this.top,r)-r/2,h=(0,n.X)(t,this.bottom,a)+a/2,d=c=l),e.save(),e.lineWidth=o.width,e.strokeStyle=o.color,e.beginPath(),e.moveTo(d,u),e.lineTo(c,h),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&(0,n.Y)(e,i);const s=this.getLabelItems(t);for(const t of s){const i=t.options,s=t.font,o=t.label,r=t.textOffset;(0,n.Z)(e,o,0,r,s,i)}i&&(0,n.$)(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const o=(0,n.a0)(i.font),r=(0,n.E)(i.padding),a=i.align;let l=o.lineHeight/2;"bottom"===e||"center"===e||(0,n.i)(e)?(l+=r.bottom,(0,n.b)(i.text)&&(l+=o.lineHeight*(i.text.length-1))):l+=r.top;const{titleX:d,titleY:c,maxWidth:u,rotation:h}=function(t,e,i,s){const{top:o,left:r,bottom:a,right:l,chart:d}=t,{chartArea:c,scales:u}=d;let h,p,f,g=0;const m=a-o,v=l-r;if(t.isHorizontal()){if(p=(0,n.a2)(s,r,l),(0,n.i)(i)){const t=Object.keys(i)[0],n=i[t];f=u[t].getPixelForValue(n)+m-e}else f="center"===i?(c.bottom+c.top)/2+m-e:St(t,i,e);h=l-r}else{if((0,n.i)(i)){const t=Object.keys(i)[0],n=i[t];p=u[t].getPixelForValue(n)-v+e}else p="center"===i?(c.left+c.right)/2-v+e:St(t,i,e);f=(0,n.a2)(s,a,o),g="left"===i?-n.H:n.H}return{titleX:p,titleY:f,maxWidth:h,rotation:g}}(this,l,e,a);(0,n.Z)(t,i.text,0,0,o,{color:i.color,maxWidth:u,rotation:h,textAlign:Pt(a,e,s),textBaseline:"middle",translation:[d,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=(0,n.v)(t.grid&&t.grid.z,-1),s=(0,n.v)(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Lt.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){const e=this.options.ticks.setContext(this.getContext(t));return(0,n.a0)(e.font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ot{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,o=t.id,r=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in s||(s[o]=t,function(t,e,i){const s=(0,n.a4)(Object.create(null),[i?n.d.get(i):{},n.d.get(e),t.defaults]);n.d.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),o=s.pop(),r=[t].concat(s).join("."),a=e[i].split("."),l=a.pop(),d=a.join(".");n.d.route(r,o,d,l)}))}(e,t.defaultRoutes);t.descriptors&&n.d.describe(e,t.descriptors)}(t,r,i),this.override&&n.d.override(t.id,t.overrides)),r}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in n.d[s]&&(delete n.d[s][i],this.override&&delete n.a3[i])}}class It{constructor(){this.controllers=new Ot(_,"datasets",!0),this.elements=new Ot(At,"elements"),this.plugins=new Ot(Object,"plugins"),this.scales=new Ot(Lt,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):(0,n.F)(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const s=(0,n.a5)(t);(0,n.Q)(i["before"+s],[],i),e[t](i),(0,n.Q)(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var Ft=new It;class Nt{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const o of t){const t=o.plugin,r=t[i],a=[e,s,o.options];if(!1===(0,n.Q)(r,a,t)&&s.cancelable)return!1}return!0}invalidate(){(0,n.k)(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=(0,n.v)(i.options&&i.options.plugins,{}),o=function(t){const e={},i=[],n=Object.keys(Ft.plugins.items);for(let t=0;t<n.length;t++)i.push(Ft.getPlugin(n[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const n=s[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},n,s){const o=[],r=t.getContext();for(const a of e){const e=a.id,l=Yt(n[e],s);null!==l&&o.push({plugin:a,options:Kt(t.config,{plugin:a,local:i[e]},l,r)})}return o}(t,o,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function Yt(t,e){return e||!1!==t?!0===t?{}:t:null}function Kt(t,{plugin:e,local:i},n,s){const o=t.pluginScopeKeys(e),r=t.getOptionScopes(n,o);return i&&e.defaults&&r.push(e.defaults),t.createResolver(r,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Ht(t,e){const i=n.d.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function zt(t){if("x"===t||"y"===t||"r"===t)return t}function Wt(t,...e){if(zt(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&zt(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function $t(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function qt(t,e){const i=n.a3[t.type]||{scales:{}},s=e.scales||{},o=Ht(t.type,e),r=Object.create(null);return Object.keys(s).forEach((e=>{const a=s[e];if(!(0,n.i)(a))return console.error(`Invalid scale configuration for scale: ${e}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const l=Wt(e,a,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return $t(t,"x",i[0])||$t(t,"y",i[0])}return{}}(e,t),n.d.scales[a.type]),d=function(t,e){return t===e?"_index_":"_value_"}(l,o),c=i.scales||{};r[e]=(0,n.ab)(Object.create(null),[{axis:l},a,c[l],c[d]])})),t.data.datasets.forEach((i=>{const o=i.type||t.type,a=i.indexAxis||Ht(o,e),l=(n.a3[o]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),o=i[e+"AxisID"]||e;r[o]=r[o]||Object.create(null),(0,n.ab)(r[o],[{axis:e},s[o],l[t]])}))})),Object.keys(r).forEach((t=>{const e=r[t];(0,n.ab)(e,[n.d.scales[e.type],n.d.scale])})),r}function Ut(t){const e=t.options||(t.options={});e.plugins=(0,n.v)(e.plugins,{}),e.scales=qt(t,e)}function Xt(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Gt=new Map,Qt=new Set;function Jt(t,e){let i=Gt.get(t);return i||(i=e(),Gt.set(t,i),Qt.add(i)),i}const Zt=(t,e,i)=>{const s=(0,n.f)(e,i);void 0!==s&&t.add(s)};class te{constructor(t){this._config=function(t){return(t=t||{}).data=Xt(t.data),Ut(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Xt(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Ut(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Jt(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Jt(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Jt(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Jt(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:s,type:o}=this,r=this._cachedScopes(t,i),a=r.get(e);if(a)return a;const l=new Set;e.forEach((e=>{t&&(l.add(t),e.forEach((e=>Zt(l,t,e)))),e.forEach((t=>Zt(l,s,t))),e.forEach((t=>Zt(l,n.a3[o]||{},t))),e.forEach((t=>Zt(l,n.d,t))),e.forEach((t=>Zt(l,n.a6,t)))}));const d=Array.from(l);return 0===d.length&&d.push(Object.create(null)),Qt.has(e)&&r.set(e,d),d}chartOptionScopes(){const{options:t,type:e}=this;return[t,n.a3[e]||{},n.d.datasets[e]||{},{type:e},n.d,n.a6]}resolveNamedOptions(t,e,i,s=[""]){const o={$shared:!0},{resolver:r,subPrefixes:a}=ee(this._resolverCache,t,s);let l=r;if(function(t,e){const{isScriptable:i,isIndexable:s}=(0,n.aa)(t);for(const o of e){const e=i(o),r=s(o),a=(r||e)&&t[o];if(e&&((0,n.a7)(a)||ie(a))||r&&(0,n.b)(a))return!0}return!1}(r,e)){o.$shared=!1,i=(0,n.a7)(i)?i():i;const e=this.createResolver(t,i,a);l=(0,n.a8)(r,i,e)}for(const t of e)o[t]=l[t];return o}createResolver(t,e,i=[""],s){const{resolver:o}=ee(this._resolverCache,t,i);return(0,n.i)(e)?(0,n.a8)(o,e,void 0,s):o}}function ee(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const o=i.join();let r=s.get(o);if(!r){r={resolver:(0,n.a9)(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(o,r)}return r}const ie=t=>(0,n.i)(t)&&Object.getOwnPropertyNames(t).some((e=>(0,n.a7)(t[e])));const ne=["top","bottom","left","right","chartArea"];function se(t,e){return"top"===t||"bottom"===t||-1===ne.indexOf(t)&&"x"===e}function oe(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function re(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),(0,n.Q)(i&&i.onComplete,[t],e)}function ae(t){const e=t.chart,i=e.options.animation;(0,n.Q)(i&&i.onProgress,[t],e)}function le(t){return(0,n.M)()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const de={},ce=t=>{const e=le(t);return Object.values(de).filter((t=>t.canvas===e)).pop()};function ue(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}function he(t,e,i){return t.options.clip?t[i]:e[i]}class pe{static defaults=n.d;static instances=de;static overrides=n.a3;static registry=Ft;static version="4.4.2";static getChart=ce;static register(...t){Ft.add(...t),fe()}static unregister(...t){Ft.remove(...t),fe()}constructor(t,e){const i=this.config=new te(e),s=le(t),r=ce(s);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const a=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||Rt(s)),this.platform.updateConfig(i);const l=this.platform.acquireContext(s,a.aspectRatio),d=l&&l.canvas,c=d&&d.height,u=d&&d.width;this.id=(0,n.ac)(),this.ctx=l,this.canvas=d,this.width=u,this.height=c,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Nt,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=(0,n.ad)((t=>this.update(t)),a.resizeDelay||0),this._dataChanges=[],de[this.id]=this,l&&d?(o.listen(this,"complete",re),o.listen(this,"progress",ae),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:o}=this;return(0,n.k)(t)?e&&o?o:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Ft}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():(0,n.ae)(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return(0,n.af)(this.canvas,this.ctx),this}stop(){return o.stop(this),this}resize(t,e){o.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,o=i.maintainAspectRatio&&this.aspectRatio,r=this.platform.getMaximumSize(s,t,e,o),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=r.width,this.height=r.height,this._aspectRatio=this.aspectRatio,(0,n.ae)(this,a,!0)&&(this.notifyPlugins("resize",{size:r}),(0,n.Q)(i.onResize,[this,r],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const t=this.options.scales||{};(0,n.F)(t,((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let o=[];e&&(o=o.concat(Object.keys(e).map((t=>{const i=e[t],n=Wt(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),(0,n.F)(o,(e=>{const o=e.options,r=o.id,a=Wt(r,o),l=(0,n.v)(o.type,e.dtype);void 0!==o.position&&se(o.position,a)===se(e.dposition)||(o.position=e.dposition),s[r]=!0;let d=null;if(r in i&&i[r].type===l)d=i[r];else{d=new(Ft.getScale(l))({id:r,type:l,ctx:this.ctx,chart:this}),i[d.id]=d}d.init(o,t)})),(0,n.F)(s,((t,e)=>{t||delete i[e]})),(0,n.F)(i,(t=>{at.configure(this,t,t.options),at.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(oe("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let o=this.getDatasetMeta(i);const r=s.type||this.config.type;if(o.type&&o.type!==r&&(this._destroyDatasetMeta(i),o=this.getDatasetMeta(i)),o.type=r,o.indexAxis=s.indexAxis||Ht(r,this.options),o.order=s.order||0,o.index=i,o.label=""+s.label,o.visible=this.isDatasetVisible(i),o.controller)o.controller.updateIndex(i),o.controller.linkScales();else{const e=Ft.getController(r),{datasetElementType:s,dataElementType:a}=n.d.datasets[r];Object.assign(e,{dataElementType:Ft.getElement(a),datasetElementType:s&&Ft.getElement(s)}),o.controller=new e(this,i),t.push(o.controller)}}return this._updateMetasets(),t}_resetElements(){(0,n.F)(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let r=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===o.indexOf(e);e.buildOrUpdateElements(i),r=Math.max(+e.getMaxOverflow(),r)}r=this._minPadding=i.layout.autoPadding?r:0,this._updateLayout(r),s||(0,n.F)(o,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(oe("z","_idx"));const{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){(0,n.F)(this.scales,(t=>{at.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);(0,n.ag)(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e){ue(t,n,"_removeElements"===i?-s:s)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!(0,n.ag)(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;at.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],(0,n.F)(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,(0,n.a7)(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(o.has(this)?this.attached&&!o.running(this)&&o.start(this):(this.draw(),re({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,o=function(t,e){const{xScale:i,yScale:n}=t;return i&&n?{left:he(i,e,"left"),right:he(i,e,"right"),top:he(n,e,"top"),bottom:he(n,e,"bottom")}:e}(t,this.chartArea),r={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",r)&&(s&&(0,n.Y)(e,{left:!1===i.left?0:o.left-i.left,right:!1===i.right?this.width:o.right+i.right,top:!1===i.top?0:o.top-i.top,bottom:!1===i.bottom?this.height:o.bottom+i.bottom}),t.controller.draw(),s&&(0,n.$)(e),r.cancelable=!1,this.notifyPlugins("afterDatasetDraw",r))}isPointInArea(t){return(0,n.C)(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const s=U.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=(0,n.j)(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",o=this.getDatasetMeta(t),r=o.controller._resolveAnimations(void 0,s);(0,n.h)(e)?(o.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),r.update(o,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),o.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),(0,n.af)(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete de[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};(0,n.F)(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const r=()=>{n("attach",r),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",r)},e.isAttached(this.canvas)?r():o()}unbindEvents(){(0,n.F)(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},(0,n.F)(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,r,a;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){o=t[r];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!(0,n.ah)(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),r=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),r.length&&n.mode&&this.updateHoverStyle(r,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:o}=this,r=e,a=this._getActiveElements(t,s,i,r),l=(0,n.ai)(t),d=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,l);i&&(this._lastEvent=null,(0,n.Q)(o.onHover,[t,a,this],this),l&&(0,n.Q)(o.onClick,[t,a,this],this));const c=!(0,n.ah)(a,s);return(c||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=d,c}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}function fe(){return(0,n.F)(pe.instances,(t=>t._plugins.invalidate()))}function ge(t,e,i,s){const o=(r=t.options.borderRadius,(0,n.ak)(r,["outerStart","outerEnd","innerStart","innerEnd"]));var r;const a=(i-e)/2,l=Math.min(a,s*e/2),d=t=>{const e=(i-Math.min(a,t))*s/2;return(0,n.S)(t,0,Math.min(a,e))};return{outerStart:d(o.outerStart),outerEnd:d(o.outerEnd),innerStart:(0,n.S)(o.innerStart,0,l),innerEnd:(0,n.S)(o.innerEnd,0,l)}}function me(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function ve(t,e,i,s,o,r){const{x:a,y:l,startAngle:d,pixelMargin:c,innerRadius:u}=e,h=Math.max(e.outerRadius+s+i-c,0),p=u>0?u+s+i+c:0;let f=0;const g=o-d;if(s){const t=((u>0?u-s:0)+(h>0?h-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const m=(g-Math.max(.001,g*h-i/n.P)/h)/2,v=d+m+f,b=o-m-f,{outerStart:y,outerEnd:C,innerStart:_,innerEnd:x}=ge(e,p,h,b-v),M=h-y,w=h-C,R=v+y/M,A=b-C/w,D=p+_,T=p+x,S=v+_/D,k=b-x/T;if(t.beginPath(),r){const e=(R+A)/2;if(t.arc(a,l,h,R,e),t.arc(a,l,h,e,A),C>0){const e=me(w,A,a,l);t.arc(e.x,e.y,C,A,b+n.H)}const i=me(T,b,a,l);if(t.lineTo(i.x,i.y),x>0){const e=me(T,k,a,l);t.arc(e.x,e.y,x,b+n.H,k+Math.PI)}const s=(b-x/p+(v+_/p))/2;if(t.arc(a,l,p,b-x/p,s,!0),t.arc(a,l,p,s,v+_/p,!0),_>0){const e=me(D,S,a,l);t.arc(e.x,e.y,_,S+Math.PI,v-n.H)}const o=me(M,v,a,l);if(t.lineTo(o.x,o.y),y>0){const e=me(M,R,a,l);t.arc(e.x,e.y,y,v-n.H,R)}}else{t.moveTo(a,l);const e=Math.cos(R)*h+a,i=Math.sin(R)*h+l;t.lineTo(e,i);const n=Math.cos(A)*h+a,s=Math.sin(A)*h+l;t.lineTo(n,s)}t.closePath()}function be(t,e,i,s,o){const{fullCircles:r,startAngle:a,circumference:l,options:d}=e,{borderWidth:c,borderJoinStyle:u,borderDash:h,borderDashOffset:p}=d,f="inner"===d.borderAlign;if(!c)return;t.setLineDash(h||[]),t.lineDashOffset=p,f?(t.lineWidth=2*c,t.lineJoin=u||"round"):(t.lineWidth=c,t.lineJoin=u||"bevel");let g=e.endAngle;if(r){ve(t,e,i,s,g,o);for(let e=0;e<r;++e)t.stroke();isNaN(l)||(g=a+(l%n.T||n.T))}f&&function(t,e,i){const{startAngle:s,pixelMargin:o,x:r,y:a,outerRadius:l,innerRadius:d}=e;let c=o/l;t.beginPath(),t.arc(r,a,l,s-c,i+c),d>o?(c=o/d,t.arc(r,a,d,i+c,s-c,!0)):t.arc(r,a,o,i+n.H,s-n.H),t.closePath(),t.clip()}(t,e,g),r||(ve(t,e,i,s,g,o),t.stroke())}class ye extends At{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:o,distance:r}=(0,n.D)(s,{x:t,y:e}),{startAngle:a,endAngle:l,innerRadius:d,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),h=(this.options.spacing+this.options.borderWidth)/2,p=(0,n.v)(u,l-a)>=n.T||(0,n.p)(o,a,l),f=(0,n.aj)(r,d+h,c+h);return p&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,d=(n+s)/2,c=(o+r+l+a)/2;return{x:e+Math.cos(d)*c,y:i+Math.sin(d)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/4,o=(e.spacing||0)/2,r=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>n.T?Math.floor(i/n.T):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);const l=s*(1-Math.sin(Math.min(n.P,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,s,o){const{fullCircles:r,startAngle:a,circumference:l}=e;let d=e.endAngle;if(r){ve(t,e,i,s,d,o);for(let e=0;e<r;++e)t.fill();isNaN(l)||(d=a+(l%n.T||n.T))}ve(t,e,i,s,d,o),t.fill()}(t,this,l,o,r),be(t,this,l,o,r),t.restore()}}function Ce(t,e,i=e){t.lineCap=(0,n.v)(i.borderCapStyle,e.borderCapStyle),t.setLineDash((0,n.v)(i.borderDash,e.borderDash)),t.lineDashOffset=(0,n.v)(i.borderDashOffset,e.borderDashOffset),t.lineJoin=(0,n.v)(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=(0,n.v)(i.borderWidth,e.borderWidth),t.strokeStyle=(0,n.v)(i.borderColor,e.borderColor)}function _e(t,e,i){t.lineTo(i.x,i.y)}function xe(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:r,end:a}=e,l=Math.max(s,r),d=Math.min(o,a),c=s<r&&o<r||s>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:d<l&&!c?n+d-l:d-l}}function Me(t,e,i,s){const{points:o,options:r}=e,{count:a,start:l,loop:d,ilen:c}=xe(o,i,s),u=function(t){return t.stepped?n.ar:t.tension||"monotone"===t.cubicInterpolationMode?n.as:_e}(r);let h,p,f,{move:g=!0,reverse:m}=s||{};for(h=0;h<=c;++h)p=o[(l+(m?c-h:h))%a],p.skip||(g?(t.moveTo(p.x,p.y),g=!1):u(t,f,p,m,r.stepped),f=p);return d&&(p=o[(l+(m?c:0))%a],u(t,f,p,m,r.stepped)),!!d}function we(t,e,i,n){const s=e.points,{count:o,start:r,ilen:a}=xe(s,i,n),{move:l=!0,reverse:d}=n||{};let c,u,h,p,f,g,m=0,v=0;const b=t=>(r+(d?a-t:t))%o,y=()=>{p!==f&&(t.lineTo(m,f),t.lineTo(m,p),t.lineTo(m,g))};for(l&&(u=s[b(0)],t.moveTo(u.x,u.y)),c=0;c<=a;++c){if(u=s[b(c)],u.skip)continue;const e=u.x,i=u.y,n=0|e;n===h?(i<p?p=i:i>f&&(f=i),m=(v*m+e)/++v):(y(),t.lineTo(e,i),h=n,v=0,p=f=i),g=i}y()}function Re(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?we:Me}const Ae="function"==typeof Path2D;function De(t,e,i,n){Ae&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),Ce(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,r=Re(e);for(const a of s)Ce(t,o,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}class Te extends At{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;(0,n.al)(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=(0,n.am)(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],o=this.points,r=(0,n.an)(this,{property:e,start:s,end:s});if(!r.length)return;const a=[],l=function(t){return t.stepped?n.ao:t.tension||"monotone"===t.cubicInterpolationMode?n.ap:n.aq}(i);let d,c;for(d=0,c=r.length;d<c;++d){const{start:n,end:c}=r[d],u=o[n],h=o[c];if(u===h){a.push(u);continue}const p=l(u,h,Math.abs((s-u[e])/(h[e]-u[e])),i.stepped);p[e]=t[e],a.push(p)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Re(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=Re(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const r of n)o&=s(t,this,r,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),De(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Se(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}class ke extends At{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Se(this,t,"x",e)}inYRange(t,e){return Se(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!(0,n.C)(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,(0,n.at)(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Be(t,e){const{x:i,y:n,base:s,width:o,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,d,c,u;return t.horizontal?(u=r/2,a=Math.min(i,s),l=Math.max(i,s),d=n-u,c=n+u):(u=o/2,a=i-u,l=i+u,d=Math.min(n,s),c=Math.max(n,s)),{left:a,top:d,right:l,bottom:c}}function Ve(t,e,i,s){return t?0:(0,n.S)(e,i,s)}function je(t){const e=Be(t),i=e.right-e.left,s=e.bottom-e.top,o=function(t,e,i){const s=t.options.borderWidth,o=t.borderSkipped,r=(0,n.av)(s);return{t:Ve(o.top,r.top,0,i),r:Ve(o.right,r.right,0,e),b:Ve(o.bottom,r.bottom,0,i),l:Ve(o.left,r.left,0,e)}}(t,i/2,s/2),r=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),o=t.options.borderRadius,r=(0,n.aw)(o),a=Math.min(e,i),l=t.borderSkipped,d=s||(0,n.i)(o);return{topLeft:Ve(!d||l.top||l.left,r.topLeft,0,a),topRight:Ve(!d||l.top||l.right,r.topRight,0,a),bottomLeft:Ve(!d||l.bottom||l.left,r.bottomLeft,0,a),bottomRight:Ve(!d||l.bottom||l.right,r.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:r},inner:{x:e.left+o.l,y:e.top+o.t,w:i-o.l-o.r,h:s-o.t-o.b,radius:{topLeft:Math.max(0,r.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,r.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,r.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,r.bottomRight-Math.max(o.b,o.r))}}}}function Ee(t,e,i,s){const o=null===e,r=null===i,a=t&&!(o&&r)&&Be(t,s);return a&&(o||(0,n.aj)(e,a.left,a.right))&&(r||(0,n.aj)(i,a.top,a.bottom))}function Pe(t,e){t.rect(e.x,e.y,e.w,e.h)}function Le(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,r=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+r,radius:t.radius}}class Oe extends At{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:o,outer:r}=je(this),a=(l=r.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?n.au:Pe;var l;t.save(),r.w===o.w&&r.h===o.h||(t.beginPath(),a(t,Le(r,e,o)),t.clip(),a(t,Le(o,-e,r)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Le(o,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Ee(this,t,e,i)}inXRange(t,e){return Ee(this,t,null,e)}inYRange(t,e){return Ee(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}var Ie=Object.freeze({__proto__:null,ArcElement:ye,BarElement:Oe,LineElement:Te,PointElement:ke});const Fe=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Ne=Fe.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function Ye(t){return Fe[t%Fe.length]}function Ke(t){return Ne[t%Ne.length]}function He(t){let e=0;return(i,n)=>{const s=t.getDatasetMeta(n).controller;s instanceof V?e=function(t,e){return t.backgroundColor=t.data.map((()=>Ye(e++))),e}(i,e):s instanceof E?e=function(t,e){return t.backgroundColor=t.data.map((()=>Ke(e++))),e}(i,e):s&&(e=function(t,e){return t.borderColor=Ye(e),t.backgroundColor=Ke(e),++e}(i,e))}}function ze(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var We={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:s}=t.config,{elements:o}=s;if(!i.forceOverride&&(ze(n)||(r=s)&&(r.borderColor||r.backgroundColor)||o&&ze(o)))return;var r;const a=He(t);n.forEach(a)}};function $e(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function qe(t){t.data.datasets.forEach((t=>{$e(t)}))}var Ue={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void qe(t);const s=t.width;t.data.datasets.forEach(((e,o)=>{const{_data:r,indexAxis:a}=e,l=t.getDatasetMeta(o),d=r||e.data;if("y"===(0,n.a)([a,t.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const c=t.scales[l.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let{start:u,count:h}=function(t,e){const i=e.length;let s,o=0;const{iScale:r}=t,{min:a,max:l,minDefined:d,maxDefined:c}=r.getUserBounds();return d&&(o=(0,n.S)((0,n.B)(e,r.axis,a).lo,0,i-1)),s=c?(0,n.S)((0,n.B)(e,r.axis,l).hi+1,o,i)-o:i-o,{start:o,count:s}}(l,d);if(h<=(i.threshold||4*s))return void $e(e);let p;switch((0,n.k)(r)&&(e._data=d,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":p=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(o-2);let l=0;const d=e+i-1;let c,u,h,p,f,g=e;for(r[l++]=t[g],c=0;c<o-2;c++){let n,s=0,o=0;const d=Math.floor((c+1)*a)+1+e,m=Math.min(Math.floor((c+2)*a)+1,i)+e,v=m-d;for(n=d;n<m;n++)s+=t[n].x,o+=t[n].y;s/=v,o/=v;const b=Math.floor(c*a)+1+e,y=Math.min(Math.floor((c+1)*a)+1,i)+e,{x:C,y:_}=t[g];for(h=p=-1,n=b;n<y;n++)p=.5*Math.abs((C-s)*(t[n].y-_)-(C-t[n].x)*(o-_)),p>h&&(h=p,u=t[n],f=n);r[l++]=u,g=f}return r[l++]=t[d],r}(d,u,h,s,i);break;case"min-max":p=function(t,e,i,s){let o,r,a,l,d,c,u,h,p,f,g=0,m=0;const v=[],b=e+i-1,y=t[e].x,C=t[b].x-y;for(o=e;o<e+i;++o){r=t[o],a=(r.x-y)/C*s,l=r.y;const e=0|a;if(e===d)l<p?(p=l,c=o):l>f&&(f=l,u=o),g=(m*g+r.x)/++m;else{const i=o-1;if(!(0,n.k)(c)&&!(0,n.k)(u)){const e=Math.min(c,u),n=Math.max(c,u);e!==h&&e!==i&&v.push({...t[e],x:g}),n!==h&&n!==i&&v.push({...t[n],x:g})}o>0&&i!==h&&v.push(t[i]),v.push(r),d=e,m=0,p=f=l,c=u=h=o}}return v}(d,u,h,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=p}))},destroy(t){qe(t)}};function Xe(t,e,i,s){if(s)return;let o=e[t],r=i[t];return"angle"===t&&(o=(0,n.ay)(o),r=(0,n.ay)(r)),{property:t,start:o,end:r}}function Ge(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Qe(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Je(t,e){let i=[],s=!1;return(0,n.b)(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Ge(t,e,s);const r=s[t],a=s[e];null!==n?(o.push({x:r.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:r.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new Te({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function Ze(t){return t&&!1!==t.fill}function ti(t,e,i){let s=t[e].fill;const o=[e];let r;if(!i)return s;for(;!1!==s&&-1===o.indexOf(s);){if(!(0,n.g)(s))return s;if(r=t[s],!r)return!1;if(r.visible)return s;o.push(s),s=r.fill}return!1}function ei(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=(0,n.v)(i&&i.target,i);void 0===s&&(s=!!e.backgroundColor);if(!1===s||null===s)return!1;if(!0===s)return"origin";return s}(t);if((0,n.i)(s))return!isNaN(s.value)&&s;let o=parseFloat(s);return(0,n.g)(o)&&Math.floor(o)===o?function(t,e,i,n){"-"!==t&&"+"!==t||(i=e+i);if(i===e||i<0||i>=n)return!1;return i}(s[0],e,o,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function ii(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:r,last:a,point:l}=ni(o,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function ni(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const o=s[i],r=t.segments,a=t.points;let l=!1,d=!1;for(let t=0;t<r.length;t++){const e=r[t],s=a[e.start][i],c=a[e.end][i];if((0,n.aj)(o,s,c)){l=o===s,d=o===c;break}}return{first:l,last:d,point:s}}class si{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:o,radius:r}=this;return e=e||{start:0,end:n.T},t.arc(s,o,r,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function oi(t){const{chart:e,fill:i,line:s}=t;if((0,n.g)(i))return function(t,e){const i=t.getDatasetMeta(e),n=i&&t.isDatasetVisible(e);return n?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,r=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);a.push(Je({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)ii(s,r[t],a)}return new Te({points:s,options:{}})}(t);if("shape"===i)return!0;const o=function(t){const e=t.scale||{};if(e.getPointPositionForValue)return function(t){const{scale:e,fill:i}=t,s=e.options,o=e.getLabels().length,r=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:(0,n.i)(t)?t.value:e.getBaseValue(),s}(i,e,r),l=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,r);return new si({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<o;++t)l.push(e.getPointPositionForValue(t,a));return l}(t);return function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:(0,n.i)(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if((0,n.g)(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return o instanceof si?o:Je(o,s)}function ri(t,e,i){const s=oi(e),{line:o,scale:r,axis:a}=e,l=o.options,d=l.fill,c=l.backgroundColor,{above:u=c,below:h=c}=d||{};s&&o.points.length&&((0,n.Y)(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==s&&(ai(t,n,r.top),li(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore(),t.save(),ai(t,n,r.bottom));li(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:o,target:s,above:u,below:h,area:i,scale:r,axis:a}),(0,n.$)(t))}function ai(t,e,i){const{segments:n,points:s}=e;let o=!0,r=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,d=s[n],c=s[Ge(n,l,s)];o?(t.moveTo(d.x,d.y),o=!1):(t.lineTo(d.x,i),t.lineTo(d.x,d.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function li(t,e){const{line:i,target:s,property:o,color:r,scale:a}=e,l=function(t,e,i){const s=t.segments,o=t.points,r=e.points,a=[];for(const t of s){let{start:s,end:l}=t;l=Ge(s,l,o);const d=Xe(i,o[s],o[l],t.loop);if(!e.segments){a.push({source:t,target:d,start:o[s],end:o[l]});continue}const c=(0,n.an)(e,d);for(const e of c){const s=Xe(i,r[e.start],r[e.end],e.loop),l=(0,n.ax)(t,o,s);for(const t of l)a.push({source:t,target:e,start:{[i]:Qe(d,s,"start",Math.max)},end:{[i]:Qe(d,s,"end",Math.min)}})}}return a}(i,s,o);for(const{source:e,target:n,start:d,end:c}of l){const{style:{backgroundColor:l=r}={}}=e,u=!0!==s;t.save(),t.fillStyle=l,di(t,a,u&&Xe(o,d,c)),t.beginPath();const h=!!i.pathSegment(t,e);let p;if(u){h?t.closePath():ci(t,s,c,o);const e=!!s.pathSegment(t,n,{move:h,reverse:!0});p=h&&e,p||ci(t,s,d,o)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function di(t,e,i){const{top:n,bottom:s}=e.chart.chartArea,{property:o,start:r,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(r,n,a-r,s-n),t.clip())}function ci(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}var ui={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,r,a,l;for(r=0;r<n;++r)o=t.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof Te&&(l={visible:t.isDatasetVisible(r),index:r,fill:ei(a,r,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,s.push(l);for(r=0;r<n;++r)l=s[r],l&&!1!==l.fill&&(l.fill=ti(s,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&ri(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;Ze(i)&&ri(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;Ze(n)&&"beforeDatasetDraw"===i.drawTime&&ri(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const hi=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class pi extends At{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=(0,n.Q)(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=(0,n.a0)(i.font),o=s.size,r=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=hi(i,o);let d,c;e.font=s.string,this.isHorizontal()?(d=this.maxWidth,c=this._fitRows(r,o,a,l)+10):(c=this.maxHeight,d=this._fitCols(r,s,a,l)+10),this.width=Math.min(d,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],d=n+r;let c=t;s.textAlign="left",s.textBaseline="middle";let u=-1,h=-d;return this.legendItems.forEach(((t,p)=>{const f=i+e/2+s.measureText(t.text).width;(0===p||l[l.length-1]+f+2*r>o)&&(c+=d,l[l.length-(p>0?0:1)]=0,h+=d,u++),a[p]={left:0,top:h,row:u,width:f,height:n},l[l.length-1]+=f+r})),c}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],d=o-t;let c=r,u=0,h=0,p=0,f=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,n,s){const o=function(t,e,i,n){let s=t.text;s&&"string"!=typeof s&&(s=s.reduce(((t,e)=>t.length>e.length?t:e)));return e+i.size/2+n.measureText(s).width}(n,t,e,i),r=function(t,e,i){let n=t;"string"!=typeof e.text&&(n=fi(e,i));return n}(s,n,e.lineHeight);return{itemWidth:o,itemHeight:r}}(i,e,s,t,n);o>0&&h+m+2*r>d&&(c+=u+r,l.push({width:u,height:h}),p+=u+r,f++,u=h=0),a[o]={left:p,top:h,col:f,width:g,height:m},u=Math.max(u,g),h+=m+r})),c+=u,l.push({width:u,height:h}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:o}}=this,r=(0,n.az)(o,this.left,this.width);if(this.isHorizontal()){let o=0,a=(0,n.a2)(i,this.left+s,this.right-this.lineWidths[o]);for(const l of e)o!==l.row&&(o=l.row,a=(0,n.a2)(i,this.left+s,this.right-this.lineWidths[o])),l.top+=this.top+t+s,l.left=r.leftForLtr(r.x(a),l.width),a+=l.width+s}else{let o=0,a=(0,n.a2)(i,this.top+t+s,this.bottom-this.columnSizes[o].height);for(const l of e)l.col!==o&&(o=l.col,a=(0,n.a2)(i,this.top+t+s,this.bottom-this.columnSizes[o].height)),l.top=a,l.left+=this.left+s,l.left=r.leftForLtr(r.x(l.left),l.width),a+=l.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;(0,n.Y)(t,this),this._draw(),(0,n.$)(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:o,labels:r}=t,a=n.d.color,l=(0,n.az)(t.rtl,this.left,this.width),d=(0,n.a0)(r.font),{padding:c}=r,u=d.size,h=u/2;let p;this.drawTitle(),s.textAlign=l.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=d.string;const{boxWidth:f,boxHeight:g,itemHeight:m}=hi(r,u),v=this.isHorizontal(),b=this._computeTitleHeight();p=v?{x:(0,n.a2)(o,this.left+c,this.right-i[0]),y:this.top+c+b,line:0}:{x:this.left+c,y:(0,n.a2)(o,this.top+b+c,this.bottom-e[0].height),line:0},(0,n.aA)(this.ctx,t.textDirection);const y=m+c;this.legendItems.forEach(((C,_)=>{s.strokeStyle=C.fontColor,s.fillStyle=C.fontColor;const x=s.measureText(C.text).width,M=l.textAlign(C.textAlign||(C.textAlign=r.textAlign)),w=f+h+x;let R=p.x,A=p.y;l.setWidth(this.width),v?_>0&&R+w+c>this.right&&(A=p.y+=y,p.line++,R=p.x=(0,n.a2)(o,this.left+c,this.right-i[p.line])):_>0&&A+y>this.bottom&&(R=p.x=R+e[p.line].width+c,p.line++,A=p.y=(0,n.a2)(o,this.top+b+c,this.bottom-e[p.line].height));if(function(t,e,i){if(isNaN(f)||f<=0||isNaN(g)||g<0)return;s.save();const o=(0,n.v)(i.lineWidth,1);if(s.fillStyle=(0,n.v)(i.fillStyle,a),s.lineCap=(0,n.v)(i.lineCap,"butt"),s.lineDashOffset=(0,n.v)(i.lineDashOffset,0),s.lineJoin=(0,n.v)(i.lineJoin,"miter"),s.lineWidth=o,s.strokeStyle=(0,n.v)(i.strokeStyle,a),s.setLineDash((0,n.v)(i.lineDash,[])),r.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:o},d=l.xPlus(t,f/2),c=e+h;(0,n.aD)(s,a,d,c,r.pointStyleWidth&&f)}else{const r=e+Math.max((u-g)/2,0),a=l.leftForLtr(t,f),d=(0,n.aw)(i.borderRadius);s.beginPath(),Object.values(d).some((t=>0!==t))?(0,n.au)(s,{x:a,y:r,w:f,h:g,radius:d}):s.rect(a,r,f,g),s.fill(),0!==o&&s.stroke()}s.restore()}(l.x(R),A,C),R=(0,n.aB)(M,R+f+h,v?R+w:this.right,t.rtl),function(t,e,i){(0,n.Z)(s,i.text,t,e+m/2,d,{strikethrough:i.hidden,textAlign:l.textAlign(i.textAlign)})}(l.x(R),A,C),v)p.x+=w+c;else if("string"!=typeof C.text){const t=d.lineHeight;p.y+=fi(C,t)+c}else p.y+=y})),(0,n.aC)(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=(0,n.a0)(e.font),s=(0,n.E)(e.padding);if(!e.display)return;const o=(0,n.az)(t.rtl,this.left,this.width),r=this.ctx,a=e.position,l=i.size/2,d=s.top+l;let c,u=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),c=this.top+d,u=(0,n.a2)(t.align,u,this.right-h);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=d+(0,n.a2)(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const p=(0,n.a2)(a,u,u+h);r.textAlign=o.textAlign((0,n.a1)(a)),r.textBaseline="middle",r.strokeStyle=e.color,r.fillStyle=e.color,r.font=i.string,(0,n.Z)(r,e.text,p,c,i)}_computeTitleHeight(){const t=this.options.title,e=(0,n.a0)(t.font),i=(0,n.E)(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,o;if((0,n.aj)(t,this.left,this.right)&&(0,n.aj)(e,this.top,this.bottom))for(o=this.legendHitBoxes,i=0;i<o.length;++i)if(s=o[i],(0,n.aj)(t,s.left,s.left+s.width)&&(0,n.aj)(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){if(("mousemove"===t||"mouseout"===t)&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const r=this._hoveredItem,a=(o=i,null!==(s=r)&&null!==o&&s.datasetIndex===o.datasetIndex&&s.index===o.index);r&&!a&&(0,n.Q)(e.onLeave,[t,r,this],this),this._hoveredItem=i,i&&!a&&(0,n.Q)(e.onHover,[t,i,this],this)}else i&&(0,n.Q)(e.onClick,[t,i,this],this);var s,o}}function fi(t,e){return e*(t.text?t.text.length:0)}var gi={id:"legend",_element:pi,start(t,e,i){const n=t.legend=new pi({ctx:t.ctx,options:i,chart:t});at.configure(t,n,i),at.addBox(t,n)},stop(t){at.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;at.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:o,color:r,useBorderRadius:a,borderRadius:l}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const d=t.controller.getStyle(i?0:void 0),c=(0,n.E)(d.borderWidth);return{text:e[t.index].label,fillStyle:d.backgroundColor,fontColor:r,hidden:!t.visible,lineCap:d.borderCapStyle,lineDash:d.borderDash,lineDashOffset:d.borderDashOffset,lineJoin:d.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:d.borderColor,pointStyle:s||d.pointStyle,rotation:d.rotation,textAlign:o||d.textAlign,borderRadius:a&&(l||d.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class mi extends At{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=(0,n.b)(i.text)?i.text.length:1;this._padding=(0,n.E)(i.padding);const o=s*(0,n.a0)(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:o,options:r}=this,a=r.align;let l,d,c,u=0;return this.isHorizontal()?(d=(0,n.a2)(a,i,o),c=e+t,l=o-i):("left"===r.position?(d=i+t,c=(0,n.a2)(a,s,e),u=-.5*n.P):(d=o-t,c=(0,n.a2)(a,e,s),u=.5*n.P),l=s-e),{titleX:d,titleY:c,maxWidth:l,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=(0,n.a0)(e.font),s=i.lineHeight/2+this._padding.top,{titleX:o,titleY:r,maxWidth:a,rotation:l}=this._drawArgs(s);(0,n.Z)(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:l,textAlign:(0,n.a1)(e.align),textBaseline:"middle",translation:[o,r]})}}var vi={id:"title",_element:mi,start(t,e,i){!function(t,e){const i=new mi({ctx:t.ctx,options:e,chart:t});at.configure(t,i,e),at.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;at.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;at.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const bi=new WeakMap;var yi={id:"subtitle",start(t,e,i){const n=new mi({ctx:t.ctx,options:i,chart:t});at.configure(t,n,i),at.addBox(t,n),bi.set(t,n)},stop(t){at.removeBox(t,bi.get(t)),bi.delete(t)},beforeUpdate(t,e,i){const n=bi.get(t);at.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Ci={average(t){if(!t.length)return!1;let e,i,n=new Set,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n.add(t.x),s+=t.y,++o}}return{x:[...n].reduce(((t,e)=>t+e))/n.size,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,s,o,r=e.x,a=e.y,l=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=s.getCenterPoint(),i=(0,n.aE)(e,t);i<l&&(l=i,o=s)}}if(o){const t=o.tooltipPosition();r=t.x,a=t.y}return{x:r,y:a}}};function _i(t,e){return e&&((0,n.b)(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function xi(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Mi(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:r,value:a}=o.getLabelAndValue(s);return{chart:t,label:r,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:a,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function wi(t,e){const i=t.chart.ctx,{body:s,footer:o,title:r}=t,{boxWidth:a,boxHeight:l}=e,d=(0,n.a0)(e.bodyFont),c=(0,n.a0)(e.titleFont),u=(0,n.a0)(e.footerFont),h=r.length,p=o.length,f=s.length,g=(0,n.E)(e.padding);let m=g.height,v=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);if(b+=t.beforeBody.length+t.afterBody.length,h&&(m+=h*c.lineHeight+(h-1)*e.titleSpacing+e.titleMarginBottom),b){m+=f*(e.displayColors?Math.max(l,d.lineHeight):d.lineHeight)+(b-f)*d.lineHeight+(b-1)*e.bodySpacing}p&&(m+=e.footerMarginTop+p*u.lineHeight+(p-1)*e.footerSpacing);let y=0;const C=function(t){v=Math.max(v,i.measureText(t).width+y)};return i.save(),i.font=c.string,(0,n.F)(t.title,C),i.font=d.string,(0,n.F)(t.beforeBody.concat(t.afterBody),C),y=e.displayColors?a+2+e.boxPadding:0,(0,n.F)(s,(t=>{(0,n.F)(t.before,C),(0,n.F)(t.lines,C),(0,n.F)(t.after,C)})),y=0,i.font=u.string,(0,n.F)(t.footer,C),i.restore(),v+=g.width,{width:v,height:m}}function Ri(t,e,i,n){const{x:s,width:o}=i,{width:r,chartArea:{left:a,right:l}}=t;let d="center";return"center"===n?d=s<=(a+l)/2?"left":"right":s<=o/2?d="left":s>=r-o/2&&(d="right"),function(t,e,i,n){const{x:s,width:o}=n,r=i.caretSize+i.caretPadding;return"left"===t&&s+o+r>e.width||"right"===t&&s-o-r<0||void 0}(d,t,e,i)&&(d="center"),d}function Ai(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Ri(t,e,i,n),yAlign:n}}function Di(t,e,i,s){const{caretSize:o,caretPadding:r,cornerRadius:a}=t,{xAlign:l,yAlign:d}=i,c=o+r,{topLeft:u,topRight:h,bottomLeft:p,bottomRight:f}=(0,n.aw)(a);let g=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,l);const m=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,d,c);return"center"===d?"left"===l?g+=c:"right"===l&&(g-=c):"left"===l?g-=Math.max(u,p)+o:"right"===l&&(g+=Math.max(h,f)+o),{x:(0,n.S)(g,0,s.width-e.width),y:(0,n.S)(m,0,s.height-e.height)}}function Ti(t,e,i){const s=(0,n.E)(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Si(t){return _i([],xi(t))}function ki(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const Bi={beforeTitle:n.aF,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:n.aF,beforeBody:n.aF,beforeLabel:n.aF,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return(0,n.k)(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:n.aF,afterBody:n.aF,beforeFooter:n.aF,footer:n.aF,afterFooter:n.aF};function Vi(t,e,i,n){const s=t[e].call(i,n);return void 0===s?Bi[e].call(i,n):s}class ji extends At{static positioners=Ci;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new d(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this,i=this._tooltipItems,(0,n.j)(t,{tooltip:e,tooltipItems:i,type:"tooltip"})));var t,e,i}getTitle(t,e){const{callbacks:i}=e,n=Vi(i,"beforeTitle",this,t),s=Vi(i,"title",this,t),o=Vi(i,"afterTitle",this,t);let r=[];return r=_i(r,xi(n)),r=_i(r,xi(s)),r=_i(r,xi(o)),r}getBeforeBody(t,e){return Si(Vi(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,s=[];return(0,n.F)(t,(t=>{const e={before:[],lines:[],after:[]},n=ki(i,t);_i(e.before,xi(Vi(n,"beforeLabel",this,t))),_i(e.lines,Vi(n,"label",this,t)),_i(e.after,xi(Vi(n,"afterLabel",this,t))),s.push(e)})),s}getAfterBody(t,e){return Si(Vi(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=Vi(i,"beforeFooter",this,t),s=Vi(i,"footer",this,t),o=Vi(i,"afterFooter",this,t);let r=[];return r=_i(r,xi(n)),r=_i(r,xi(s)),r=_i(r,xi(o)),r}_createItems(t){const e=this._active,i=this.chart.data,s=[],o=[],r=[];let a,l,d=[];for(a=0,l=e.length;a<l;++a)d.push(Mi(this.chart,e[a]));return t.filter&&(d=d.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(d=d.sort(((e,n)=>t.itemSort(e,n,i)))),(0,n.F)(d,(e=>{const i=ki(t.callbacks,e);s.push(Vi(i,"labelColor",this,e)),o.push(Vi(i,"labelPointStyle",this,e)),r.push(Vi(i,"labelTextColor",this,e))})),this.labelColors=s,this.labelPointStyles=o,this.labelTextColors=r,this.dataPoints=d,d}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=Ci[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=wi(this,i),r=Object.assign({},t,e),a=Ai(this.chart,i,r),l=Di(i,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:o}=this,{caretSize:r,cornerRadius:a}=i,{topLeft:l,topRight:d,bottomLeft:c,bottomRight:u}=(0,n.aw)(a),{x:h,y:p}=t,{width:f,height:g}=e;let m,v,b,y,C,_;return"center"===o?(C=p+g/2,"left"===s?(m=h,v=m-r,y=C+r,_=C-r):(m=h+f,v=m+r,y=C-r,_=C+r),b=m):(v="left"===s?h+Math.max(l,c)+r:"right"===s?h+f-Math.max(d,u)-r:this.caretX,"top"===o?(y=p,C=y-r,m=v-r,b=v+r):(y=p+g,C=y+r,m=v+r,b=v-r),_=y),{x1:m,x2:v,x3:b,y1:y,y2:C,y3:_}}drawTitle(t,e,i){const s=this.title,o=s.length;let r,a,l;if(o){const d=(0,n.az)(i.rtl,this.x,this.width);for(t.x=Ti(this,i.titleAlign,i),e.textAlign=d.textAlign(i.titleAlign),e.textBaseline="middle",r=(0,n.a0)(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=r.string,l=0;l<o;++l)e.fillText(s[l],d.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+a,l+1===o&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,o){const r=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:l,boxWidth:d}=o,c=(0,n.a0)(o.bodyFont),u=Ti(this,"left",o),h=s.x(u),p=l<c.lineHeight?(c.lineHeight-l)/2:0,f=e.y+p;if(o.usePointStyle){const e={radius:Math.min(d,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(h,d)+d/2,c=f+l/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,(0,n.at)(t,e,i,c),t.strokeStyle=r.borderColor,t.fillStyle=r.backgroundColor,(0,n.at)(t,e,i,c)}else{t.lineWidth=(0,n.i)(r.borderWidth)?Math.max(...Object.values(r.borderWidth)):r.borderWidth||1,t.strokeStyle=r.borderColor,t.setLineDash(r.borderDash||[]),t.lineDashOffset=r.borderDashOffset||0;const e=s.leftForLtr(h,d),i=s.leftForLtr(s.xPlus(h,1),d-2),a=(0,n.aw)(r.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=o.multiKeyBackground,(0,n.au)(t,{x:e,y:f,w:d,h:l,radius:a}),t.fill(),t.stroke(),t.fillStyle=r.backgroundColor,t.beginPath(),(0,n.au)(t,{x:i,y:f+1,w:d-2,h:l-2,radius:a}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(e,f,d,l),t.strokeRect(e,f,d,l),t.fillStyle=r.backgroundColor,t.fillRect(i,f+1,d-2,l-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:o,bodyAlign:r,displayColors:a,boxHeight:l,boxWidth:d,boxPadding:c}=i,u=(0,n.a0)(i.bodyFont);let h=u.lineHeight,p=0;const f=(0,n.az)(i.rtl,this.x,this.width),g=function(i){e.fillText(i,f.x(t.x+p),t.y+h/2),t.y+=h+o},m=f.textAlign(r);let v,b,y,C,_,x,M;for(e.textAlign=r,e.textBaseline="middle",e.font=u.string,t.x=Ti(this,m,i),e.fillStyle=i.bodyColor,(0,n.F)(this.beforeBody,g),p=a&&"right"!==m?"center"===r?d/2+c:d+2+c:0,C=0,x=s.length;C<x;++C){for(v=s[C],b=this.labelTextColors[C],e.fillStyle=b,(0,n.F)(v.before,g),y=v.lines,a&&y.length&&(this._drawColorBox(e,t,C,f,i),h=Math.max(u.lineHeight,l)),_=0,M=y.length;_<M;++_)g(y[_]),h=u.lineHeight;(0,n.F)(v.after,g)}p=0,h=u.lineHeight,(0,n.F)(this.afterBody,g),t.y-=o}drawFooter(t,e,i){const s=this.footer,o=s.length;let r,a;if(o){const l=(0,n.az)(i.rtl,this.x,this.width);for(t.x=Ti(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=l.textAlign(i.footerAlign),e.textBaseline="middle",r=(0,n.a0)(i.footerFont),e.fillStyle=i.footerColor,e.font=r.string,a=0;a<o;++a)e.fillText(s[a],l.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:o,yAlign:r}=this,{x:a,y:l}=t,{width:d,height:c}=i,{topLeft:u,topRight:h,bottomLeft:p,bottomRight:f}=(0,n.aw)(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+u,l),"top"===r&&this.drawCaret(t,e,i,s),e.lineTo(a+d-h,l),e.quadraticCurveTo(a+d,l,a+d,l+h),"center"===r&&"right"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+d,l+c-f),e.quadraticCurveTo(a+d,l+c,a+d-f,l+c),"bottom"===r&&this.drawCaret(t,e,i,s),e.lineTo(a+p,l+c),e.quadraticCurveTo(a,l+c,a,l+c-p),"center"===r&&"left"===o&&this.drawCaret(t,e,i,s),e.lineTo(a,l+u),e.quadraticCurveTo(a,l,a+u,l),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=Ci[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=wi(this,t),r=Object.assign({},i,this._size),a=Ai(e,t,r),l=Di(t,r,a,e);n._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},o={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const r=(0,n.E)(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(o,t,s,e),(0,n.aA)(t,e.textDirection),o.y+=r.top,this.drawTitle(o,t,e),this.drawBody(o,t,e),this.drawFooter(o,t,e),(0,n.aC)(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),o=!(0,n.ah)(i,s),r=this._positionChanged(s,e);(o||r)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,o=this._active||[],r=this._getActiveElements(t,o,e,i),a=this._positionChanged(r,t),l=e||!(0,n.ah)(r,o)||a;return l&&(this._active=r,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),l}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e.filter((t=>this.chart.data.datasets[t.datasetIndex]&&void 0!==this.chart.getDatasetMeta(t.datasetIndex).controller.getParsed(t.index)));const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=Ci[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}var Ei={id:"tooltip",_element:ji,positioners:Ci,afterInit(t,e,i){i&&(t.tooltip=new ji({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Bi},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Pi=Object.freeze({__proto__:null,Colors:We,Decimation:Ue,Filler:ui,Legend:gi,SubTitle:yi,Title:vi,Tooltip:Ei});function Li(t,e,i,n){const s=t.indexOf(e);if(-1===s)return((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n);return s!==t.lastIndexOf(e)?i:s}function Oi(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}class Ii extends Lt{static id="category";static defaults={ticks:{callback:Oi}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if((0,n.k)(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:(0,n.S)(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:Li(i,t,(0,n.v)(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return Oi.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Fi(t,e,{horizontal:i,minRotation:s}){const o=(0,n.t)(s),r=(i?Math.sin(o):Math.cos(o))||.001,a=.75*e*(""+t).length;return Math.min(e/r,a)}class Ni extends Lt{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return(0,n.k)(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:o}=this;const r=t=>s=e?s:t,a=t=>o=i?o:t;if(t){const t=(0,n.s)(s),e=(0,n.s)(o);t<0&&e<0?a(0):t>0&&e>0&&r(0)}if(s===o){let e=0===o?1:Math.abs(.05*o);a(o+e),t||r(s-e)}this.min=s,this.max=o}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:o,min:r,max:a,precision:l,count:d,maxTicks:c,maxDigits:u,includeBounds:h}=t,p=o||1,f=c-1,{min:g,max:m}=e,v=!(0,n.k)(r),b=!(0,n.k)(a),y=!(0,n.k)(d),C=(m-g)/(u+1);let _,x,M,w,R=(0,n.aH)((m-g)/f/p)*p;if(R<1e-14&&!v&&!b)return[{value:g},{value:m}];w=Math.ceil(m/R)-Math.floor(g/R),w>f&&(R=(0,n.aH)(w*R/f/p)*p),(0,n.k)(l)||(_=Math.pow(10,l),R=Math.ceil(R*_)/_),"ticks"===s?(x=Math.floor(g/R)*R,M=Math.ceil(m/R)*R):(x=g,M=m),v&&b&&o&&(0,n.aI)((a-r)/o,R/1e3)?(w=Math.round(Math.min((a-r)/R,c)),R=(a-r)/w,x=r,M=a):y?(x=v?r:x,M=b?a:M,w=d-1,R=(M-x)/w):(w=(M-x)/R,w=(0,n.aJ)(w,Math.round(w),R/1e3)?Math.round(w):Math.ceil(w));const A=Math.max((0,n.aK)(R),(0,n.aK)(x));_=Math.pow(10,(0,n.k)(l)?A:l),x=Math.round(x*_)/_,M=Math.round(M*_)/_;let D=0;for(v&&(h&&x!==r?(i.push({value:r}),x<r&&D++,(0,n.aJ)(Math.round((x+D*R)*_)/_,r,Fi(r,C,t))&&D++):x<r&&D++);D<w;++D){const t=Math.round((x+D*R)*_)/_;if(b&&t>a)break;i.push({value:t})}return b&&h&&M!==a?i.length&&(0,n.aJ)(i[i.length-1].value,a,Fi(a,C,t))?i[i.length-1].value=a:i.push({value:a}):b&&M!==a||i.push({value:M}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&(0,n.aG)(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return(0,n.o)(t,this.chart.options.locale,this.options.ticks.format)}}class Yi extends Ni{static id="linear";static defaults={ticks:{callback:n.aL.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=(0,n.g)(t)?t:0,this.max=(0,n.g)(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=(0,n.t)(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,o=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,o.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Ki=t=>Math.floor((0,n.aM)(t)),Hi=(t,e)=>Math.pow(10,Ki(t)+e);function zi(t){return 1===t/Math.pow(10,Ki(t))}function Wi(t,e,i){const n=Math.pow(10,i),s=Math.floor(t/n);return Math.ceil(e/n)-s}function $i(t,{min:e,max:i}){e=(0,n.O)(t.min,e);const s=[],o=Ki(e);let r=function(t,e){let i=Ki(e-t);for(;Wi(t,e,i)>10;)i++;for(;Wi(t,e,i)<10;)i--;return Math.min(i,Ki(t))}(e,i),a=r<0?Math.pow(10,Math.abs(r)):1;const l=Math.pow(10,r),d=o>r?Math.pow(10,o):0,c=Math.round((e-d)*a)/a,u=Math.floor((e-d)/l/10)*l*10;let h=Math.floor((c-u)/Math.pow(10,r)),p=(0,n.O)(t.min,Math.round((d+u+h*Math.pow(10,r))*a)/a);for(;p<i;)s.push({value:p,major:zi(p),significand:h}),h>=10?h=h<15?15:20:h++,h>=20&&(r++,h=2,a=r>=0?1:a),p=Math.round((d+u+h*Math.pow(10,r))*a)/a;const f=(0,n.O)(t.max,p);return s.push({value:f,major:zi(f),significand:h}),s}class qi extends Lt{static id="logarithmic";static defaults={ticks:{callback:n.aL.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Ni.prototype.parse.apply(this,[t,e]);if(0!==i)return(0,n.g)(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=(0,n.g)(t)?Math.max(0,t):null,this.max=(0,n.g)(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!(0,n.g)(this._userMin)&&(this.min=t===Hi(this.min,0)?Hi(this.min,-1):Hi(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const s=e=>i=t?i:e,o=t=>n=e?n:t;i===n&&(i<=0?(s(1),o(10)):(s(Hi(i,-1)),o(Hi(n,1)))),i<=0&&s(Hi(n,-1)),n<=0&&o(Hi(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=$i({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&(0,n.aG)(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":(0,n.o)(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=(0,n.aM)(t),this._valueRange=(0,n.aM)(this.max)-(0,n.aM)(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:((0,n.aM)(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Ui(t){const e=t.ticks;if(e.display&&t.display){const t=(0,n.E)(e.backdropPadding);return(0,n.v)(e.font&&e.font.size,n.d.font.size)+t.height}return 0}function Xi(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function Gi(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],o=[],r=t._pointLabels.length,a=t.options.pointLabels,l=a.centerPointLabels?n.P/r:0;for(let h=0;h<r;h++){const r=a.setContext(t.getPointLabelContext(h));o[h]=r.padding;const p=t.getPointPosition(h,t.drawingArea+o[h],l),f=(0,n.a0)(r.font),g=(d=t.ctx,c=f,u=t._pointLabels[h],u=(0,n.b)(u)?u:[u],{w:(0,n.aN)(d,c.string,u),h:u.length*c.lineHeight});s[h]=g;const m=(0,n.ay)(t.getIndexAngle(h)+l),v=Math.round((0,n.U)(m));Qi(i,e,m,Xi(v,p.x,g.w,0,180),Xi(v,p.y,g.h,90,270))}var d,c,u;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],o=t._pointLabels.length,r=t.options,{centerPointLabels:a,display:l}=r.pointLabels,d={extra:Ui(r)/2,additionalAngle:a?n.P/o:0};let c;for(let n=0;n<o;n++){d.padding=i[n],d.size=e[n];const o=Ji(t,n,d);s.push(o),"auto"===l&&(o.visible=Zi(o,c),o.visible&&(c=o))}return s}(t,s,o)}function Qi(t,e,i,n,s){const o=Math.abs(Math.sin(i)),r=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),s.start<e.t?(l=(e.t-s.start)/r,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function Ji(t,e,i){const s=t.drawingArea,{extra:o,additionalAngle:r,padding:a,size:l}=i,d=t.getPointPosition(e,s+o+a,r),c=Math.round((0,n.U)((0,n.ay)(d.angle+n.H))),u=function(t,e,i){90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e);return t}(d.y,l.h,c),h=function(t){if(0===t||180===t)return"center";if(t<180)return"left";return"right"}(c),p=function(t,e,i){"right"===i?t-=e:"center"===i&&(t-=e/2);return t}(d.x,l.w,h);return{visible:!0,x:d.x,y:u,textAlign:h,left:p,top:u,right:p+l.w,bottom:u+l.h}}function Zi(t,e){if(!e)return!0;const{left:i,top:s,right:o,bottom:r}=t;return!((0,n.C)({x:i,y:s},e)||(0,n.C)({x:i,y:r},e)||(0,n.C)({x:o,y:s},e)||(0,n.C)({x:o,y:r},e))}function tn(t,e,i){const{left:s,top:o,right:r,bottom:a}=i,{backdropColor:l}=e;if(!(0,n.k)(l)){const i=(0,n.aw)(e.borderRadius),d=(0,n.E)(e.backdropPadding);t.fillStyle=l;const c=s-d.left,u=o-d.top,h=r-s+d.width,p=a-o+d.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),(0,n.au)(t,{x:c,y:u,w:h,h:p,radius:i}),t.fill()):t.fillRect(c,u,h,p)}}function en(t,e,i,s){const{ctx:o}=t;if(i)o.arc(t.xCenter,t.yCenter,e,0,n.T);else{let i=t.getPointPosition(0,e);o.moveTo(i.x,i.y);for(let n=1;n<s;n++)i=t.getPointPosition(n,e),o.lineTo(i.x,i.y)}}class nn extends Ni{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:n.aL.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=(0,n.E)(Ui(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=(0,n.g)(t)&&!isNaN(t)?t:0,this.max=(0,n.g)(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Ui(this.options))}generateTickLabels(t){Ni.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=(0,n.Q)(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?Gi(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){const e=n.T/(this._pointLabels.length||1),i=this.options.startAngle||0;return(0,n.ay)(t*e+(0,n.t)(i))}getDistanceFromCenterForValue(t){if((0,n.k)(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if((0,n.k)(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return(0,n.j)(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-n.H+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),en(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s,border:o}=e,r=this._pointLabels.length;let a,l,d;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let o=e-1;o>=0;o--){const e=t._pointLabelItems[o];if(!e.visible)continue;const r=s.setContext(t.getPointLabelContext(o));tn(i,r,e);const a=(0,n.a0)(r.font),{x:l,y:d,textAlign:c}=e;(0,n.Z)(i,t._pointLabels[o],l,d+a.lineHeight/2,a,{color:r.color,textAlign:c,textBaseline:"middle"})}}(this,r),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e||0===e&&this.min<0){l=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),n=s.setContext(i),a=o.setContext(i);!function(t,e,i,n,s){const o=t.ctx,r=e.circular,{color:a,lineWidth:l}=e;!r&&!n||!a||!l||i<0||(o.save(),o.strokeStyle=a,o.lineWidth=l,o.setLineDash(s.dash),o.lineDashOffset=s.dashOffset,o.beginPath(),en(t,i,r,n),o.closePath(),o.stroke(),o.restore())}(this,n,l,r,a)}})),i.display){for(t.save(),a=r-1;a>=0;a--){const n=i.setContext(this.getPointLabelContext(a)),{color:s,lineWidth:o}=n;o&&s&&(t.lineWidth=o,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,l=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),d=this.getPointPosition(a,l),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(d.x,d.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let o,r;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&this.min>=0&&!e.reverse)return;const l=i.setContext(this.getContext(a)),d=(0,n.a0)(l.font);if(o=this.getDistanceFromCenterForValue(this.ticks[a].value),l.showLabelBackdrop){t.font=d.string,r=t.measureText(s.label).width,t.fillStyle=l.backdropColor;const e=(0,n.E)(l.backdropPadding);t.fillRect(-r/2-e.left,-o-d.size/2-e.top,r+e.width,d.size+e.height)}(0,n.Z)(t,s.label,0,-o,d,{color:l.color,strokeColor:l.textStrokeColor,strokeWidth:l.textStrokeWidth})})),t.restore()}drawTitle(){}}const sn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},on=Object.keys(sn);function rn(t,e){return t-e}function an(t,e){if((0,n.k)(e))return null;const i=t._adapter,{parser:s,round:o,isoWeekday:r}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),(0,n.g)(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(o&&(a="week"!==o||!(0,n.x)(r)&&!0!==r?i.startOf(a,o):i.startOf(a,"isoWeek",r)),+a)}function ln(t,e,i,n){const s=on.length;for(let o=on.indexOf(t);o<s-1;++o){const t=sn[on[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return on[o]}return on[s-1]}function dn(t,e,i){if(i){if(i.length){const{lo:s,hi:o}=(0,n.aP)(i,e);t[i[s]>=e?i[s]:i[o]]=!0}}else t[e]=!0}function cn(t,e,i){const n=[],s={},o=e.length;let r,a;for(r=0;r<o;++r)a=e[r],s[a]=r,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=o;a<=r;a=+s.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class un extends Lt{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),s=this._adapter=new Y._date(t.adapters.date);s.init(e),(0,n.ab)(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:an(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:o,minDefined:r,maxDefined:a}=this.getUserBounds();function l(t){r||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(o=Math.max(o,t.max))}r&&a||(l(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(this.getMinMax(!1))),s=(0,n.g)(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),o=(0,n.g)(o)&&!isNaN(o)?o:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,o-1),this.max=Math.max(s+1,o)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const o=this.min,r=this.max,a=(0,n.aO)(s,o,r);return this._unit=e.unit||(i.autoSkip?ln(e.minUnit,this.min,this.max,this._getLabelCapacity(o)):function(t,e,i,n,s){for(let o=on.length-1;o>=on.indexOf(i);o--){const i=on[o];if(sn[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return on[i?on.indexOf(i):0]}(this,a.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=on.indexOf(t)+1,i=on.length;e<i;++e)if(sn[on[e]].common)return on[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&a.reverse(),cn(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,s=0,o=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),o=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const r=t.length<3?.5:.25;s=(0,n.S)(s,0,r),o=(0,n.S)(o,0,r),this._offsets={start:s,end:o,factor:1/(s+1+o)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,o=s.time,r=o.unit||ln(o.minUnit,e,i,this._getLabelCapacity(e)),a=(0,n.v)(s.ticks.stepSize,1),l="week"===r&&o.isoWeekday,d=(0,n.x)(l)||!0===l,c={};let u,h,p=e;if(d&&(p=+t.startOf(p,"isoWeek",l)),p=+t.startOf(p,d?"day":r),t.diff(i,e,r)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+r);const f="data"===s.ticks.source&&this.getDataTimestamps();for(u=p,h=0;u<i;u=+t.add(u,a,r),h++)dn(c,u,f);return u!==i&&"ticks"!==s.bounds&&1!==h||dn(c,u,f),Object.keys(c).sort(rn).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,s=e||i[n];return this._adapter.format(t,s)}_tickFormatFunction(t,e,i,s){const o=this.options,r=o.ticks.callback;if(r)return(0,n.Q)(r,[t,e,i],this);const a=o.time.displayFormats,l=this._unit,d=this._majorUnit,c=l&&a[l],u=d&&a[d],h=i[e],p=d&&u&&h&&h.major;return this._adapter.format(t,s||(p?u:c))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=(0,n.t)(this.isHorizontal()?e.maxRotation:e.minRotation),o=Math.cos(s),r=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*o+a*r,h:i*r+a*o}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,cn(this,[t],this._majorUnit),n),o=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(an(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return(0,n._)(t.sort(rn))}}function hn(t,e,i){let s,o,r,a,l=0,d=t.length-1;i?(e>=t[l].pos&&e<=t[d].pos&&({lo:l,hi:d}=(0,n.B)(t,"pos",e)),({pos:s,time:r}=t[l]),({pos:o,time:a}=t[d])):(e>=t[l].time&&e<=t[d].time&&({lo:l,hi:d}=(0,n.B)(t,"time",e)),({time:s,pos:r}=t[l]),({time:o,pos:a}=t[d]));const c=o-s;return c?r+(a-r)*(e-s)/c:r}class pn extends un{static id="timeseries";static defaults=un.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=hn(e,this.min),this._tableRange=hn(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,r,a,l,d;for(o=0,r=t.length;o<r;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,r=n.length;o<r;++o)d=n[o+1],a=n[o-1],l=n[o],Math.round((d+a)/2)!==l&&s.push({time:l,pos:o/(r-1)});return s}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(hn(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return hn(this._table,i*this._tableRange+this._minPos,!0)}}var fn=Object.freeze({__proto__:null,CategoryScale:Ii,LinearScale:Yi,LogarithmicScale:qi,RadialLinearScale:nn,TimeScale:un,TimeSeriesScale:pn});const gn=[I,Ie,Pi,fn]},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/chart.js/dist/chunks/helpers.segment.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{$:()=>Gt,A:()=>at,B:()=>rt,C:()=>Ut,D:()=>Q,E:()=>ce,F:()=>g,G:()=>$e,H:()=>O,I:()=>Oe,J:()=>Xe,K:()=>Ue,L:()=>gt,M:()=>Le,N:()=>z,O:()=>c,P:()=>V,Q:()=>f,R:()=>pe,S:()=>it,T:()=>j,U:()=>X,V:()=>Kt,W:()=>nt,X:()=>zt,Y:()=>Xt,Z:()=>ee,_:()=>ht,a:()=>he,a$:()=>pt,a0:()=>ue,a1:()=>vt,a2:()=>bt,a3:()=>Pt,a4:()=>C,a5:()=>D,a6:()=>Lt,a7:()=>S,a8:()=>me,a9:()=>ge,aA:()=>ii,aB:()=>yt,aC:()=>ni,aD:()=>qt,aE:()=>J,aF:()=>s,aG:()=>q,aH:()=>H,aI:()=>$,aJ:()=>K,aK:()=>G,aL:()=>Et,aM:()=>N,aN:()=>Ht,aO:()=>lt,aP:()=>ot,aQ:()=>At,aR:()=>Tt,aS:()=>v,aT:()=>y,aU:()=>x,aV:()=>M,aW:()=>R,aX:()=>Yt,aY:()=>Ve,aZ:()=>je,a_:()=>Ne,aa:()=>ve,ab:()=>_,ac:()=>o,ad:()=>mt,ae:()=>qe,af:()=>Wt,ag:()=>k,ah:()=>m,ai:()=>B,aj:()=>st,ak:()=>ae,al:()=>Pe,am:()=>li,an:()=>ai,ao:()=>Qe,ap:()=>Je,aq:()=>Ge,ar:()=>Qt,as:()=>Jt,at:()=>$t,au:()=>ie,av:()=>le,aw:()=>de,ax:()=>ri,ay:()=>tt,az:()=>ei,b:()=>a,b0:()=>oe,b1:()=>E,b2:()=>P,b3:()=>L,b4:()=>I,b5:()=>F,b6:()=>Z,c:()=>Dt,d:()=>Nt,e:()=>Rt,f:()=>A,g:()=>d,h:()=>T,i:()=>l,j:()=>fe,k:()=>r,l:()=>ct,m:()=>h,n:()=>p,o:()=>Vt,p:()=>et,q:()=>Ct,r:()=>ft,s:()=>Y,t:()=>U,u:()=>ut,v:()=>u,w:()=>_t,x:()=>W,y:()=>Te,z:()=>ze});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/@kurkle/color/dist/color.esm.js");function s(){}const o=(()=>{let t=0;return()=>t++})();function r(t){return null==t}function a(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function l(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function d(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function c(t,e){return d(t)?t:e}function u(t,e){return void 0===t?e:t}const h=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:+t/e,p=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function f(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function g(t,e,i,n){let s,o,r;if(a(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(l(t))for(r=Object.keys(t),o=r.length,s=0;s<o;s++)e.call(i,t[r[s]],r[s])}function m(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function v(t){if(a(t))return t.map(v);if(l(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=v(t[i[s]]);return e}return t}function b(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function y(t,e,i,n){if(!b(t))return;const s=e[t],o=i[t];l(s)&&l(o)?C(s,o,n):e[t]=v(o)}function C(t,e,i){const n=a(e)?e:[e],s=n.length;if(!l(t))return t;const o=(i=i||{}).merger||y;let r;for(let e=0;e<s;++e){if(r=n[e],!l(r))continue;const s=Object.keys(r);for(let e=0,n=s.length;e<n;++e)o(s[e],t,r,i)}return t}function _(t,e){return C(t,e,{merger:x})}function x(t,e,i){if(!b(t))return;const n=e[t],s=i[t];l(n)&&l(s)?_(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=v(s))}function M(t,e,i,n){void 0!==e&&console.warn(t+': "'+i+'" is deprecated. Please use "'+n+'" instead')}const w={"":t=>t,x:t=>t.x,y:t=>t.y};function R(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}function A(t,e){const i=w[e]||(w[e]=function(t){const e=R(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function D(t){return t.charAt(0).toUpperCase()+t.slice(1)}const T=t=>void 0!==t,S=t=>"function"==typeof t,k=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};function B(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}const V=Math.PI,j=2*V,E=j+V,P=Number.POSITIVE_INFINITY,L=V/180,O=V/2,I=V/4,F=2*V/3,N=Math.log10,Y=Math.sign;function K(t,e,i){return Math.abs(t-e)<i}function H(t){const e=Math.round(t);t=K(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(N(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function z(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}function W(t){return!isNaN(parseFloat(t))&&isFinite(t)}function $(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}function q(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function U(t){return t*(V/180)}function X(t){return t*(180/V)}function G(t){if(!d(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Q(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*V&&(o+=j),{angle:o,distance:s}}function J(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Z(t,e){return(t-e+E)%j-V}function tt(t){return(t%j+j)%j}function et(t,e,i,n){const s=tt(t),o=tt(e),r=tt(i),a=tt(o-s),l=tt(r-s),d=tt(s-o),c=tt(s-r);return s===o||s===r||n&&o===r||a>l&&d<c}function it(t,e,i){return Math.max(e,Math.min(i,t))}function nt(t){return it(t,-32768,32767)}function st(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function ot(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const rt=(t,e,i,n)=>ot(t,i,n?n=>{const s=t[n][e];return s<i||s===i&&t[n+1][e]===i}:n=>t[n][e]<i),at=(t,e,i)=>ot(t,i,(n=>t[n][e]>=i));function lt(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}const dt=["push","pop","shift","splice","unshift"];function ct(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),dt.forEach((e=>{const i="_onData"+D(e),n=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const s=n.apply(this,e);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[i]&&t[i](...e)})),s}})})))}function ut(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(dt.forEach((e=>{delete t[e]})),delete t._chartjs)}function ht(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}function pt(t,e,i){return e+" "+t+"px "+i}const ft="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function gt(t,e){let i=[],n=!1;return function(...s){i=s,n||(n=!0,ft.call(window,(()=>{n=!1,t.apply(e,i)})))}}function mt(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}const vt=t=>"start"===t?"left":"end"===t?"right":"center",bt=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,yt=(t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e;function Ct(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:d,max:c,minDefined:u,maxDefined:h}=r.getUserBounds();u&&(s=it(Math.min(rt(a,l,d).lo,i?n:rt(e,l,r.getPixelForValue(d)).lo),0,n-1)),o=h?it(Math.max(rt(a,r.axis,c,!0).hi+1,i?0:rt(e,l,r.getPixelForValue(c),!0).hi+1),s,n)-s:n-s}return{start:s,count:o}}function _t(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}const xt=t=>0===t||1===t,Mt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*j/i),wt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*j/i)+1,Rt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*O),easeOutSine:t=>Math.sin(t*O),easeInOutSine:t=>-.5*(Math.cos(V*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>xt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>xt(t)?t:Mt(t,.075,.3),easeOutElastic:t=>xt(t)?t:wt(t,.075,.3),easeInOutElastic(t){const e=.1125;return xt(t)?t:t<.5?.5*Mt(2*t,e,.45):.5+.5*wt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Rt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*Rt.easeInBounce(2*t):.5*Rt.easeOutBounce(2*t-1)+.5};function At(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Dt(t){return At(t)?t:new n.Color(t)}function Tt(t){return At(t)?t:new n.Color(t).saturate(.5).darken(.1).hexString()}const St=["x","y","borderWidth","radius","tension"],kt=["color","borderColor","backgroundColor"];const Bt=new Map;function Vt(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=Bt.get(i);return n||(n=new Intl.NumberFormat(t,e),Bt.set(i,n)),n}(e,i).format(t)}const jt={values:t=>a(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let s,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(s="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const r=N(Math.abs(o)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Vt(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(N(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?jt.numeric.call(this,t,e,i):""}};var Et={formatters:jt};const Pt=Object.create(null),Lt=Object.create(null);function Ot(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function It(t,e,i){return"string"==typeof e?C(Ot(t,e),i):C(Ot(t,""),e)}class Ft{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Tt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Tt(e.borderColor),this.hoverColor=(t,e)=>Tt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return It(this,t,e)}get(t){return Ot(this,t)}describe(t,e){return It(Lt,t,e)}override(t,e){return It(Pt,t,e)}route(t,e,i,n){const s=Ot(this,t),o=Ot(this,i),r="_"+e;Object.defineProperties(s,{[r]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=o[n];return l(t)?Object.assign({},e,t):u(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var Nt=new Ft({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:kt},numbers:{type:"number",properties:St}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Et.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Yt(t){return!t||r(t.size)||r(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function Kt(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function Ht(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let r=0;const l=i.length;let d,c,u,h,p;for(d=0;d<l;d++)if(h=i[d],null==h||a(h)){if(a(h))for(c=0,u=h.length;c<u;c++)p=h[c],null==p||a(p)||(r=Kt(t,s,o,r,p))}else r=Kt(t,s,o,r,h);t.restore();const f=o.length/2;if(f>i.length){for(d=0;d<f;d++)delete s[o[d]];o.splice(0,f)}return r}function zt(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function Wt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function $t(t,e,i,n){qt(t,e,i,n,null)}function qt(t,e,i,n,s){let o,r,a,l,d,c,u,h;const p=e.pointStyle,f=e.rotation,g=e.radius;let m=(f||0)*L;if(p&&"object"==typeof p&&(o=p.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(p,-p.width/2,-p.height/2,p.width,p.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),p){default:s?t.ellipse(i,n,s/2,g,0,0,j):t.arc(i,n,g,0,j),t.closePath();break;case"triangle":c=s?s/2:g,t.moveTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=F,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=F,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),t.closePath();break;case"rectRounded":d=.516*g,l=g-d,r=Math.cos(m+I)*l,u=Math.cos(m+I)*(s?s/2-d:l),a=Math.sin(m+I)*l,h=Math.sin(m+I)*(s?s/2-d:l),t.arc(i-u,n-a,d,m-V,m-O),t.arc(i+h,n-r,d,m-O,m),t.arc(i+u,n+a,d,m,m+O),t.arc(i-h,n+r,d,m+O,m+V),t.closePath();break;case"rect":if(!f){l=Math.SQRT1_2*g,c=s?s/2:l,t.rect(i-c,n-l,2*c,2*l);break}m+=I;case"rectRot":u=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,h=Math.sin(m)*(s?s/2:g),t.moveTo(i-u,n-a),t.lineTo(i+h,n-r),t.lineTo(i+u,n+a),t.lineTo(i-h,n+r),t.closePath();break;case"crossRot":m+=I;case"cross":u=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,h=Math.sin(m)*(s?s/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+h,n-r),t.lineTo(i-h,n+r);break;case"star":u=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,h=Math.sin(m)*(s?s/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+h,n-r),t.lineTo(i-h,n+r),m+=I,u=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,h=Math.sin(m)*(s?s/2:g),t.moveTo(i-u,n-a),t.lineTo(i+u,n+a),t.moveTo(i+h,n-r),t.lineTo(i-h,n+r);break;case"line":r=s?s/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(s?s/2:g),n+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function Ut(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Xt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Gt(t){t.restore()}function Qt(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Jt(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Zt(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),r=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,d=i+o.actualBoundingBoxDescent,c=s.strikethrough?(l+d)/2:d;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(r,c),t.lineTo(a,c),t.stroke()}}function te(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function ee(t,e,i,n,s,o={}){const l=a(e)?e:[e],d=o.strokeWidth>0&&""!==o.strokeColor;let c,u;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),r(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),c=0;c<l.length;++c)u=l[c],o.backdrop&&te(t,o.backdrop),d&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),r(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(u,i,n,o.maxWidth)),t.fillText(u,i,n,o.maxWidth),Zt(t,i,n,u,o),n+=Number(s.lineHeight);t.restore()}function ie(t,e){const{x:i,y:n,w:s,h:o,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,1.5*V,V,!0),t.lineTo(i,n+o-r.bottomLeft),t.arc(i+r.bottomLeft,n+o-r.bottomLeft,r.bottomLeft,V,O,!0),t.lineTo(i+s-r.bottomRight,n+o),t.arc(i+s-r.bottomRight,n+o-r.bottomRight,r.bottomRight,O,0,!0),t.lineTo(i+s,n+r.topRight),t.arc(i+s-r.topRight,n+r.topRight,r.topRight,0,-O,!0),t.lineTo(i+r.topLeft,n)}const ne=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,se=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function oe(t,e){const i=(""+t).match(ne);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const re=t=>+t||0;function ae(t,e){const i={},n=l(e),s=n?Object.keys(e):e,o=l(t)?n?i=>u(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=re(o(t));return i}function le(t){return ae(t,{top:"y",right:"x",bottom:"y",left:"x"})}function de(t){return ae(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ce(t){const e=le(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ue(t,e){t=t||{},e=e||Nt.font;let i=u(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=u(t.style,e.style);n&&!(""+n).match(se)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const s={family:u(t.family,e.family),lineHeight:oe(u(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:u(t.weight,e.weight),string:""};return s.string=Yt(s),s}function he(t,e,i,n){let s,o,r,l=!0;for(s=0,o=t.length;s<o;++s)if(r=t[s],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),l=!1),void 0!==i&&a(r)&&(r=r[i%r.length],l=!1),void 0!==r))return n&&!l&&(n.cacheable=!1),r}function pe(t,e,i){const{min:n,max:s}=t,o=p(e,(s-n)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(n,-Math.abs(o)),max:r(s,o)}}function fe(t,e){return Object.assign(Object.create(t),e)}function ge(t,e=[""],i,n,s=(()=>t[0])){const o=i||t;void 0===n&&(n=Ae("_fallback",t));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:n,_getTarget:s,override:i=>ge([i,...t],e,o,n)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>Ce(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=Ae(be(o,t),i),void 0!==s)return ye(t,s)?we(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>De(t).includes(e),ownKeys:t=>De(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function me(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:ve(t,n),setContext:e=>me(t,e,i,n),override:s=>me(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>Ce(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:r}=t;let d=n[e];S(d)&&r.isScriptable(e)&&(d=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(o,r||n);a.delete(t),ye(t,l)&&(l=we(s._scopes,s,t,l));return l}(e,d,t,i));a(d)&&d.length&&(d=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_descriptors:a}=i;if(void 0!==o.index&&n(t))return e[o.index%e.length];if(l(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=we(n,s,t,l);e.push(me(i,o,r&&r[t],a))}}return e}(e,d,t,r.isIndexable));ye(e,d)&&(d=me(d,s,o&&o[e],r));return d}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function ve(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:S(i)?i:()=>i,isIndexable:S(n)?n:()=>n}}const be=(t,e)=>t?t+D(e):e,ye=(t,e)=>l(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Ce(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function _e(t,e,i){return S(t)?t(e,i):t}const xe=(t,e)=>!0===t?e:"string"==typeof t?A(e,t):void 0;function Me(t,e,i,n,s){for(const o of e){const e=xe(i,o);if(e){t.add(e);const o=_e(e._fallback,i,s);if(void 0!==o&&o!==i&&o!==n)return o}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function we(t,e,i,n){const s=e._rootScopes,o=_e(e._fallback,i,n),r=[...t,...s],d=new Set;d.add(n);let c=Re(d,r,i,o||i,n);return null!==c&&((void 0===o||o===i||(c=Re(d,r,o,c,n),null!==c))&&ge(Array.from(d),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];if(a(s)&&l(i))return i;return s||{}}(e,i,n))))}function Re(t,e,i,n,s){for(;i;)i=Me(t,e,i,n,s);return i}function Ae(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function De(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Te(t,e,i,n){const{iScale:s}=t,{key:o="r"}=this._parsing,r=new Array(n);let a,l,d,c;for(a=0,l=n;a<l;++a)d=a+i,c=e[d],r[a]={r:s.parse(A(c,o),d)};return r}const Se=Number.EPSILON||1e-14,ke=(t,e)=>e<t.length&&!t[e].skip&&t[e],Be=t=>"x"===t?"y":"x";function Ve(t,e,i,n){const s=t.skip?e:t,o=e,r=i.skip?e:i,a=J(o,s),l=J(r,o);let d=a/(a+l),c=l/(a+l);d=isNaN(d)?0:d,c=isNaN(c)?0:c;const u=n*d,h=n*c;return{previous:{x:o.x-u*(r.x-s.x),y:o.y-u*(r.y-s.y)},next:{x:o.x+h*(r.x-s.x),y:o.y+h*(r.y-s.y)}}}function je(t,e="x"){const i=Be(e),n=t.length,s=Array(n).fill(0),o=Array(n);let r,a,l,d=ke(t,0);for(r=0;r<n;++r)if(a=l,l=d,d=ke(t,r+1),l){if(d){const t=d[e]-l[e];s[r]=0!==t?(d[i]-l[i])/t:0}o[r]=a?d?Y(s[r-1])!==Y(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(t,e,i){const n=t.length;let s,o,r,a,l,d=ke(t,0);for(let c=0;c<n-1;++c)l=d,d=ke(t,c+1),l&&d&&(K(e[c],0,Se)?i[c]=i[c+1]=0:(s=i[c]/e[c],o=i[c+1]/e[c],a=Math.pow(s,2)+Math.pow(o,2),a<=9||(r=3/Math.sqrt(a),i[c]=s*r*e[c],i[c+1]=o*r*e[c])))}(t,s,o),function(t,e,i="x"){const n=Be(i),s=t.length;let o,r,a,l=ke(t,0);for(let d=0;d<s;++d){if(r=a,a=l,l=ke(t,d+1),!a)continue;const s=a[i],c=a[n];r&&(o=(s-r[i])/3,a[`cp1${i}`]=s-o,a[`cp1${n}`]=c-o*e[d]),l&&(o=(l[i]-s)/3,a[`cp2${i}`]=s+o,a[`cp2${n}`]=c+o*e[d])}}(t,o,e)}function Ee(t,e,i){return Math.max(Math.min(t,i),e)}function Pe(t,e,i,n,s){let o,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)je(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,r=t.length;o<r;++o)a=t[o],l=Ve(i,a,t[Math.min(o+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,s,o,r,a=Ut(t[0],e);for(i=0,n=t.length;i<n;++i)r=o,o=a,a=i<n-1&&Ut(t[i+1],e),o&&(s=t[i],r&&(s.cp1x=Ee(s.cp1x,e.left,e.right),s.cp1y=Ee(s.cp1y,e.top,e.bottom)),a&&(s.cp2x=Ee(s.cp2x,e.left,e.right),s.cp2y=Ee(s.cp2y,e.top,e.bottom)))}(t,i)}function Le(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Oe(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ie(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const Fe=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);function Ne(t,e){return Fe(t).getPropertyValue(e)}const Ye=["top","right","bottom","left"];function Ke(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=Ye[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const He=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function ze(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,s=Fe(i),o="border-box"===s.boxSizing,r=Ke(s,"padding"),a=Ke(s,"border","width"),{x:l,y:d,box:c}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:s,offsetY:o}=n;let r,a,l=!1;if(He(s,o,t.target))r=s,a=o;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,i),u=r.left+(c&&a.left),h=r.top+(c&&a.top);let{width:p,height:f}=e;return o&&(p-=r.width+a.width,f-=r.height+a.height),{x:Math.round((l-u)/p*i.width/n),y:Math.round((d-h)/f*i.height/n)}}const We=t=>Math.round(10*t)/10;function $e(t,e,i,n){const s=Fe(t),o=Ke(s,"margin"),r=Ie(s.maxWidth,t,"clientWidth")||P,a=Ie(s.maxHeight,t,"clientHeight")||P,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=Oe(t);if(o){const t=o.getBoundingClientRect(),r=Fe(o),a=Ke(r,"border","width"),l=Ke(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=Ie(r.maxWidth,o,"clientWidth"),s=Ie(r.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||P,maxHeight:s||P}}(t,e,i);let{width:d,height:c}=l;if("content-box"===s.boxSizing){const t=Ke(s,"border","width"),e=Ke(s,"padding");d-=e.width+t.width,c-=e.height+t.height}d=Math.max(0,d-o.width),c=Math.max(0,n?d/n:c-o.height),d=We(Math.min(d,r,l.maxWidth)),c=We(Math.min(c,a,l.maxHeight)),d&&!c&&(c=We(d/2));return(void 0!==e||void 0!==i)&&n&&l.height&&c>l.height&&(c=l.height,d=We(Math.floor(c*n))),{width:d,height:c}}function qe(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||r.height!==s||r.width!==o)&&(t.currentDevicePixelRatio=n,r.height=s,r.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const Ue=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};Le()&&(window.addEventListener("test",null,e),window.removeEventListener("test",null,e))}catch(t){}return t}();function Xe(t,e){const i=Ne(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Ge(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Qe(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function Je(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},r=Ge(t,s,i),a=Ge(s,o,i),l=Ge(o,e,i),d=Ge(r,a,i),c=Ge(a,l,i);return Ge(d,c,i)}const Ze=function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}},ti=function(){return{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}};function ei(t,e,i){return t?Ze(e,i):ti()}function ii(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function ni(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function si(t){return"angle"===t?{between:et,compare:Z,normalize:tt}:{between:st,compare:(t,e)=>t-e,normalize:t=>t}}function oi({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function ri(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,r=e.length,{compare:a,between:l,normalize:d}=si(n),{start:c,end:u,loop:h,style:p}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:r,normalize:a}=si(n),l=e.length;let d,c,{start:u,end:h,loop:p}=t;if(p){for(u+=l,h+=l,d=0,c=l;d<c&&r(a(e[u%l][n]),s,o);++d)u--,h--;u%=l,h%=l}return h<u&&(h+=l),{start:u,end:h,loop:p,style:t.style}}(t,e,i),f=[];let g,m,v,b=!1,y=null;const C=()=>b||l(s,v,g)&&0!==a(s,v),_=()=>!b||0===a(o,g)||l(o,v,g);for(let t=c,i=c;t<=u;++t)m=e[t%r],m.skip||(g=d(m[n]),g!==v&&(b=l(g,s,o),null===y&&C()&&(y=0===a(g,s)?t:i),null!==y&&_()&&(f.push(oi({start:y,end:t,loop:h,count:r,style:p})),y=null),i=t,v=g));return null!==y&&f.push(oi({start:y,end:u,loop:h,count:r,style:p})),f}function ai(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=ri(n[s],t.points,e);o.length&&i.push(...o)}return i}function li(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:r,end:a}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);if(!0===n)return di(t,[{start:r,end:a,loop:o}],i,e);return di(t,function(t,e,i,n){const s=t.length,o=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(r-1)%s,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&o.push({start:e%s,end:a%s,loop:n}),o}(i,r,a<r?a+s:a,!!t._fullLoop&&0===r&&a===s-1),i,e)}function di(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=ci(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=i.length,d=[];let c=o,u=e[0].start,h=u;function p(t,e,n,s){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(d.push({start:t%l,end:e%l,loop:n,style:s}),c=s,u=e%l)}}for(const t of e){u=a?u:t.start;let e,o=i[u%l];for(h=u+1;h<=t.end;h++){const a=i[h%l];e=ci(n.setContext(fe(s,{type:"segment",p0:o,p1:a,p0DataIndex:(h-1)%l,p1DataIndex:h%l,datasetIndex:r}))),ui(e,c)&&p(u,h-1,t.loop,c),o=a,c=e}u<h-1&&p(u,h-1,t.loop,c)}return d}(t,e,i,n):e}function ci(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function ui(t,e){if(!e)return!1;const i=[],n=function(t,e){return At(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/datatables.net-bs5/js/dataTables.bootstrap5.mjs":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js"),s=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/datatables.net/js/dataTables.mjs");let o=n;o.extend(!0,s.default.defaults,{renderer:"bootstrap"}),o.extend(!0,s.default.ext.classes,{container:"dt-container dt-bootstrap5",search:{input:"form-control form-control-sm"},length:{select:"form-select form-select-sm"},processing:{container:"dt-processing card"}}),s.default.ext.renderer.pagingButton.bootstrap=function(t,e,i,n,s){var r=["dt-paging-button","page-item"];n&&r.push("active"),s&&r.push("disabled");var a=o("<li>").addClass(r.join(" "));return{display:a,clicker:o("<a>",{href:s?null:"#",class:"page-link"}).html(i).appendTo(a)}},s.default.ext.renderer.pagingContainer.bootstrap=function(t,e){return o("<ul/>").addClass("pagination").append(e)},s.default.ext.renderer.layout.bootstrap=function(t,e,i){var n=o("<div/>",{class:i.full?"row mt-2 justify-content-md-center":"row mt-2 justify-content-between"}).appendTo(e);o.each(i,(function(t,e){var i;i=e.table?"col-12":"start"===t?"col-md-auto me-auto":"end"===t?"col-md-auto ms-auto":"col-md",o("<div/>",{id:e.id||null,class:i+" "+(e.className||"")}).append(e.contents).appendTo(n)}))};const r=s.default},"../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/datatables.net/js/dataTables.mjs":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>Ke});var n,s,o,r,a=i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery/dist/jquery.js"),l=function(t,e){if(l.factory(t,e))return l;if(this instanceof l)return a(t).DataTable(e);var i=this,n=void 0===(e=t),o=this.length;return n&&(e={}),this.api=function(){return new s(this)},this.each((function(){var t,r=o>1?Gt({},e,!0):e,d=0,c=this.getAttribute("id"),u=!1,h=l.defaults,p=a(this);if("table"==this.nodeName.toLowerCase()){a(this).trigger("options.dt",r),E(h),P(h.column),V(h,h,!0),V(h.column,h.column,!0),V(h,a.extend(r,p.data()),!0);var f=l.settings;for(d=0,t=f.length;d<t;d++){var g=f[d];if(g.nTable==this||g.nTHead&&g.nTHead.parentNode==this||g.nTFoot&&g.nTFoot.parentNode==this){var m=void 0!==r.bRetrieve?r.bRetrieve:h.bRetrieve,v=void 0!==r.bDestroy?r.bDestroy:h.bDestroy;if(n||m)return g.oInstance;if(v){new l.Api(g).destroy();break}return void Ut(g,0,"Cannot reinitialise DataTable",3)}if(g.sTableId==this.id){f.splice(d,1);break}}null!==c&&""!==c||(c="DataTables_Table_"+l.ext._unique++,this.id=c);var b=a.extend(!0,{},l.models.oSettings,{sDestroyWidth:p[0].style.width,sInstance:c,sTableId:c,colgroup:a("<colgroup>").prependTo(this),fastData:function(t,e,i){return G(b,t,e,i)}});b.nTable=this,b.oInit=r,f.push(b),b.api=new s(b),b.oInstance=1===i.length?i:p.dataTable(),E(r),r.aLengthMenu&&!r.iDisplayLength&&(r.iDisplayLength=Array.isArray(r.aLengthMenu[0])?r.aLengthMenu[0][0]:a.isPlainObject(r.aLengthMenu[0])?r.aLengthMenu[0].value:r.aLengthMenu[0]),r=Gt(a.extend(!0,{},h),r),Xt(b.oFeatures,r,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),Xt(b,r,["ajax","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","iStateDuration","bSortCellsTop","iTabIndex","sDom","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId","caption","layout",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"]]),Xt(b.oScroll,r,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),Xt(b.oLanguage,r,"fnInfoCallback"),Jt(b,"aoDrawCallback",r.fnDrawCallback),Jt(b,"aoStateSaveParams",r.fnStateSaveParams),Jt(b,"aoStateLoadParams",r.fnStateLoadParams),Jt(b,"aoStateLoaded",r.fnStateLoaded),Jt(b,"aoRowCallback",r.fnRowCallback),Jt(b,"aoRowCreatedCallback",r.fnCreatedRow),Jt(b,"aoHeaderCallback",r.fnHeaderCallback),Jt(b,"aoFooterCallback",r.fnFooterCallback),Jt(b,"aoInitComplete",r.fnInitComplete),Jt(b,"aoPreDrawCallback",r.fnPreDrawCallback),b.rowIdFn=et(r.rowId),function(t){if(!l.__browser){var e={};l.__browser=e;var i=a("<div/>").css({position:"fixed",top:0,left:-1*window.pageXOffset,height:1,width:1,overflow:"hidden"}).append(a("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(a("<div/>").css({width:"100%",height:10}))).appendTo("body"),n=i.children(),s=n.children();e.barWidth=n[0].offsetWidth-n[0].clientWidth,e.bScrollbarLeft=1!==Math.round(s.offset().left),i.remove()}a.extend(t.oBrowser,l.__browser),t.oScroll.iBarWidth=l.__browser.barWidth}(b);var y=b.oClasses;a.extend(y,l.ext.classes,r.oClasses),p.addClass(y.table),b.oFeatures.bPaginate||(r.iDisplayStart=0),void 0===b.iInitDisplayStart&&(b.iInitDisplayStart=r.iDisplayStart,b._iDisplayStart=r.iDisplayStart);var C=b.oLanguage;a.extend(!0,C,r.oLanguage),C.sUrl?(a.ajax({dataType:"json",url:C.sUrl,success:function(t){V(h.oLanguage,t),a.extend(!0,C,t,b.oInit.oLanguage),Zt(b,null,"i18n",[b],!0),Tt(b)},error:function(){Ut(b,0,"i18n file loading error",21),Tt(b)}}),u=!0):Zt(b,null,"i18n",[b]);var _=[],x=this.getElementsByTagName("thead"),M=yt(b,x[0]);if(r.aoColumns)_=r.aoColumns;else if(M.length)for(d=0,t=M[0].length;d<t;d++)_.push(null);for(d=0,t=_.length;d<t;d++)L(b);!function(t,e,i,n,s){var o,r,l,d,c,u,h,p=t.aoColumns;if(i)for(o=0,r=i.length;o<r;o++)i[o]&&i[o].name&&(p[o].sName=i[o].name);if(e)for(o=e.length-1;o>=0;o--){var f=void 0!==(h=e[o]).target?h.target:void 0!==h.targets?h.targets:h.aTargets;for(Array.isArray(f)||(f=[f]),l=0,d=f.length;l<d;l++){var g=f[l];if("number"==typeof g&&g>=0){for(;p.length<=g;)L(t);s(g,h)}else if("number"==typeof g&&g<0)s(p.length+g,h);else if("string"==typeof g)for(c=0,u=p.length;c<u;c++)"_all"===g?s(c,h):-1!==g.indexOf(":name")?p[c].sName===g.replace(":name","")&&s(c,h):n.forEach((function(t){if(t[c]){var e=a(t[c].cell);g.match(/^[a-z][\w-]*$/i)&&(g="."+g),e.is(g)&&s(c,h)}}))}}if(i)for(o=0,r=i.length;o<r;o++)s(o,i[o])}(b,r.aoColumnDefs,_,M,(function(t,e){O(b,t,e)}));var w=p.children("tbody").find("tr").eq(0);if(w.length){var R=function(t,e){return null!==t.getAttribute("data-"+e)?e:null};a(w[0]).children("th, td").each((function(t,e){var i=b.aoColumns[t];if(i||Ut(b,0,"Incorrect column count",18),i.mData===t){var n=R(e,"sort")||R(e,"order"),s=R(e,"filter")||R(e,"search");null===n&&null===s||(i.mData={_:t+".display",sort:null!==n?t+".@data-"+n:void 0,type:null!==n?t+".@data-"+n:void 0,filter:null!==s?t+".@data-"+s:void 0},i._isArrayHost=!0,O(b,t))}}))}var A=b.oFeatures,D=function(){if(void 0===r.aaSorting){var e=b.aaSorting;for(d=0,t=e.length;d<t;d++)e[d][1]=b.aoColumns[d].asSorting[0]}zt(b),Jt(b,"aoDrawCallback",(function(){(b.bSorted||"ssp"===ie(b)||A.bDeferRender)&&zt(b)}));var i=p.children("caption");b.caption&&(0===i.length&&(i=a("<caption/>").appendTo(p)),i.html(b.caption)),i.length&&(i[0]._captionSide=i.css("caption-side"),b.captionNode=i[0]),0===x.length&&(x=a("<thead/>").appendTo(p)),b.nTHead=x[0],a("tr",x).addClass(y.thead.row);var n=p.children("tbody");0===n.length&&(n=a("<tbody/>").insertAfter(x)),b.nTBody=n[0];var s=p.children("tfoot");if(0===s.length&&(s=a("<tfoot/>").appendTo(p)),b.nTFoot=s[0],a("tr",s).addClass(y.tfoot.row),r.aaData)for(d=0;d<r.aaData.length;d++)U(b,r.aaData[d]);else"dom"==ie(b)&&X(b,a(b.nTBody).children("tr"));b.aiDisplay=b.aiDisplayMaster.slice(),b.bInitialised=!0,!1===u&&Tt(b)};Jt(b,"aoDrawCallback",$t),r.bStateSave?(A.bStateSave=!0,function(t,e,i){if(!t.oFeatures.bStateSave)return void i();var n=function(e){qt(t,e,i)},s=t.fnStateLoadCallback.call(t.oInstance,t,n);void 0!==s&&qt(t,s,i)}(b,0,D)):D()}else Ut(null,0,"Non-table node initialisation ("+this.nodeName+")",2)})),i=null,this};l.ext=n={buttons:{},classes:{},builder:"-source-",errMode:"alert",feature:[],features:{},search:[],selector:{cell:[],column:[],row:[]},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{className:{},detect:[],render:{},search:{},order:{}},_unique:0,fnVersionCheck:l.fnVersionCheck,iApiIndex:0,sVersion:l.version},a.extend(n,{afnFiltering:n.search,aTypes:n.type.detect,ofnSearch:n.type.search,oSort:n.type.order,afnSortData:n.order,aoFeatures:n.feature,oStdClasses:n.classes,oPagination:n.pager}),a.extend(l.ext.classes,{container:"dt-container",empty:{row:"dt-empty"},info:{container:"dt-info"},length:{container:"dt-length",select:"dt-input"},order:{canAsc:"dt-orderable-asc",canDesc:"dt-orderable-desc",isAsc:"dt-ordering-asc",isDesc:"dt-ordering-desc",none:"dt-orderable-none",position:"sorting_"},processing:{container:"dt-processing"},scrolling:{body:"dt-scroll-body",container:"dt-scroll",footer:{self:"dt-scroll-foot",inner:"dt-scroll-footInner"},header:{self:"dt-scroll-head",inner:"dt-scroll-headInner"}},search:{container:"dt-search",input:"dt-input"},table:"dataTable",tbody:{cell:"",row:""},thead:{cell:"",row:""},tfoot:{cell:"",row:""},paging:{active:"current",button:"dt-paging-button",container:"dt-paging",disabled:"disabled"}});var d={},c=/[\r\n\u2028]/g,u=/<([^>]*>)/g,h=Math.pow(2,28),p=/^\d{2,4}[./-]\d{1,2}[./-]\d{1,2}([T ]{1}\d{1,2}[:.]\d{2}([.:]\d{2})?)?$/,f=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),g=/['\u00A0,$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi,m=function(t){return!t||!0===t||"-"===t},v=function(t){var e=parseInt(t,10);return!isNaN(e)&&isFinite(t)?e:null},b=function(t,e){return d[e]||(d[e]=new RegExp(Rt(e),"g")),"string"==typeof t&&"."!==e?t.replace(/\./g,"").replace(d[e],"."):t},y=function(t,e,i){var n=typeof t,s="string"===n;return"number"===n||"bigint"===n||(!!m(t)||(e&&s&&(t=b(t,e)),i&&s&&(t=t.replace(g,"")),!isNaN(parseFloat(t))&&isFinite(t)))},C=function(t,e,i){if(m(t))return!0;if("string"==typeof t&&t.match(/<(input|select)/i))return null;var n=function(t){return m(t)||"string"==typeof t}(t);return n&&!!y(R(t),e,i)||null},_=function(t,e,i){var n=[],s=0,o=t.length;if(void 0!==i)for(;s<o;s++)t[s]&&t[s][e]&&n.push(t[s][e][i]);else for(;s<o;s++)t[s]&&n.push(t[s][e]);return n},x=function(t,e,i,n){var s=[],o=0,r=e.length;if(void 0!==n)for(;o<r;o++)t[e[o]][i]&&s.push(t[e[o]][i][n]);else for(;o<r;o++)t[e[o]]&&s.push(t[e[o]][i]);return s},M=function(t,e){var i,n=[];void 0===e?(e=0,i=t):(i=e,e=t);for(var s=e;s<i;s++)n.push(s);return n},w=function(t){for(var e=[],i=0,n=t.length;i<n;i++)t[i]&&e.push(t[i]);return e},R=function(t){if(t.length>h)throw new Error("Exceeded max str len");var e;t=t.replace(u,"");do{e=t,t=t.replace(/<script/i,"")}while(t!==e);return e},A=function(t){return Array.isArray(t)&&(t=t.join(",")),"string"==typeof t?t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):t},D=function(t,e){if("string"!=typeof t)return t;var i=t.normalize("NFD");return i.length!==t.length?(!0===e?t+" ":"")+i.replace(/[\u0300-\u036f]/g,""):i},T=function(t){if(Array.from&&Set)return Array.from(new Set(t));if(function(t){if(t.length<2)return!0;for(var e=t.slice().sort(),i=e[0],n=1,s=e.length;n<s;n++){if(e[n]===i)return!1;i=e[n]}return!0}(t))return t.slice();var e,i,n,s=[],o=t.length,r=0;t:for(i=0;i<o;i++){for(e=t[i],n=0;n<r;n++)if(s[n]===e)continue t;s.push(e),r++}return s},S=function(t,e){if(Array.isArray(e))for(var i=0;i<e.length;i++)S(t,e[i]);else t.push(e);return t};function k(t,e){e&&e.split(" ").forEach((function(e){e&&t.classList.add(e)}))}function B(t){var e,i,n={};a.each(t,(function(s){(e=s.match(/^([^A-Z]+?)([A-Z])/))&&-1!=="a aa ai ao as b fn i m o s ".indexOf(e[1]+" ")&&(i=s.replace(e[0],e[2].toLowerCase()),n[i]=s,"o"===e[1]&&B(t[s]))})),t._hungarianMap=n}function V(t,e,i){var n;t._hungarianMap||B(t),a.each(e,(function(s){void 0===(n=t._hungarianMap[s])||!i&&void 0!==e[n]||("o"===n.charAt(0)?(e[n]||(e[n]={}),a.extend(!0,e[n],e[s]),V(t[n],e[n],i)):e[n]=e[s])}))}l.util={diacritics:function(t,e){if("function"!==typeof t)return D(t,e);D=t},debounce:function(t,e){var i;return function(){var n=this,s=arguments;clearTimeout(i),i=setTimeout((function(){t.apply(n,s)}),e||250)}},throttle:function(t,e){var i,n,s=void 0!==e?e:200;return function(){var e=this,o=+new Date,r=arguments;i&&o<i+s?(clearTimeout(n),n=setTimeout((function(){i=void 0,t.apply(e,r)}),s)):(i=o,t.apply(e,r))}},escapeRegex:function(t){return t.replace(f,"\\$1")},set:function(t){if(a.isPlainObject(t))return l.util.set(t._);if(null===t)return function(){};if("function"==typeof t)return function(e,i,n){t(e,"set",i,n)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e,i){e[t]=i};var e=function(t,i,n){for(var s,o,r,a,l,d=tt(n),c=d[d.length-1],u=0,h=d.length-1;u<h;u++){if("__proto__"===d[u]||"constructor"===d[u])throw new Error("Cannot set prototype values");if(o=d[u].match(J),r=d[u].match(Z),o){if(d[u]=d[u].replace(J,""),t[d[u]]=[],(s=d.slice()).splice(0,u+1),l=s.join("."),Array.isArray(i))for(var p=0,f=i.length;p<f;p++)e(a={},i[p],l),t[d[u]].push(a);else t[d[u]]=i;return}r&&(d[u]=d[u].replace(Z,""),t=t[d[u]](i)),null!==t[d[u]]&&void 0!==t[d[u]]||(t[d[u]]={}),t=t[d[u]]}c.match(Z)?t=t[c.replace(Z,"")](i):t[c.replace(J,"")]=i};return function(i,n){return e(i,n,t)}},get:function(t){if(a.isPlainObject(t)){var e={};return a.each(t,(function(t,i){i&&(e[t]=l.util.get(i))})),function(t,i,n,s){var o=e[i]||e._;return void 0!==o?o(t,i,n,s):t}}if(null===t)return function(t){return t};if("function"==typeof t)return function(e,i,n,s){return t(e,i,n,s)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e){return e[t]};var i=function(t,e,n){var s,o,r,a;if(""!==n)for(var l=tt(n),d=0,c=l.length;d<c;d++){if(s=l[d].match(J),o=l[d].match(Z),s){if(l[d]=l[d].replace(J,""),""!==l[d]&&(t=t[l[d]]),r=[],l.splice(0,d+1),a=l.join("."),Array.isArray(t))for(var u=0,h=t.length;u<h;u++)r.push(i(t[u],e,a));var p=s[0].substring(1,s[0].length-1);t=""===p?r:r.join(p);break}if(o)l[d]=l[d].replace(Z,""),t=t[l[d]]();else{if(null===t||null===t[l[d]])return null;if(void 0===t||void 0===t[l[d]])return;t=t[l[d]]}}return t};return function(e,n){return i(e,n,t)}},stripHtml:function(t){var e=typeof t;if("function"!==e)return"string"===e?R(t):t;R=t},escapeHtml:function(t){var e=typeof t;if("function"!==e)return"string"===e||Array.isArray(t)?A(t):t;A=t},unique:T};var j=function(t,e,i){void 0!==t[e]&&(t[i]=t[e])};function E(t){j(t,"ordering","bSort"),j(t,"orderMulti","bSortMulti"),j(t,"orderClasses","bSortClasses"),j(t,"orderCellsTop","bSortCellsTop"),j(t,"order","aaSorting"),j(t,"orderFixed","aaSortingFixed"),j(t,"paging","bPaginate"),j(t,"pagingType","sPaginationType"),j(t,"pageLength","iDisplayLength"),j(t,"searching","bFilter"),"boolean"==typeof t.sScrollX&&(t.sScrollX=t.sScrollX?"100%":""),"boolean"==typeof t.scrollX&&(t.scrollX=t.scrollX?"100%":"");var e=t.aoSearchCols;if(e)for(var i=0,n=e.length;i<n;i++)e[i]&&V(l.models.oSearch,e[i]);t.serverSide&&!t.searchDelay&&(t.searchDelay=400)}function P(t){j(t,"orderable","bSortable"),j(t,"orderData","aDataSort"),j(t,"orderSequence","asSorting"),j(t,"orderDataType","sortDataType");var e=t.aDataSort;"number"!=typeof e||Array.isArray(e)||(t.aDataSort=[e])}function L(t){var e=l.defaults.column,i=t.aoColumns.length,n=a.extend({},l.models.oColumn,e,{aDataSort:e.aDataSort?e.aDataSort:[i],mData:e.mData?e.mData:i,idx:i,searchFixed:{},colEl:a("<col>").attr("data-dt-column",i)});t.aoColumns.push(n);var s=t.aoPreSearchCols;s[i]=a.extend({},l.models.oSearch,s[i])}function O(t,e,i){var n=t.aoColumns[e];if(null!=i){P(i),V(l.defaults.column,i,!0),void 0===i.mDataProp||i.mData||(i.mData=i.mDataProp),i.sType&&(n._sManualType=i.sType),i.className&&!i.sClass&&(i.sClass=i.className);var s=n.sClass;a.extend(n,i),Xt(n,i,"sWidth","sWidthOrig"),s!==n.sClass&&(n.sClass=s+" "+n.sClass),void 0!==i.iDataSort&&(n.aDataSort=[i.iDataSort]),Xt(n,i,"aDataSort")}var o=n.mData,r=et(o);if(n.mRender&&Array.isArray(n.mRender)){var d=n.mRender.slice(),c=d.shift();n.mRender=l.render[c].apply(window,d)}n._render=n.mRender?et(n.mRender):null;var u=function(t){return"string"==typeof t&&-1!==t.indexOf("@")};n._bAttrSrc=a.isPlainObject(o)&&(u(o.sort)||u(o.type)||u(o.filter)),n._setter=null,n.fnGetData=function(t,e,i){var s=r(t,e,void 0,i);return n._render&&e?n._render(s,e,t,i):s},n.fnSetData=function(t,e,i){return it(o)(t,e,i)},"number"==typeof o||n._isArrayHost||(t._rowReadObject=!0),t.oFeatures.bSort||(n.bSortable=!1)}function I(t){!function(t){if(!t.oFeatures.bAutoWidth)return;var e,i,s,o=t.nTable,r=t.aoColumns,d=t.oScroll,c=d.sY,u=d.sX,h=d.sXInner,p=K(t,"bVisible"),f=o.getAttribute("width"),g=o.parentNode,m=o.style.width;m&&-1!==m.indexOf("%")&&(f=m);Zt(t,null,"column-calc",{visible:p},!1);var v=a(o.cloneNode()).css("visibility","hidden").removeAttr("id");v.append("<tbody>");var b=a("<tr/>").appendTo(v.find("tbody"));for(v.append(a(t.nTHead).clone()).append(a(t.nTFoot).clone()),v.find("tfoot th, tfoot td").css("width",""),v.find("thead th, thead td").each((function(){var e=$(t,this,!0,!1);e?(this.style.width=e,u&&a(this).append(a("<div/>").css({width:e,margin:0,padding:0,border:0,height:1}))):this.style.width=""})),e=0;e<p.length;e++){i=r[s=p[e]];var y=Pt(t,s),C=n.type.className[i.sType],_=y+i.sContentPadding,x=-1===y.indexOf("<")?document.createTextNode(_):_;a("<td/>").addClass(C).addClass(i.sClass).append(x).appendTo(b)}a("[name]",v).removeAttr("name");var M=a("<div/>").css(u||c?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(v).appendTo(g);u&&h?v.width(h):u?(v.css("width","auto"),v.removeAttr("width"),v.width()<g.clientWidth&&f&&v.width(g.clientWidth)):c?v.width(g.clientWidth):f&&v.width(f);var w=0,R=v.find("tbody tr").eq(0).children();for(e=0;e<p.length;e++){var A=R[e].getBoundingClientRect().width;w+=A,r[p[e]].sWidth=Lt(A)}o.style.width=Lt(w),M.remove(),f&&(o.style.width=Lt(f));if((f||u)&&!t._reszEvt){(function(){a(window).on("resize.DT-"+t.sInstance,l.util.throttle((function(){t.bDestroying||I(t)})))})(),t._reszEvt=!0}}(t),function(t){for(var e=t.aoColumns,i=0;i<e.length;i++){var n=$(t,[i],!1,!1);e[i].colEl.css("width",n)}}(t);var e=t.oScroll;""===e.sY&&""===e.sX||Et(t),Zt(t,null,"column-sizing",[t])}function F(t,e){var i=K(t,"bVisible");return"number"==typeof i[e]?i[e]:null}function N(t,e){var i=K(t,"bVisible").indexOf(e);return-1!==i?i:null}function Y(t){var e=t.aoHeader,i=t.aoColumns,n=0;if(e.length)for(var s=0,o=e[0].length;s<o;s++)i[s].bVisible&&"none"!==a(e[0][s].cell).css("display")&&n++;return n}function K(t,e){var i=[];return t.aoColumns.map((function(t,n){t[e]&&i.push(n)})),i}function H(t){var e,i,s,o,r,a,d,c,u,h=t.aoColumns,p=t.aoData,f=l.ext.type.detect;for(e=0,i=h.length;e<i;e++){if(u=[],!(d=h[e]).sType&&d._sManualType)d.sType=d._sManualType;else if(!d.sType){for(s=0,o=f.length;s<o;s++){for(r=0,a=p.length;r<a;r++)if(p[r]){if(void 0===u[r]&&(u[r]=G(t,r,e,"type")),!(c=f[s](u[r],t))&&s!==f.length-2)break;if("html"===c&&!m(u[r]))break}if(c){d.sType=c;break}}d.sType||(d.sType="string")}var g=n.type.className[d.sType];g&&(W(t.aoHeader,e,g),W(t.aoFooter,e,g));var v=n.type.render[d.sType];v&&!d._render&&(d._render=l.util.get(v),z(t,e))}}function z(t,e){for(var i=t.aoData,n=0;n<i.length;n++)if(i[n].nTr){var s=G(t,n,e,"display");i[n].displayData[e]=s,Q(i[n].anCells[e],s)}}function W(t,e,i){t.forEach((function(t){t[e]&&t[e].unique&&k(t[e].cell,i)}))}function $(t,e,i,n){Array.isArray(e)||(e=q(e));for(var s,o=0,r=t.aoColumns,a=0,l=e.length;a<l;a++){var d=r[e[a]],c=i?d.sWidthOrig:d.sWidth;if(n||!1!==d.bVisible){if(null==c)return null;if("number"==typeof c)s="px",o+=c;else{var u=c.match(/([\d\.]+)([^\d]*)/);u&&(o+=1*u[1],s=3===u.length?u[2]:"px")}}}return o+s}function q(t){var e=a(t).closest("[data-dt-column]").attr("data-dt-column");return e?e.split(",").map((function(t){return 1*t})):[]}function U(t,e,i,n){var s=t.aoData.length,o=a.extend(!0,{},l.models.oRow,{src:i?"dom":"data",idx:s});o._aData=e,t.aoData.push(o);for(var r=t.aoColumns,d=0,c=r.length;d<c;d++)r[d].sType=null;t.aiDisplayMaster.push(s);var u=t.rowIdFn(e);return void 0!==u&&(t.aIds[u]=o),!i&&t.oFeatures.bDeferRender||lt(t,s,i,n),s}function X(t,e){var i;return e instanceof a||(e=a(e)),e.map((function(e,n){return i=rt(t,n),U(t,i.data,n,i.cells)}))}function G(t,e,i,n){"search"===n?n="filter":"order"===n&&(n="sort");var s=t.aoData[e];if(s){var o=t.iDraw,r=t.aoColumns[i],a=s._aData,d=r.sDefaultContent,c=r.fnGetData(a,n,{settings:t,row:e,col:i});if("display"!==n&&c&&"object"==typeof c&&c.nodeName&&(c=c.innerHTML),void 0===c)return t.iDrawError!=o&&null===d&&(Ut(t,0,"Requested unknown parameter "+("function"==typeof r.mData?"{function}":"'"+r.mData+"'")+" for row "+e+", column "+i,4),t.iDrawError=o),d;if(c!==a&&null!==c||null===d||void 0===n){if("function"==typeof c)return c.call(a)}else c=d;if(null===c&&"display"===n)return"";if("filter"===n){var u=l.ext.type.search;u[r.sType]&&(c=u[r.sType](c))}return c}}function Q(t,e){e&&"object"==typeof e&&e.nodeName?a(t).empty().append(e):t.innerHTML=e}var J=/\[.*?\]$/,Z=/\(\)$/;function tt(t){return(t.match(/(\\.|[^.])+/g)||[""]).map((function(t){return t.replace(/\\\./g,".")}))}var et=l.util.get,it=l.util.set;function nt(t){return _(t.aoData,"_aData")}function st(t){t.aoData.length=0,t.aiDisplayMaster.length=0,t.aiDisplay.length=0,t.aIds={}}function ot(t,e,i,n){var s,o,r=t.aoData[e];if(r._aSortData=null,r._aFilterData=null,r.displayData=null,"dom"!==i&&(i&&"auto"!==i||"dom"!==r.src)){var a=r.anCells,l=at(t,e);if(a)if(void 0!==n)Q(a[n],l[n]);else for(s=0,o=a.length;s<o;s++)Q(a[s],l[s])}else r._aData=rt(t,r,n,void 0===n?void 0:r._aData).data;var d=t.aoColumns;if(void 0!==n)d[n].sType=null,d[n].maxLenString=null;else{for(s=0,o=d.length;s<o;s++)d[s].sType=null,d[s].maxLenString=null;dt(t,r)}}function rt(t,e,i,n){var s,o,r,a=[],l=e.firstChild,d=0,c=t.aoColumns,u=t._rowReadObject;n=void 0!==n?n:u?{}:[];var h=function(t,e){if("string"==typeof t){var i=t.indexOf("@");if(-1!==i){var s=t.substring(i+1);it(t)(n,e.getAttribute(s))}}},p=function(t){void 0!==i&&i!==d||(o=c[d],r=t.innerHTML.trim(),o&&o._bAttrSrc?(it(o.mData._)(n,r),h(o.mData.sort,t),h(o.mData.type,t),h(o.mData.filter,t)):u?(o._setter||(o._setter=it(o.mData)),o._setter(n,r)):n[d]=r);d++};if(l)for(;l;)"TD"!=(s=l.nodeName.toUpperCase())&&"TH"!=s||(p(l),a.push(l)),l=l.nextSibling;else for(var f=0,g=(a=e.anCells).length;f<g;f++)p(a[f]);var m=e.firstChild?e:e.nTr;if(m){var v=m.getAttribute("id");v&&it(t.rowId)(n,v)}return{data:n,cells:a}}function at(t,e){let i=t.aoData[e],n=t.aoColumns;if(!i.displayData){i.displayData=[];for(var s=0,o=n.length;s<o;s++)i.displayData.push(G(t,e,s,"display"))}return i.displayData}function lt(t,e,i,n){var s,o,r,l,d,c,u=t.aoData[e],h=u._aData,p=[],f=t.oClasses.tbody.row;if(null===u.nTr){for(s=i||document.createElement("tr"),u.nTr=s,u.anCells=p,k(s,f),s._DT_RowIndex=e,dt(t,u),l=0,d=t.aoColumns.length;l<d;l++){r=t.aoColumns[l],(o=(c=!i||!n[l])?document.createElement(r.sCellType):n[l])||Ut(t,0,"Incorrect column count",18),o._DT_CellIndex={row:e,column:l},p.push(o);var g=at(t,e);!c&&(!r.mRender&&r.mData===l||a.isPlainObject(r.mData)&&r.mData._===l+".display")||Q(o,g[l]),r.bVisible&&c?s.appendChild(o):r.bVisible||c||o.parentNode.removeChild(o),r.fnCreatedCell&&r.fnCreatedCell.call(t.oInstance,o,G(t,e,l),h,e,l)}Zt(t,"aoRowCreatedCallback","row-created",[s,h,e,p])}else k(u.nTr,f)}function dt(t,e){var i=e.nTr,n=e._aData;if(i){var s=t.rowIdFn(n);if(s&&(i.id=s),n.DT_RowClass){var o=n.DT_RowClass.split(" ");e.__rowc=e.__rowc?T(e.__rowc.concat(o)):o,a(i).removeClass(e.__rowc.join(" ")).addClass(n.DT_RowClass)}n.DT_RowAttr&&a(i).attr(n.DT_RowAttr),n.DT_RowData&&a(i).data(n.DT_RowData)}}function ct(t,e){var i,n,s,o=t.oClasses,r=t.aoColumns,l="header"===e?t.nTHead:t.nTFoot,d="header"===e?"sTitle":e;if(l){if("header"===e||_(t.aoColumns,d).join(""))if((s=a("tr",l)).length||(s=a("<tr/>").appendTo(l)),1===s.length)for(i=a("td, th",s).length,n=r.length;i<n;i++)a("<th/>").html(r[i][d]||"").appendTo(s);var c=yt(t,l,!0);"header"===e?t.aoHeader=c:t.aoFooter=c,a(l).children("tr").attr("role","row"),a(l).children("tr").children("th, td").each((function(){ee(t,e)(t,a(this),o)}))}}function ut(t,e,i){var n,s,o,r,l,d=[],c=[],u=t.aoColumns,h=u.length;if(e){for(i||(i=M(h).filter((function(t){return u[t].bVisible}))),n=0;n<e.length;n++)d[n]=e[n].slice().filter((function(t,e){return i.includes(e)})),c.push([]);for(n=0;n<d.length;n++)for(s=0;s<d[n].length;s++)if(r=1,l=1,void 0===c[n][s]){for(o=d[n][s].cell;void 0!==d[n+r]&&d[n][s].cell==d[n+r][s].cell;)c[n+r][s]=null,r++;for(;void 0!==d[n][s+l]&&d[n][s].cell==d[n][s+l].cell;){for(var p=0;p<r;p++)c[n+p][s+l]=null;l++}var f=a("span.dt-column-title",o);c[n][s]={cell:o,colspan:l,rowspan:r,title:f.length?f.html():a(o).html()}}return c}}function ht(t,e){for(var i,n,s=ut(t,e),o=0;o<e.length;o++){if(i=e[o].row)for(;n=i.firstChild;)i.removeChild(n);for(var r=0;r<s[o].length;r++){var l=s[o][r];l&&a(l.cell).appendTo(i).attr("rowspan",l.rowspan).attr("colspan",l.colspan)}}}function pt(t,e){if(function(t){var e="ssp"==ie(t),i=t.iInitDisplayStart;void 0!==i&&-1!==i&&(t._iDisplayStart=e?i:i>=t.fnRecordsDisplay()?0:i,t.iInitDisplayStart=-1)}(t),-1===Zt(t,"aoPreDrawCallback","preDraw",[t]).indexOf(!1)){var i,s=[],o=0,r="ssp"==ie(t),l=t.aiDisplay,d=t._iDisplayStart,c=t.fnDisplayEnd(),u=t.aoColumns,h=a(t.nTBody);if(t.bDrawing=!0,r){if(!t.bDestroying&&!e)return 0===t.iDraw&&h.empty().append(gt(t)),(i=t).iDraw++,Vt(i,!0),void Ct(i,function(t){var e=t.aoColumns,i=t.oFeatures,n=t.oPreviousSearch,s=t.aoPreSearchCols,o=function(t,i){return"function"==typeof e[t][i]?"function":e[t][i]};return{draw:t.iDraw,columns:e.map((function(t,e){return{data:o(e,"mData"),name:t.sName,searchable:t.bSearchable,orderable:t.bSortable,search:{value:s[e].search,regex:s[e].regex,fixed:Object.keys(t.searchFixed).map((function(e){return{name:e,term:t.searchFixed[e].toString()}}))}}})),order:Yt(t).map((function(t){return{column:t.col,dir:t.dir,name:o(t.col,"sName")}})),start:t._iDisplayStart,length:i.bPaginate?t._iDisplayLength:-1,search:{value:n.search,regex:n.regex,fixed:Object.keys(t.searchFixed).map((function(e){return{name:e,term:t.searchFixed[e].toString()}}))}}}(i),(function(t){!function(t,e){var i=_t(t,e),n=xt(t,"draw",e),s=xt(t,"recordsTotal",e),o=xt(t,"recordsFiltered",e);if(void 0!==n){if(1*n<t.iDraw)return;t.iDraw=1*n}i||(i=[]),st(t),t._iRecordsTotal=parseInt(s,10),t._iRecordsDisplay=parseInt(o,10);for(var r=0,a=i.length;r<a;r++)U(t,i[r]);t.aiDisplay=t.aiDisplayMaster.slice(),pt(t,!0),St(t),Vt(t,!1)}(i,t)}))}else t.iDraw++;if(0!==l.length)for(var p=r?0:d,f=r?t.aoData.length:c,g=p;g<f;g++){var m=l[g],v=t.aoData[m];null===v.nTr&&lt(t,m);for(var b=v.nTr,y=0;y<u.length;y++){var C=u[y],_=v.anCells[y];k(_,n.type.className[C.sType]),k(_,C.sClass),k(_,t.oClasses.tbody.cell)}Zt(t,"aoRowCallback",null,[b,v._aData,o,g,m]),s.push(b),o++}else s[0]=gt(t);Zt(t,"aoHeaderCallback","header",[a(t.nTHead).children("tr")[0],nt(t),d,c,l]),Zt(t,"aoFooterCallback","footer",[a(t.nTFoot).children("tr")[0],nt(t),d,c,l]),h[0].replaceChildren?h[0].replaceChildren.apply(h[0],s):(h.children().detach(),h.append(a(s))),a(t.nTableWrapper).toggleClass("dt-empty-footer",0===a("tr",t.nTFoot).length),Zt(t,"aoDrawCallback","draw",[t],!0),t.bSorted=!1,t.bFiltered=!1,t.bDrawing=!1}else Vt(t,!1)}function ft(t,e,i){var n=t.oFeatures,s=n.bSort,o=n.bFilter;void 0!==i&&!0!==i||(s&&Kt(t),o?Mt(t,t.oPreviousSearch):t.aiDisplay=t.aiDisplayMaster.slice()),!0!==e&&(t._iDisplayStart=0),t._drawHold=e,pt(t),t._drawHold=!1}function gt(t){var e=t.oLanguage,i=e.sZeroRecords,n=ie(t);return t.iDraw<1&&"ssp"===n||t.iDraw<=1&&"ajax"===n?i=e.sLoadingRecords:e.sEmptyTable&&0===t.fnRecordsTotal()&&(i=e.sEmptyTable),a("<tr/>").append(a("<td />",{colSpan:Y(t),class:t.oClasses.empty.row}).html(i))[0]}function mt(t,e,i){var n={};a.each(e,(function(t,e){if(null!==e){var i=t.replace(/([A-Z])/g," $1").split(" ");n[i[0]]||(n[i[0]]={});var s=1===i.length?"full":i[1].toLowerCase(),o=n[i[0]],r=function(t,e){a.isPlainObject(e)?Object.keys(e).map((function(i){t.push({feature:i,opts:e[i]})})):t.push(e)};if(o[s]&&o[s].contents||(o[s]={contents:[]}),Array.isArray(e))for(var l=0;l<e.length;l++)r(o[s].contents,e[l]);else r(o[s].contents,e);Array.isArray(o[s].contents)||(o[s].contents=[o[s].contents])}}));var s=Object.keys(n).map((function(t){return 0!==t.indexOf(i)?null:{name:t,val:n[t]}})).filter((function(t){return null!==t}));s.sort((function(t,e){var i=1*t.name.replace(/[^0-9]/g,"");return 1*e.name.replace(/[^0-9]/g,"")-i})),"bottom"===i&&s.reverse();for(var o=[],r=0,l=s.length;r<l;r++)s[r].val.full&&(o.push({full:s[r].val.full}),vt(t,o[o.length-1]),delete s[r].val.full),Object.keys(s[r].val).length&&(o.push(s[r].val),vt(t,o[o.length-1]));return o}function vt(t,e){var i=function(e,i){return n.features[e]||Ut(t,0,"Unknown feature: "+e),n.features[e].apply(this,[t,i])};a.each(e,(function(n){!function(n){for(var s=e[n].contents,o=0,r=s.length;o<r;o++)if(s[o])if("string"==typeof s[o])s[o]=i(s[o],null);else if(a.isPlainObject(s[o]))s[o]=i(s[o].feature,s[o].opts);else if("function"==typeof s[o].node)s[o]=s[o].node(t);else if("function"==typeof s[o]){var l=s[o](t);s[o]="function"==typeof l.node?l.node():l}}(n)}))}function bt(t){var e=t.oClasses,i=a(t.nTable),n=a("<div/>").attr({id:t.sTableId+"_wrapper",class:e.container}).insertBefore(i);if(t.nTableWrapper=n[0],t.sDom)!function(t,e,i){for(var n,s,o,r,d,c=e.match(/(".*?")|('.*?')|./g),u=0;u<c.length;u++){if(n=null,"<"==(s=c[u])){if(o=a("<div/>"),"'"==(r=c[u+1])[0]||'"'==r[0]){var h,p="";if(-1!=(d=r.replace(/['"]/g,"")).indexOf(".")){var f=d.split(".");p=f[0],h=f[1]}else"#"==d[0]?p=d:h=d;o.attr("id",p.substring(1)).addClass(h),u++}i.append(o),i=o}else">"==s?i=i.parent():"t"==s?n=jt(t):l.ext.feature.forEach((function(e){s==e.cFeature&&(n=e.fnInit(t))}));n&&i.append(n)}}(t,t.sDom,n);else{var s=mt(t,t.layout,"top"),o=mt(t,t.layout,"bottom"),r=ee(t,"layout");s.forEach((function(e){r(t,n,e)})),r(t,n,{full:{table:!0,contents:[jt(t)]}}),o.forEach((function(e){r(t,n,e)}))}!function(t){var e=t.nTable;if(t.oFeatures.bProcessing){var i=a("<div/>",{id:t.sTableId+"_processing",class:t.oClasses.processing.container,role:"status"}).html(t.oLanguage.sProcessing).append("<div><div></div><div></div><div></div><div></div></div>").insertBefore(e);a(e).on("processing.dt.DT",(function(t,e,n){i.css("display",n?"block":"none")}))}}(t)}function yt(t,e,i){var n,s,o,r,l,d,c,u,h,p,f=t.aoColumns,g=a(e).children("tr"),m=e&&"thead"===e.nodeName.toLowerCase(),v=[],b=function(t,e,i){for(var n=t[e];n[i];)i++;return i};for(o=0,d=g.length;o<d;o++)v.push([]);for(o=0,d=g.length;o<d;o++)for(0,s=(n=g[o]).firstChild;s;){if("TD"==s.nodeName.toUpperCase()||"TH"==s.nodeName.toUpperCase()){var y=[];if(u=(u=1*s.getAttribute("colspan"))&&0!==u&&1!==u?u:1,h=(h=1*s.getAttribute("rowspan"))&&0!==h&&1!==h?h:1,c=b(v,o,0),p=1===u,i){if(p){O(t,c,a(s).data());var C=f[c],_=s.getAttribute("width")||null,x=s.style.width.match(/width:\s*(\d+[pxem%]+)/);x&&(_=x[1]),C.sWidthOrig=C.sWidth||_,m?(null===C.sTitle||C.autoTitle||(s.innerHTML=C.sTitle),!C.sTitle&&p&&(C.sTitle=R(s.innerHTML),C.autoTitle=!0)):C.footer&&(s.innerHTML=C.footer),C.ariaTitle||(C.ariaTitle=a(s).attr("aria-label")||C.sTitle),C.className&&a(s).addClass(C.className)}0===a("span.dt-column-title",s).length&&a("<span>").addClass("dt-column-title").append(s.childNodes).appendTo(s),m&&0===a("span.dt-column-order",s).length&&a("<span>").addClass("dt-column-order").appendTo(s)}for(l=0;l<u;l++){for(r=0;r<h;r++)v[o+r][c+l]={cell:s,unique:p},v[o+r].row=n;y.push(c+l)}s.setAttribute("data-dt-column",T(y).join(","))}s=s.nextSibling}return v}function Ct(t,e,i){var n,s=t.ajax,o=t.oInstance,r=function(e){var n=t.jqXHR?t.jqXHR.status:null;(null===e||"number"==typeof n&&204==n)&&_t(t,e={},[]);var s=e.error||e.sError;s&&Ut(t,0,s),t.json=e,Zt(t,null,"xhr",[t,e,t.jqXHR],!0),i(e)};if(a.isPlainObject(s)&&s.data){var d="function"==typeof(n=s.data)?n(e,t):n;e="function"==typeof n&&d?d:a.extend(!0,e,d),delete s.data}var c={url:"string"==typeof s?s:"",data:e,success:r,dataType:"json",cache:!1,type:t.sServerMethod,error:function(e,i){-1===Zt(t,null,"xhr",[t,null,t.jqXHR],!0).indexOf(!0)&&("parsererror"==i?Ut(t,0,"Invalid JSON response",1):4===e.readyState&&Ut(t,0,"Ajax error",7)),Vt(t,!1)}};if(a.isPlainObject(s)&&a.extend(c,s),t.oAjaxData=e,Zt(t,null,"preXhr",[t,e,c],!0),"function"==typeof s)t.jqXHR=s.call(o,e,r,t);else if(""===s.url){var u={};l.util.set(s.dataSrc)(u,[]),r(u)}else t.jqXHR=a.ajax(c),n&&(s.data=n)}function _t(t,e,i){var n="data";if(a.isPlainObject(t.ajax)&&void 0!==t.ajax.dataSrc){var s=t.ajax.dataSrc;"string"==typeof s||"function"==typeof s?n=s:void 0!==s.data&&(n=s.data)}if(!i)return"data"===n?e.aaData||e[n]:""!==n?et(n)(e):e;it(n)(e,i)}function xt(t,e,i){var n=a.isPlainObject(t.ajax)?t.ajax.dataSrc:null;if(n&&n[e])return et(n[e])(i);var s="";return"draw"===e?s="sEcho":"recordsTotal"===e?s="iTotalRecords":"recordsFiltered"===e&&(s="iTotalDisplayRecords"),void 0!==i[s]?i[s]:i[e]}function Mt(t,e){var i=t.aoPreSearchCols;if(H(t),"ssp"!=ie(t)){!function(t){for(var e,i,n,s,o,r=t.aoColumns,a=t.aoData,l=!1,d=0;d<a.length;d++)if(a[d]&&!(o=a[d])._aFilterData){for(n=[],e=0,i=r.length;e<i;e++)r[e].bSearchable?(null===(s=G(t,d,e,"filter"))&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&-1!==s.indexOf("&")&&(At.innerHTML=s,s=Dt?At.textContent:At.innerText),s.replace&&(s=s.replace(/[\r\n\u2028]/g,"")),n.push(s);o._aFilterData=n,o._sFilterRow=n.join("  "),l=!0}}(t),t.aiDisplay=t.aiDisplayMaster.slice(),wt(t.aiDisplay,t,e.search,e),a.each(t.searchFixed,(function(e,i){wt(t.aiDisplay,t,i,{})}));for(var n=0;n<i.length;n++){var s=i[n];wt(t.aiDisplay,t,s.search,s,n),a.each(t.aoColumns[n].searchFixed,(function(e,i){wt(t.aiDisplay,t,i,{},n)}))}!function(t){for(var e,i,n=l.ext.search,s=t.aiDisplay,o=0,r=n.length;o<r;o++){for(var a=[],d=0,c=s.length;d<c;d++)i=s[d],e=t.aoData[i],n[o](t,e._aFilterData,i,e._aData,d)&&a.push(i);s.length=0,s.push.apply(s,a)}}(t)}t.bFiltered=!0,Zt(t,null,"search",[t])}function wt(t,e,i,n,s){if(""!==i)for(var o=0,r="function"==typeof i?i:null,l=i instanceof RegExp?i:r?null:function(t,e){var i=[],n=a.extend({},{boundary:!1,caseInsensitive:!0,exact:!1,regex:!1,smart:!0},e);"string"!=typeof t&&(t=t.toString());if(t=D(t),n.exact)return new RegExp("^"+Rt(t)+"$",n.caseInsensitive?"i":"");if(t=n.regex?t:Rt(t),n.smart){var s=(t.match(/!?["\u201C][^"\u201D]+["\u201D]|[^ ]+/g)||[""]).map((function(t){var e,n=!1;return"!"===t.charAt(0)&&(n=!0,t=t.substring(1)),'"'===t.charAt(0)?(e=t.match(/^"(.*)"$/),t=e?e[1]:t):"“"===t.charAt(0)&&(e=t.match(/^\u201C(.*)\u201D$/),t=e?e[1]:t),n&&(t.length>1&&i.push("(?!"+t+")"),t=""),t.replace(/"/g,"")})),o=i.length?i.join(""):"",r=n.boundary?"\\b":"";t="^(?=.*?"+r+s.join(")(?=.*?"+r)+")("+o+".)*$"}return new RegExp(t,n.caseInsensitive?"i":"")}(i,n);o<t.length;){var d=e.aoData[t[o]],c=void 0===s?d._sFilterRow:d._aFilterData[s];(r&&!r(c,d._aData,t[o],s)||l&&!l.test(c))&&(t.splice(o,1),o--),o++}}var Rt=l.util.escapeRegex,At=a("<div>")[0],Dt=void 0!==At.textContent;function Tt(t){var e,i=t.iInitDisplayStart;if(t.bInitialised){ct(t,"header"),ct(t,"footer"),ht(t,t.aoHeader),ht(t,t.aoFooter),bt(t),function(t){var e=t.nTHead,i=e.querySelectorAll("tr"),n=t.bSortCellsTop,s=':not([data-dt-order="disable"]):not([data-dt-order="icon-only"])';!0===n?e=i[0]:!1===n&&(e=i[i.length-1]);It(t,e,e===t.nTHead?"tr"+s+" th"+s+", tr"+s+" td"+s:"th"+s+", td"+s);var o=[];Nt(t,o,t.aaSorting),t.aaSorting=o}(t),Ot(t),Vt(t,!0),Zt(t,null,"preInit",[t],!0),ft(t);var n=ie(t);"ssp"!=n&&("ajax"==n?Ct(t,{},(function(n){var s=_t(t,n);for(e=0;e<s.length;e++)U(t,s[e]);t.iInitDisplayStart=i,ft(t),Vt(t,!1),St(t)})):(St(t),Vt(t,!1)))}else setTimeout((function(){Tt(t)}),200)}function St(t){if(!t._bInitComplete){var e=[t,t.json];t._bInitComplete=!0,I(t),Zt(t,null,"plugin-init",e,!0),Zt(t,"aoInitComplete","init",e,!0)}}function kt(t,e){var i=parseInt(e,10);t._iDisplayLength=i,te(t),Zt(t,null,"length",[t,i])}function Bt(t,e,i){var n=t._iDisplayStart,s=t._iDisplayLength,o=t.fnRecordsDisplay();if(0===o||-1===s)n=0;else if("number"==typeof e)(n=e*s)>o&&(n=0);else if("first"==e)n=0;else if("previous"==e)(n=s>=0?n-s:0)<0&&(n=0);else if("next"==e)n+s<o&&(n+=s);else if("last"==e)n=Math.floor((o-1)/s)*s;else{if("ellipsis"===e)return;Ut(t,0,"Unknown paging action: "+e,5)}var r=t._iDisplayStart!==n;return t._iDisplayStart=n,Zt(t,null,r?"page":"page-nc",[t]),r&&i&&pt(t),r}function Vt(t,e){Zt(t,null,"processing",[t,e])}function jt(t){var e=a(t.nTable),i=t.oScroll;if(""===i.sX&&""===i.sY)return t.nTable;var n=i.sX,s=i.sY,o=t.oClasses.scrolling,r=t.captionNode,l=r?r._captionSide:null,d=a(e[0].cloneNode(!1)),c=a(e[0].cloneNode(!1)),u=e.children("tfoot"),h="<div/>",p=function(t){return t?Lt(t):null};u.length||(u=null);var f=a(h,{class:o.container}).append(a(h,{class:o.header.self}).css({overflow:"hidden",position:"relative",border:0,width:n?p(n):"100%"}).append(a(h,{class:o.header.inner}).css({"box-sizing":"content-box",width:i.sXInner||"100%"}).append(d.removeAttr("id").css("margin-left",0).append("top"===l?r:null).append(e.children("thead"))))).append(a(h,{class:o.body}).css({position:"relative",overflow:"auto",width:p(n)}).append(e));u&&f.append(a(h,{class:o.footer.self}).css({overflow:"hidden",border:0,width:n?p(n):"100%"}).append(a(h,{class:o.footer.inner}).append(c.removeAttr("id").css("margin-left",0).append("bottom"===l?r:null).append(e.children("tfoot")))));var g=f.children(),m=g[0],v=g[1],b=u?g[2]:null;return a(v).on("scroll.DT",(function(){var t=this.scrollLeft;m.scrollLeft=t,u&&(b.scrollLeft=t)})),a("th, td",m).on("focus",(function(){var t=m.scrollLeft;v.scrollLeft=t,u&&(v.scrollLeft=t)})),a(v).css("max-height",s),i.bCollapse||a(v).css("height",s),t.nScrollHead=m,t.nScrollBody=v,t.nScrollFoot=b,t.aoDrawCallback.push(Et),f[0]}function Et(t){var e,i,n=t.oScroll.iBarWidth,s=a(t.nScrollHead).children("div"),o=s.children("table"),r=t.nScrollBody,l=a(r),d=a(t.nScrollFoot).children("div"),c=d.children("table"),u=a(t.nTHead),h=a(t.nTable),p=t.nTFoot&&a("th, td",t.nTFoot).length?a(t.nTFoot):null,f=t.oBrowser,g=r.scrollHeight>r.clientHeight;if(t.scrollBarVis!==g&&void 0!==t.scrollBarVis)return t.scrollBarVis=g,void I(t);if(t.scrollBarVis=g,h.children("thead, tfoot").remove(),(e=u.clone().prependTo(h)).find("th, td").removeAttr("tabindex"),e.find("[id]").removeAttr("id"),p&&(i=p.clone().prependTo(h)).find("[id]").removeAttr("id"),t.aiDisplay.length)for(var m=h.find("tbody tr").eq(0).find("th, td").map((function(e){return{idx:F(t,e),width:a(this).outerWidth()}})),v=0;v<m.length;v++){var b=t.aoColumns[m[v].idx].colEl[0];b.style.width.replace("px","")!==m[v].width&&(b.style.width=m[v].width+"px")}o.find("colgroup").remove(),o.append(t.colgroup.clone()),p&&(c.find("colgroup").remove(),c.append(t.colgroup.clone())),a("th, td",e).each((function(){a(this.childNodes).wrapAll('<div class="dt-scroll-sizing">')})),p&&a("th, td",i).each((function(){a(this.childNodes).wrapAll('<div class="dt-scroll-sizing">')}));var y=Math.floor(h.height())>r.clientHeight||"scroll"==l.css("overflow-y"),C="padding"+(f.bScrollbarLeft?"Left":"Right"),_=h.outerWidth();o.css("width",Lt(_)),s.css("width",Lt(_)).css(C,y?n+"px":"0px"),p&&(c.css("width",Lt(_)),d.css("width",Lt(_)).css(C,y?n+"px":"0px")),h.children("colgroup").prependTo(h),l.trigger("scroll"),!t.bSorted&&!t.bFiltered||t._drawHold||(r.scrollTop=0)}function Pt(t,e){var i=t.aoColumns[e];if(!i.maxLenString){for(var n,s="",o=-1,r=0,a=t.aiDisplayMaster.length;r<a;r++){var l=at(t,t.aiDisplayMaster[r])[e],d=l&&"object"==typeof l&&l.nodeType?l.innerHTML:l+"";d=d.replace(/id=".*?"/g,"").replace(/name=".*?"/g,""),(n=R(d).replace(/&nbsp;/g," ")).length>o&&(s=d,o=n.length)}i.maxLenString=s}return i.maxLenString}function Lt(t){return null===t?"0px":"number"==typeof t?t<0?"0px":t+"px":t.match(/\d$/)?t+"px":t}function Ot(t){var e=t.aoColumns;for(t.colgroup.empty(),Ee=0;Ee<e.length;Ee++)e[Ee].bVisible&&t.colgroup.append(e[Ee].colEl)}function It(t,e,i,n,s){Qt(e,i,(function(e){var i=!1,o=void 0===n?q(e.target):[n];if(o.length){for(var r=0,a=o.length;r<a;r++){if(!1!==Ht(t,o[r],r,e.shiftKey)&&(i=!0),1===t.aaSorting.length&&""===t.aaSorting[0][1])break}i&&(Vt(t,!0),setTimeout((function(){Kt(t),Ft(t,t.aiDisplay),Vt(t,!1),ft(t,!1,!1),s&&s()}),0))}}))}function Ft(t,e){var i,n=t.aiDisplayMaster,s={},o={};for(i=0;i<n.length;i++)s[n[i]]=i;for(i=0;i<e.length;i++)o[e[i]]=s[e[i]];e.sort((function(t,e){return o[t]-o[e]}))}function Nt(t,e,i){var n=function(i){if(a.isPlainObject(i)){if(void 0!==i.idx)e.push([i.idx,i.dir]);else if(i.name){var n=_(t.aoColumns,"sName").indexOf(i.name);-1!==n&&e.push([n,i.dir])}}else e.push(i)};if(a.isPlainObject(i))n(i);else if(i.length&&"number"==typeof i[0])n(i);else if(i.length)for(var s=0;s<i.length;s++)n(i[s])}function Yt(t){var e,i,n,s,o,r,d,c=[],u=l.ext.type.order,h=t.aoColumns,p=t.aaSortingFixed,f=a.isPlainObject(p),g=[];if(!t.oFeatures.bSort)return c;for(Array.isArray(p)&&Nt(t,g,p),f&&p.pre&&Nt(t,g,p.pre),Nt(t,g,t.aaSorting),f&&p.post&&Nt(t,g,p.post),e=0;e<g.length;e++)if(h[d=g[e][0]])for(i=0,n=(s=h[d].aDataSort).length;i<n;i++)r=h[o=s[i]].sType||"string",void 0===g[e]._idx&&(g[e]._idx=h[o].asSorting.indexOf(g[e][1])),g[e][1]&&c.push({src:d,col:o,dir:g[e][1],index:g[e]._idx,type:r,formatter:u[r+"-pre"],sorter:u[r+"-"+g[e][1]]});return c}function Kt(t,e,i){var n,s,o,r,a=[],d=l.ext.type.order,c=t.aoData,u=t.aiDisplayMaster;if(H(t),void 0!==e){var h=t.aoColumns[e];r=[{src:e,col:e,dir:i,index:0,type:h.sType,formatter:d[h.sType+"-pre"],sorter:d[h.sType+"-"+i]}],u=u.slice()}else r=Yt(t);for(n=0,s=r.length;n<s;n++)Wt(t,r[n].col);if("ssp"!=ie(t)&&0!==r.length){for(n=0,o=u.length;n<o;n++)a[n]=n;r.length&&"desc"===r[0].dir&&a.reverse(),u.sort((function(t,e){var i,n,s,o,l,d=r.length,u=c[t]._aSortData,h=c[e]._aSortData;for(s=0;s<d;s++)if(i=u[(l=r[s]).col],n=h[l.col],l.sorter){if(0!==(o=l.sorter(i,n)))return o}else if(0!==(o=i<n?-1:i>n?1:0))return"asc"===l.dir?o:-o;return(i=a[t])<(n=a[e])?-1:i>n?1:0}))}else 0===r.length&&u.sort((function(t,e){return t<e?-1:t>e?1:0}));return void 0===e&&(t.bSorted=!0,Zt(t,null,"order",[t,r])),u}function Ht(t,e,i,n){var s,o=t.aoColumns[e],r=t.aaSorting,a=o.asSorting,l=function(t,e){var i=t._idx;return void 0===i&&(i=a.indexOf(t[1])),i+1<a.length?i+1:e?null:0};if(!o.bSortable)return!1;if("number"==typeof r[0]&&(r=t.aaSorting=[r]),(n||i)&&t.oFeatures.bSortMulti){var d=_(r,"0").indexOf(e);-1!==d?(null===(s=l(r[d],!0))&&1===r.length&&(s=0),null===s?r.splice(d,1):(r[d][1]=a[s],r[d]._idx=s)):n?(r.push([e,a[0],0]),r[r.length-1]._idx=0):(r.push([e,r[0][1],0]),r[r.length-1]._idx=0)}else r.length&&r[0][0]==e?(s=l(r[0]),r.length=1,r[0][1]=a[s],r[0]._idx=s):(r.length=0,r.push([e,a[0]]),r[0]._idx=0)}function zt(t){var e,i,n,s=t.aLastSort,o=t.oClasses.order.position,r=Yt(t),l=t.oFeatures;if(l.bSort&&l.bSortClasses){for(e=0,i=s.length;e<i;e++)n=s[e].src,a(_(t.aoData,"anCells",n)).removeClass(o+(e<2?e+1:3));for(e=0,i=r.length;e<i;e++)n=r[e].src,a(_(t.aoData,"anCells",n)).addClass(o+(e<2?e+1:3))}t.aLastSort=r}function Wt(t,e){var i,n,s,o=t.aoColumns[e],r=l.ext.order[o.sSortDataType];r&&(i=r.call(t.oInstance,t,e,N(t,e)));for(var a=l.ext.type.order[o.sType+"-pre"],d=t.aoData,c=0;c<d.length;c++)d[c]&&((n=d[c])._aSortData||(n._aSortData=[]),n._aSortData[e]&&!r||(s=r?i[c]:G(t,c,e,"sort"),n._aSortData[e]=a?a(s,t):s))}function $t(t){if(!t._bLoadingState){var e={time:+new Date,start:t._iDisplayStart,length:t._iDisplayLength,order:a.extend(!0,[],t.aaSorting),search:a.extend({},t.oPreviousSearch),columns:t.aoColumns.map((function(e,i){return{visible:e.bVisible,search:a.extend({},t.aoPreSearchCols[i])}}))};t.oSavedState=e,Zt(t,"aoStateSaveParams","stateSaveParams",[t,e]),t.oFeatures.bStateSave&&!t.bDestroying&&t.fnStateSaveCallback.call(t.oInstance,t,e)}}function qt(t,e,i){var n,s,o=t.aoColumns;t._bLoadingState=!0;var r=t._bInitComplete?new l.Api(t):null;if(!e||!e.time)return t._bLoadingState=!1,void i();var d=t.iStateDuration;if(d>0&&e.time<+new Date-1e3*d)return t._bLoadingState=!1,void i();if(-1!==Zt(t,"aoStateLoadParams","stateLoadParams",[t,e]).indexOf(!1))return t._bLoadingState=!1,void i();if(e.columns&&o.length!==e.columns.length)return t._bLoadingState=!1,void i();if(t.oLoadedState=a.extend(!0,{},e),Zt(t,null,"stateLoadInit",[t,e],!0),void 0!==e.length&&(r?r.page.len(e.length):t._iDisplayLength=e.length),void 0!==e.start&&(null===r?(t._iDisplayStart=e.start,t.iInitDisplayStart=e.start):Bt(t,e.start/t._iDisplayLength)),void 0!==e.order&&(t.aaSorting=[],a.each(e.order,(function(e,i){t.aaSorting.push(i[0]>=o.length?[0,i[1]]:i)}))),void 0!==e.search&&a.extend(t.oPreviousSearch,e.search),e.columns){for(n=0,s=e.columns.length;n<s;n++){var c=e.columns[n];void 0!==c.visible&&(r?r.column(n).visible(c.visible,!1):o[n].bVisible=c.visible),void 0!==c.search&&a.extend(t.aoPreSearchCols[n],c.search)}r&&r.columns.adjust()}t._bLoadingState=!1,Zt(t,"aoStateLoaded","stateLoaded",[t,e]),i()}function Ut(t,e,i,n){if(i="DataTables warning: "+(t?"table id="+t.sTableId+" - ":"")+i,n&&(i+=". For more information about this error, please see https://datatables.net/tn/"+n),e)window.console&&console.log&&console.log(i);else{var s=l.ext,o=s.sErrMode||s.errMode;if(t&&Zt(t,null,"dt-error",[t,n,i],!0),"alert"==o)alert(i);else{if("throw"==o)throw new Error(i);"function"==typeof o&&o(t,n,i)}}}function Xt(t,e,i,n){Array.isArray(i)?a.each(i,(function(i,n){Array.isArray(n)?Xt(t,e,n[0],n[1]):Xt(t,e,n)})):(void 0===n&&(n=i),void 0!==e[i]&&(t[n]=e[i]))}function Gt(t,e,i){var n;for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(n=e[s],a.isPlainObject(n)?(a.isPlainObject(t[s])||(t[s]={}),a.extend(!0,t[s],n)):i&&"data"!==s&&"aaData"!==s&&Array.isArray(n)?t[s]=n.slice():t[s]=n);return t}function Qt(t,e,i){a(t).on("click.DT",e,(function(t){i(t)})).on("keypress.DT",e,(function(t){13===t.which&&(t.preventDefault(),i(t))})).on("selectstart.DT",e,(function(){return!1}))}function Jt(t,e,i){i&&t[e].push(i)}function Zt(t,e,i,n,s){var o=[];if(e&&(o=t[e].slice().reverse().map((function(e){return e.apply(t.oInstance,n)}))),null!==i){var r=a.Event(i+".dt"),l=a(t.nTable);r.dt=t.api,l[s?"trigger":"triggerHandler"](r,n),s&&0===l.parents("body").length&&a("body").trigger(r,n),o.push(r.result)}return o}function te(t){var e=t._iDisplayStart,i=t.fnDisplayEnd(),n=t._iDisplayLength;e>=i&&(e=i-n),e-=e%n,(-1===n||e<0)&&(e=0),t._iDisplayStart=e}function ee(t,e){var i=t.renderer,n=l.ext.renderer[e];return a.isPlainObject(i)&&i[e]?n[i[e]]||n._:"string"==typeof i&&n[i]||n._}function ie(t){return t.oFeatures.bServerSide?"ssp":t.ajax?"ajax":"dom"}function ne(t,e,i){var n=t.fnFormatNumber,s=t._iDisplayStart+1,o=t._iDisplayLength,r=t.fnRecordsDisplay(),a=t.fnRecordsTotal(),l=-1===o;return e.replace(/_START_/g,n.call(t,s)).replace(/_END_/g,n.call(t,t.fnDisplayEnd())).replace(/_MAX_/g,n.call(t,a)).replace(/_TOTAL_/g,n.call(t,r)).replace(/_PAGE_/g,n.call(t,l?1:Math.ceil(s/o))).replace(/_PAGES_/g,n.call(t,l?1:Math.ceil(r/o))).replace(/_ENTRIES_/g,t.api.i18n("entries","",i)).replace(/_ENTRIES-MAX_/g,t.api.i18n("entries","",a)).replace(/_ENTRIES-TOTAL_/g,t.api.i18n("entries","",r))}var se=[],oe=Array.prototype;function re(t,e,i){return function(){var n=e.apply(t||this,arguments);return s.extend(n,n,i.methodExt),n}}function ae(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i].name===e)return t[i];return null}s=function(t,e){if(!(this instanceof s))return new s(t,e);var i=[],n=function(t){var e=function(t){var e,i,n=l.settings,s=_(n,"nTable");return t?t.nTable&&t.oFeatures?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?-1!==(e=s.indexOf(t))?[n[e]]:null:t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?i=a(t).get():t instanceof a&&(i=t.get()),i?n.filter((function(t,e){return i.includes(s[e])})):void 0):[]}(t);e&&i.push.apply(i,e)};if(Array.isArray(t))for(var o=0,r=t.length;o<r;o++)n(t[o]);else n(t);this.context=i.length>1?T(i):i,e&&this.push.apply(this,e),this.selector={rows:null,cols:null,opts:null},s.extend(this,this,se)},l.Api=s,a.extend(s.prototype,{any:function(){return 0!==this.count()},context:[],count:function(){return this.flatten().length},each:function(t){for(var e=0,i=this.length;e<i;e++)t.call(this,this[e],e,this);return this},eq:function(t){var e=this.context;return e.length>t?new s(e[t],this[t]):null},filter:function(t){var e=oe.filter.call(this,t,this);return new s(this.context,e)},flatten:function(){var t=[];return new s(this.context,t.concat.apply(t,this.toArray()))},get:function(t){return this[t]},join:oe.join,includes:function(t){return-1!==this.indexOf(t)},indexOf:oe.indexOf,iterator:function(t,e,i,n){var o,r,a,l,d,c,u,h,p=[],f=this.context,g=this.selector;for("string"==typeof t&&(n=i,i=e,e=t,t=!1),r=0,a=f.length;r<a;r++){var m=new s(f[r]);if("table"===e)void 0!==(o=i.call(m,f[r],r))&&p.push(o);else if("columns"===e||"rows"===e)void 0!==(o=i.call(m,f[r],this[r],r))&&p.push(o);else if("every"===e||"column"===e||"column-rows"===e||"row"===e||"cell"===e)for(u=this[r],"column-rows"===e&&(c=pe(f[r],g.opts)),l=0,d=u.length;l<d;l++)h=u[l],void 0!==(o="cell"===e?i.call(m,f[r],h.row,h.column,r,l):i.call(m,f[r],h,r,l,c))&&p.push(o)}if(p.length||n){var v=new s(f,t?p.concat.apply([],p):p),b=v.selector;return b.rows=g.rows,b.cols=g.cols,b.opts=g.opts,v}return this},lastIndexOf:oe.lastIndexOf,length:0,map:function(t){var e=oe.map.call(this,t,this);return new s(this.context,e)},pluck:function(t){var e=l.util.get(t);return this.map((function(t){return e(t)}))},pop:oe.pop,push:oe.push,reduce:oe.reduce,reduceRight:oe.reduceRight,reverse:oe.reverse,selector:null,shift:oe.shift,slice:function(){return new s(this.context,this)},sort:oe.sort,splice:oe.splice,toArray:function(){return oe.slice.call(this)},to$:function(){return a(this)},toJQuery:function(){return a(this)},unique:function(){return new s(this.context,T(this.toArray()))},unshift:oe.unshift}),window.__apiStruct=se,s.extend=function(t,e,i){var n,o,r;if(i.length&&e&&(e instanceof s||e.__dt_wrapper))for(n=0,o=i.length;n<o;n++)"__proto__"!==(r=i[n]).name&&(e[r.name]="function"===r.type?re(t,r.val,r):"object"===r.type?{}:r.val,e[r.name].__dt_wrapper=!0,s.extend(t,e[r.name],r.propExt))},s.register=o=function(t,e){if(Array.isArray(t))for(var i=0,n=t.length;i<n;i++)s.register(t[i],e);else{var o,r,l,d,c=t.split("."),u=se;for(o=0,r=c.length;o<r;o++){var h=ae(u,l=(d=-1!==c[o].indexOf("()"))?c[o].replace("()",""):c[o]);h||(h={name:l,val:{},methodExt:[],propExt:[],type:"object"},u.push(h)),o===r-1?(h.val=e,h.type="function"==typeof e?"function":a.isPlainObject(e)?"object":"other"):u=d?h.methodExt:h.propExt}}},s.registerPlural=r=function(t,e,i){s.register(t,i),s.register(e,(function(){var t=i.apply(this,arguments);return t===this?this:t instanceof s?t.length?Array.isArray(t[0])?new s(t.context,t[0]):t[0]:void 0:t}))};var le=function(t,e){if(Array.isArray(t)){var i=[];return t.forEach((function(t){var n=le(t,e);i.push.apply(i,n)})),i.filter((function(t){return t}))}if("number"==typeof t)return[e[t]];var n=e.map((function(t){return t.nTable}));return a(n).filter(t).map((function(){var t=n.indexOf(this);return e[t]})).toArray()};o("tables()",(function(t){return null!=t?new s(le(t,this.context)):this})),o("table()",(function(t){var e=this.tables(t),i=e.context;return i.length?new s(i[0]):e})),[["nodes","node","nTable"],["body","body","nTBody"],["header","header","nTHead"],["footer","footer","nTFoot"]].forEach((function(t){r("tables()."+t[0]+"()","table()."+t[1]+"()",(function(){return this.iterator("table",(function(e){return e[t[2]]}),1)}))})),[["header","aoHeader"],["footer","aoFooter"]].forEach((function(t){o("table()."+t[0]+".structure()",(function(e){var i=this.columns(e).indexes().flatten(),n=this.context[0];return ut(n,n[t[1]],i)}))})),r("tables().containers()","table().container()",(function(){return this.iterator("table",(function(t){return t.nTableWrapper}),1)})),o("tables().every()",(function(t){var e=this;return this.iterator("table",(function(i,n){t.call(e.table(n),n)}))})),o("caption()",(function(t,e){var i=this.context;if(void 0===t){var n=i[0].captionNode;return n&&i.length?n.innerHTML:null}return this.iterator("table",(function(i){var n=a(i.nTable),s=a(i.captionNode),o=a(i.nTableWrapper);if(s.length||(s=a("<caption/>").html(t),i.captionNode=s[0],e||(n.prepend(s),e=s.css("caption-side"))),s.html(t),e&&(s.css("caption-side",e),s[0]._captionSide=e),o.find("div.dataTables_scroll").length){var r="top"===e?"Head":"Foot";o.find("div.dataTables_scroll"+r+" table").prepend(s)}else n.prepend(s)}),1)})),o("caption.node()",(function(){var t=this.context;return t.length?t[0].captionNode:null})),o("draw()",(function(t){return this.iterator("table",(function(e){"page"===t?pt(e):("string"==typeof t&&(t="full-hold"!==t),ft(e,!1===t))}))})),o("page()",(function(t){return void 0===t?this.page.info().page:this.iterator("table",(function(e){Bt(e,t)}))})),o("page.info()",(function(){if(0!==this.context.length){var t=this.context[0],e=t._iDisplayStart,i=t.oFeatures.bPaginate?t._iDisplayLength:-1,n=t.fnRecordsDisplay(),s=-1===i;return{page:s?0:Math.floor(e/i),pages:s?1:Math.ceil(n/i),start:e,end:t.fnDisplayEnd(),length:i,recordsTotal:t.fnRecordsTotal(),recordsDisplay:n,serverSide:"ssp"===ie(t)}}})),o("page.len()",(function(t){return void 0===t?0!==this.context.length?this.context[0]._iDisplayLength:void 0:this.iterator("table",(function(e){kt(e,t)}))}));var de=function(t,e,i){if(i){var n=new s(t);n.one("draw",(function(){i(n.ajax.json())}))}if("ssp"==ie(t))ft(t,e);else{Vt(t,!0);var o=t.jqXHR;o&&4!==o.readyState&&o.abort(),Ct(t,{},(function(i){st(t);for(var n=_t(t,i),s=0,o=n.length;s<o;s++)U(t,n[s]);ft(t,e),St(t),Vt(t,!1)}))}};o("ajax.json()",(function(){var t=this.context;if(t.length>0)return t[0].json})),o("ajax.params()",(function(){var t=this.context;if(t.length>0)return t[0].oAjaxData})),o("ajax.reload()",(function(t,e){return this.iterator("table",(function(i){de(i,!1===e,t)}))})),o("ajax.url()",(function(t){var e=this.context;if(void 0===t){if(0===e.length)return;return e=e[0],a.isPlainObject(e.ajax)?e.ajax.url:e.ajax}return this.iterator("table",(function(e){a.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t}))})),o("ajax.url().load()",(function(t,e){return this.iterator("table",(function(i){de(i,!1===e,t)}))}));var ce=function(t,e,i,s,o){var r,a,l,d,c,u,h=[],p=typeof e;for(e&&"string"!==p&&"function"!==p&&void 0!==e.length||(e=[e]),l=0,d=e.length;l<d;l++)for(c=0,u=(a=e[l]&&e[l].split&&!e[l].match(/[[(:]/)?e[l].split(","):[e[l]]).length;c<u;c++)(r=(r=i("string"==typeof a[c]?a[c].trim():a[c])).filter((function(t){return null!=t})))&&r.length&&(h=h.concat(r));var f=n.selector[t];if(f.length)for(l=0,d=f.length;l<d;l++)h=f[l](s,o,h);return T(h)},ue=function(t){return t||(t={}),t.filter&&void 0===t.search&&(t.search=t.filter),a.extend({search:"none",order:"current",page:"all"},t)},he=function(t){let e=new s(t.context[0]);return t.length&&e.push(t[0]),e.selector=t.selector,e.length&&e[0].length>1&&e[0].splice(1),e},pe=function(t,e){var i,n,s,o=[],r=t.aiDisplay,a=t.aiDisplayMaster,l=e.search,d=e.order;if("current"==e.page)for(i=t._iDisplayStart,n=t.fnDisplayEnd();i<n;i++)o.push(r[i]);else if("current"==d||"applied"==d){if("none"==l)o=a.slice();else if("applied"==l)o=r.slice();else if("removed"==l){var c={};for(i=0,n=r.length;i<n;i++)c[r[i]]=null;a.forEach((function(t){Object.prototype.hasOwnProperty.call(c,t)||o.push(t)}))}}else if("index"==d||"original"==d)for(i=0,n=t.aoData.length;i<n;i++)t.aoData[i]&&("none"==l||-1===(s=r.indexOf(i))&&"removed"==l||s>=0&&"applied"==l)&&o.push(i);else if("number"==typeof d){var u=Kt(t,d,"asc");if("none"===l)o=u;else for(i=0;i<u.length;i++)(-1===(s=r.indexOf(u[i]))&&"removed"==l||s>=0&&"applied"==l)&&o.push(u[i])}return o};o("rows()",(function(t,e){void 0===t?t="":a.isPlainObject(t)&&(e=t,t=""),e=ue(e);var i=this.iterator("table",(function(i){return function(t,e,i){var n,s=ce("row",e,(function(e){var s=v(e),o=t.aoData;if(null!==s&&!i)return[s];if(n||(n=pe(t,i)),null!==s&&-1!==n.indexOf(s))return[s];if(null==e||""===e)return n;if("function"==typeof e)return n.map((function(t){var i=o[t];return e(t,i._aData,i.nTr)?t:null}));if(e.nodeName){var r=e._DT_RowIndex,l=e._DT_CellIndex;if(void 0!==r)return o[r]&&o[r].nTr===e?[r]:[];if(l)return o[l.row]&&o[l.row].nTr===e.parentNode?[l.row]:[];var d=a(e).closest("*[data-dt-row]");return d.length?[d.data("dt-row")]:[]}if("string"==typeof e&&"#"===e.charAt(0)){var c=t.aIds[e.replace(/^#/,"")];if(void 0!==c)return[c.idx]}var u=w(x(t.aoData,n,"nTr"));return a(u).filter(e).map((function(){return this._DT_RowIndex})).toArray()}),t,i);return"current"!==i.order&&"applied"!==i.order||Ft(t,s),s}(i,t,e)}),1);return i.selector.rows=t,i.selector.opts=e,i})),o("rows().nodes()",(function(){return this.iterator("row",(function(t,e){return t.aoData[e].nTr||void 0}),1)})),o("rows().data()",(function(){return this.iterator(!0,"rows",(function(t,e){return x(t.aoData,e,"_aData")}),1)})),r("rows().cache()","row().cache()",(function(t){return this.iterator("row",(function(e,i){var n=e.aoData[i];return"search"===t?n._aFilterData:n._aSortData}),1)})),r("rows().invalidate()","row().invalidate()",(function(t){return this.iterator("row",(function(e,i){ot(e,i,t)}))})),r("rows().indexes()","row().index()",(function(){return this.iterator("row",(function(t,e){return e}),1)})),r("rows().ids()","row().id()",(function(t){for(var e=[],i=this.context,n=0,o=i.length;n<o;n++)for(var r=0,a=this[n].length;r<a;r++){var l=i[n].rowIdFn(i[n].aoData[this[n][r]]._aData);e.push((!0===t?"#":"")+l)}return new s(i,e)})),r("rows().remove()","row().remove()",(function(){return this.iterator("row",(function(t,e){var i=t.aoData,n=i[e],s=t.aiDisplayMaster.indexOf(e);-1!==s&&t.aiDisplayMaster.splice(s,1),t._iRecordsDisplay>0&&t._iRecordsDisplay--,te(t);var o=t.rowIdFn(n._aData);void 0!==o&&delete t.aIds[o],i[e]=null})),this})),o("rows.add()",(function(t){var e=this.iterator("table",(function(e){var i,n,s,o=[];for(n=0,s=t.length;n<s;n++)(i=t[n]).nodeName&&"TR"===i.nodeName.toUpperCase()?o.push(X(e,i)[0]):o.push(U(e,i));return o}),1),i=this.rows(-1);return i.pop(),i.push.apply(i,e),i})),o("row()",(function(t,e){return he(this.rows(t,e))})),o("row().data()",(function(t){var e=this.context;if(void 0===t)return e.length&&this.length&&this[0].length?e[0].aoData[this[0]]._aData:void 0;var i=e[0].aoData[this[0]];return i._aData=t,Array.isArray(t)&&i.nTr&&i.nTr.id&&it(e[0].rowId)(t,i.nTr.id),ot(e[0],this[0],"data"),this})),o("row().node()",(function(){var t=this.context;return t.length&&this.length&&this[0].length&&t[0].aoData[this[0]].nTr||null})),o("row.add()",(function(t){t instanceof a&&t.length&&(t=t[0]);var e=this.iterator("table",(function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?X(e,t)[0]:U(e,t)}));return this.row(e[0])})),a(document).on("plugin-init.dt",(function(t,e){var i=new s(e);i.on("stateSaveParams.DT",(function(t,e,i){for(var n=e.rowIdFn,s=e.aiDisplayMaster,o=[],r=0;r<s.length;r++){var a=s[r],l=e.aoData[a];l._detailsShow&&o.push("#"+n(l._aData))}i.childRows=o})),i.on("stateLoaded.DT",(function(t,e,n){fe(i,n)})),fe(i,i.state.loaded())}));var fe=function(t,e){e&&e.childRows&&t.rows(e.childRows.map((function(t){return t.replace(/(?<!\\):/g,"\\:")}))).every((function(){Zt(t.settings()[0],null,"requestChild",[this])}))},ge=l.util.throttle((function(t){$t(t[0])}),500),me=function(t,e){var i=t.context;if(i.length){var n=i[0].aoData[void 0!==e?e:t[0]];n&&n._details&&(n._details.remove(),n._detailsShow=void 0,n._details=void 0,a(n.nTr).removeClass("dt-hasChild"),ge(i))}},ve=function(t,e){var i=t.context;if(i.length&&t.length){var n=i[0].aoData[t[0]];n._details&&(n._detailsShow=e,e?(n._details.insertAfter(n.nTr),a(n.nTr).addClass("dt-hasChild")):(n._details.detach(),a(n.nTr).removeClass("dt-hasChild")),Zt(i[0],null,"childRow",[e,t.row(t[0])]),be(i[0]),ge(i))}},be=function(t){var e=new s(t),i=".dt.DT_details",n="draw"+i,o="column-sizing"+i,r="destroy"+i,l=t.aoData;e.off(n+" "+o+" "+r),_(l,"_details").length>0&&(e.on(n,(function(i,n){t===n&&e.rows({page:"current"}).eq(0).each((function(t){var e=l[t];e._detailsShow&&e._details.insertAfter(e.nTr)}))})),e.on(o,(function(e,i){if(t===i)for(var n,s=Y(i),o=0,r=l.length;o<r;o++)(n=l[o])&&n._details&&n._details.each((function(){var t=a(this).children("td");1==t.length&&t.attr("colspan",s)}))})),e.on(r,(function(i,n){if(t===n)for(var s=0,o=l.length;s<o;s++)l[s]&&l[s]._details&&me(e,s)})))},ye="row().child",Ce=ye+"()";o(Ce,(function(t,e){var i=this.context;return void 0===t?i.length&&this.length&&i[0].aoData[this[0]]?i[0].aoData[this[0]]._details:void 0:(!0===t?this.child.show():!1===t?me(this):i.length&&this.length&&function(t,e,i,n){var s=[],o=function(i,n){if(Array.isArray(i)||i instanceof a)for(var r=0,l=i.length;r<l;r++)o(i[r],n);else if(i.nodeName&&"tr"===i.nodeName.toLowerCase())i.setAttribute("data-dt-row",e.idx),s.push(i);else{var d=a("<tr><td></td></tr>").attr("data-dt-row",e.idx).addClass(n);a("td",d).addClass(n).html(i)[0].colSpan=Y(t),s.push(d[0])}};o(i,n),e._details&&e._details.detach(),e._details=a(s),e._detailsShow&&e._details.insertAfter(e.nTr)}(i[0],i[0].aoData[this[0]],t,e),this)})),o([ye+".show()",Ce+".show()"],(function(){return ve(this,!0),this})),o([ye+".hide()",Ce+".hide()"],(function(){return ve(this,!1),this})),o([ye+".remove()",Ce+".remove()"],(function(){return me(this),this})),o(ye+".isShown()",(function(){var t=this.context;return t.length&&this.length&&t[0].aoData[this[0]]._detailsShow||!1}));var _e=/^([^:]+):(name|title|visIdx|visible)$/,xe=function(t,e,i,n,s,o){for(var r=[],a=0,l=s.length;a<l;a++)r.push(G(t,s[a],e,o));return r},Me=function(t,e,i){var n=t.aoHeader;return n[void 0!==i?i:t.bSortCellsTop?0:n.length-1][e].cell};o("columns()",(function(t,e){void 0===t?t="":a.isPlainObject(t)&&(e=t,t=""),e=ue(e);var i=this.iterator("table",(function(i){return function(t,e,i){var n=t.aoColumns,s=_(n,"sName"),o=_(n,"sTitle"),r=l.util.get("[].[].cell")(t.aoHeader),d=T(S([],r));return ce("column",e,(function(e){var r=v(e);if(""===e)return M(n.length);if(null!==r)return[r>=0?r:n.length+r];if("function"==typeof e){var l=pe(t,i);return n.map((function(i,n){return e(n,xe(t,n,0,0,l),Me(t,n))?n:null}))}var c="string"==typeof e?e.match(_e):"";if(c)switch(c[2]){case"visIdx":case"visible":var u=parseInt(c[1],10);if(u<0){var h=n.map((function(t,e){return t.bVisible?e:null}));return[h[h.length+u]]}return[F(t,u)];case"name":return s.map((function(t,e){return t===c[1]?e:null}));case"title":return o.map((function(t,e){return t===c[1]?e:null}));default:return[]}if(e.nodeName&&e._DT_CellIndex)return[e._DT_CellIndex.column];var p=a(d).filter(e).map((function(){return q(this)})).toArray();if(p.length||!e.nodeName)return p;var f=a(e).closest("*[data-dt-column]");return f.length?[f.data("dt-column")]:[]}),t,i)}(i,t,e)}),1);return i.selector.cols=t,i.selector.opts=e,i})),r("columns().header()","column().header()",(function(t){return this.iterator("column",(function(e,i){return Me(e,i,t)}),1)})),r("columns().footer()","column().footer()",(function(t){return this.iterator("column",(function(e,i){return e.aoFooter.length?e.aoFooter[void 0!==t?t:0][i].cell:null}),1)})),r("columns().data()","column().data()",(function(){return this.iterator("column-rows",xe,1)})),r("columns().render()","column().render()",(function(t){return this.iterator("column-rows",(function(e,i,n,s,o){return xe(e,i,0,0,o,t)}),1)})),r("columns().dataSrc()","column().dataSrc()",(function(){return this.iterator("column",(function(t,e){return t.aoColumns[e].mData}),1)})),r("columns().cache()","column().cache()",(function(t){return this.iterator("column-rows",(function(e,i,n,s,o){return x(e.aoData,o,"search"===t?"_aFilterData":"_aSortData",i)}),1)})),r("columns().init()","column().init()",(function(){return this.iterator("column",(function(t,e){return t.aoColumns[e]}),1)})),r("columns().nodes()","column().nodes()",(function(){return this.iterator("column-rows",(function(t,e,i,n,s){return x(t.aoData,s,"anCells",e)}),1)})),r("columns().titles()","column().title()",(function(t,e){return this.iterator("column",(function(i,n){"number"==typeof t&&(e=t,t=void 0);var s=a("span.dt-column-title",this.column(n).header(e));return void 0!==t?(s.html(t),this):s.html()}),1)})),r("columns().types()","column().type()",(function(){return this.iterator("column",(function(t,e){var i=t.aoColumns[e].sType;return i||H(t),i}),1)})),r("columns().visible()","column().visible()",(function(t,e){var i=this,n=[],s=this.iterator("column",(function(e,i){if(void 0===t)return e.aoColumns[i].bVisible;(function(t,e,i){var n,s,o,r,l=t.aoColumns,d=l[e],c=t.aoData;if(void 0===i)return d.bVisible;if(d.bVisible===i)return!1;if(i){var u=_(l,"bVisible").indexOf(!0,e+1);for(s=0,o=c.length;s<o;s++)c[s]&&(r=c[s].nTr,n=c[s].anCells,r&&r.insertBefore(n[e],n[u]||null))}else a(_(t.aoData,"anCells",e)).detach();return d.bVisible=i,Ot(t),!0})(e,i,t)&&n.push(i)}));return void 0!==t&&this.iterator("table",(function(s){ht(s,s.aoHeader),ht(s,s.aoFooter),s.aiDisplay.length||a(s.nTBody).find("td[colspan]").attr("colspan",Y(s)),$t(s),i.iterator("column",(function(i,s){n.includes(s)&&Zt(i,null,"column-visibility",[i,s,t,e])})),n.length&&(void 0===e||e)&&i.columns.adjust()})),s})),r("columns().widths()","column().width()",(function(){var t=this.columns(":visible").count(),e=a("<tr>").html("<td>"+Array(t).join("</td><td>")+"</td>");a(this.table().body()).append(e);var i=e.children().map((function(){return a(this).outerWidth()}));return e.remove(),this.iterator("column",(function(t,e){var n=N(t,e);return null!==n?i[n]:0}),1)})),r("columns().indexes()","column().index()",(function(t){return this.iterator("column",(function(e,i){return"visible"===t?N(e,i):i}),1)})),o("columns.adjust()",(function(){return this.iterator("table",(function(t){I(t)}),1)})),o("column.index()",(function(t,e){if(0!==this.context.length){var i=this.context[0];if("fromVisible"===t||"toData"===t)return F(i,e);if("fromData"===t||"toVisible"===t)return N(i,e)}})),o("column()",(function(t,e){return he(this.columns(t,e))}));o("cells()",(function(t,e,i){if(a.isPlainObject(t)&&(void 0===t.row?(i=t,t=null):(i=e,e=null)),a.isPlainObject(e)&&(i=e,e=null),null==e)return this.iterator("table",(function(e){return function(t,e,i){var n,s,o,r,l,d,c,u=t.aoData,h=pe(t,i),p=w(x(u,h,"anCells")),f=a(S([],p)),g=t.aoColumns.length;return ce("cell",e,(function(e){var i="function"==typeof e;if(null==e||i){for(s=[],o=0,r=h.length;o<r;o++)for(n=h[o],l=0;l<g;l++)d={row:n,column:l},i?(c=u[n],e(d,G(t,n,l),c.anCells?c.anCells[l]:null)&&s.push(d)):s.push(d);return s}if(a.isPlainObject(e))return void 0!==e.column&&void 0!==e.row&&-1!==h.indexOf(e.row)?[e]:[];var p=f.filter(e).map((function(t,e){return{row:e._DT_CellIndex.row,column:e._DT_CellIndex.column}})).toArray();return p.length||!e.nodeName?p:(c=a(e).closest("*[data-dt-row]")).length?[{row:c.data("dt-row"),column:c.data("dt-column")}]:[]}),t,i)}(e,t,ue(i))}));var n,s,o,r,l=i?{page:i.page,order:i.order,search:i.search}:{},d=this.columns(e,l),c=this.rows(t,l),u=this.iterator("table",(function(t,e){var i=[];for(n=0,s=c[e].length;n<s;n++)for(o=0,r=d[e].length;o<r;o++)i.push({row:c[e][n],column:d[e][o]});return i}),1),h=i&&i.selected?this.cells(u,i):u;return a.extend(h.selector,{cols:e,rows:t,opts:i}),h})),r("cells().nodes()","cell().node()",(function(){return this.iterator("cell",(function(t,e,i){var n=t.aoData[e];return n&&n.anCells?n.anCells[i]:void 0}),1)})),o("cells().data()",(function(){return this.iterator("cell",(function(t,e,i){return G(t,e,i)}),1)})),r("cells().cache()","cell().cache()",(function(t){return t="search"===t?"_aFilterData":"_aSortData",this.iterator("cell",(function(e,i,n){return e.aoData[i][t][n]}),1)})),r("cells().render()","cell().render()",(function(t){return this.iterator("cell",(function(e,i,n){return G(e,i,n,t)}),1)})),r("cells().indexes()","cell().index()",(function(){return this.iterator("cell",(function(t,e,i){return{row:e,column:i,columnVisible:N(t,i)}}),1)})),r("cells().invalidate()","cell().invalidate()",(function(t){return this.iterator("cell",(function(e,i,n){ot(e,i,t,n)}))})),o("cell()",(function(t,e,i){return he(this.cells(t,e,i))})),o("cell().data()",(function(t){var e,i,n,s,o,r,a=this.context,l=this[0];return void 0===t?a.length&&l.length?G(a[0],l[0].row,l[0].column):void 0:(e=a[0],i=l[0].row,n=l[0].column,s=t,o=e.aoColumns[n],r=e.aoData[i]._aData,o.fnSetData(r,s,{settings:e,row:i,col:n}),ot(a[0],l[0].row,"data",l[0].column),this)})),o("order()",(function(t,e){var i=this.context,n=Array.prototype.slice.call(arguments);return void 0===t?0!==i.length?i[0].aaSorting:void 0:("number"==typeof t?t=[[t,e]]:n.length>1&&(t=n),this.iterator("table",(function(e){e.aaSorting=Array.isArray(t)?t.slice():t})))})),o("order.listener()",(function(t,e,i){return this.iterator("table",(function(n){It(n,t,{},e,i)}))})),o("order.fixed()",(function(t){if(!t){var e=this.context,i=e.length?e[0].aaSortingFixed:void 0;return Array.isArray(i)?{pre:i}:i}return this.iterator("table",(function(e){e.aaSortingFixed=a.extend(!0,{},t)}))})),o(["columns().order()","column().order()"],(function(t){var e=this;return t?this.iterator("table",(function(i,n){i.aaSorting=e[n].map((function(e){return[e,t]}))})):this.iterator("column",(function(t,e){for(var i=Yt(t),n=0,s=i.length;n<s;n++)if(i[n].col===e)return i[n].dir;return null}),1)})),r("columns().orderable()","column().orderable()",(function(t){return this.iterator("column",(function(e,i){var n=e.aoColumns[i];return t?n.asSorting:n.bSortable}),1)})),o("processing()",(function(t){return this.iterator("table",(function(e){Vt(e,t)}))})),o("search()",(function(t,e,i,n){var s=this.context;return void 0===t?0!==s.length?s[0].oPreviousSearch.search:void 0:this.iterator("table",(function(s){s.oFeatures.bFilter&&Mt(s,"object"==typeof e?a.extend(s.oPreviousSearch,e,{search:t}):a.extend(s.oPreviousSearch,{search:t,regex:null!==e&&e,smart:null===i||i,caseInsensitive:null===n||n}))}))})),o("search.fixed()",(function(t,e){var i=this.iterator(!0,"table",(function(i){var n=i.searchFixed;return t?void 0===e?n[t]:(null===e?delete n[t]:n[t]=e,this):Object.keys(n)}));return void 0!==t&&void 0===e?i[0]:i})),r("columns().search()","column().search()",(function(t,e,i,n){return this.iterator("column",(function(s,o){var r=s.aoPreSearchCols;if(void 0===t)return r[o].search;s.oFeatures.bFilter&&("object"==typeof e?a.extend(r[o],e,{search:t}):a.extend(r[o],{search:t,regex:null!==e&&e,smart:null===i||i,caseInsensitive:null===n||n}),Mt(s,s.oPreviousSearch))}))})),o(["columns().search.fixed()","column().search.fixed()"],(function(t,e){var i=this.iterator(!0,"column",(function(i,n){var s=i.aoColumns[n].searchFixed;return t?void 0===e?s[t]:(null===e?delete s[t]:s[t]=e,this):Object.keys(s)}));return void 0!==t&&void 0===e?i[0]:i})),o("state()",(function(t,e){if(!t)return this.context.length?this.context[0].oSavedState:null;var i=a.extend(!0,{},t);return this.iterator("table",(function(t){!1!==e&&(i.time=+new Date+100),qt(t,i,(function(){}))}))})),o("state.clear()",(function(){return this.iterator("table",(function(t){t.fnStateSaveCallback.call(t.oInstance,t,{})}))})),o("state.loaded()",(function(){return this.context.length?this.context[0].oLoadedState:null})),o("state.save()",(function(){return this.iterator("table",(function(t){$t(t)}))})),l.use=function(t,e){"lib"===e||t.fn?a=t:"win"==e||t.document?(window=t,document=t.document):"datetime"!==e&&"DateTime"!==t.type||(l.DateTime=t)},l.factory=function(t,e){var i=!1;return t&&t.document&&(window=t,document=t.document),e&&e.fn&&e.fn.jquery&&(a=e,i=!0),i},l.versionCheck=function(t,e){for(var i,n,s=e?e.split("."):l.version.split("."),o=t.split("."),r=0,a=o.length;r<a;r++)if((i=parseInt(s[r],10)||0)!==(n=parseInt(o[r],10)||0))return i>n;return!0},l.isDataTable=function(t){var e=a(t).get(0),i=!1;return t instanceof l.Api||(a.each(l.settings,(function(t,n){var s=n.nScrollHead?a("table",n.nScrollHead)[0]:null,o=n.nScrollFoot?a("table",n.nScrollFoot)[0]:null;n.nTable!==e&&s!==e&&o!==e||(i=!0)})),i)},l.tables=function(t){var e=!1;a.isPlainObject(t)&&(e=t.api,t=t.visible);var i=l.settings.filter((function(e){return!!(!t||t&&a(e.nTable).is(":visible"))})).map((function(t){return t.nTable}));return e?new s(i):i},l.camelToHungarian=V,o("$()",(function(t,e){var i=this.rows(e).nodes(),n=a(i);return a([].concat(n.filter(t).toArray(),n.find(t).toArray()))})),a.each(["on","one","off"],(function(t,e){o(e+"()",(function(){var t=Array.prototype.slice.call(arguments);t[0]=t[0].split(/\s/).map((function(t){return t.match(/\.dt\b/)?t:t+".dt"})).join(" ");var i=a(this.tables().nodes());return i[e].apply(i,t),this}))})),o("clear()",(function(){return this.iterator("table",(function(t){st(t)}))})),o("error()",(function(t){return this.iterator("table",(function(e){Ut(e,0,t)}))})),o("settings()",(function(){return new s(this.context,this.context)})),o("init()",(function(){var t=this.context;return t.length?t[0].oInit:null})),o("data()",(function(){return this.iterator("table",(function(t){return _(t.aoData,"_aData")})).flatten()})),o("trigger()",(function(t,e,i){return this.iterator("table",(function(n){return Zt(n,null,t,e,i)})).flatten()})),o("ready()",(function(t){var e=this.context;return t?this.tables().every((function(){this.context[0]._bInitComplete?t.call(this):this.on("init",(function(){t.call(this)}))})):e.length?e[0]._bInitComplete||!1:null})),o("destroy()",(function(t){return t=t||!1,this.iterator("table",(function(e){var i=e.oClasses,n=e.nTable,o=e.nTBody,r=e.nTHead,d=e.nTFoot,c=a(n),u=a(o),h=a(e.nTableWrapper),p=e.aoData.map((function(t){return t?t.nTr:null})),f=i.order;e.bDestroying=!0,Zt(e,"aoDestroyCallback","destroy",[e],!0),t||new s(e).columns().visible(!0),h.off(".DT").find(":not(tbody *)").off(".DT"),a(window).off(".DT-"+e.sInstance),n!=r.parentNode&&(c.children("thead").detach(),c.append(r)),d&&n!=d.parentNode&&(c.children("tfoot").detach(),c.append(d)),e.colgroup.remove(),e.aaSorting=[],e.aaSortingFixed=[],zt(e),a("th, td",r).removeClass(f.canAsc+" "+f.canDesc+" "+f.isAsc+" "+f.isDesc).css("width",""),u.children().detach(),u.append(p);var g=e.nTableWrapper.parentNode,m=e.nTableWrapper.nextSibling,v=t?"remove":"detach";c[v](),h[v](),!t&&g&&(g.insertBefore(n,m),c.css("width",e.sDestroyWidth).removeClass(i.table));var b=l.settings.indexOf(e);-1!==b&&l.settings.splice(b,1)}))})),a.each(["column","row","cell"],(function(t,e){o(e+"s().every()",(function(t){var i,n=this.selector.opts,s=this,o=0;return this.iterator("every",(function(r,a,l){i=s[e](a,n),"cell"===e?t.call(i,i[0][0].row,i[0][0].column,l,o):t.call(i,a,l,o),o++}))}))})),o("i18n()",(function(t,e,i){var n=this.context[0],s=et(t)(n.oLanguage);return void 0===s&&(s=e),a.isPlainObject(s)&&(s=void 0!==i&&void 0!==s[i]?s[i]:s._),"string"==typeof s?s.replace("%d",i):s})),l.version="2.0.5",l.settings=[],l.models={},l.models.oSearch={caseInsensitive:!0,search:"",regex:!1,smart:!0,return:!1},l.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,src:null,idx:-1,displayData:null},l.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null,maxLenString:null,searchFixed:null},l.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],bAutoWidth:!0,bDeferRender:!0,bDestroy:!1,bFilter:!0,bInfo:!0,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:null,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnStateLoadCallback:function(t){try{return JSON.parse((-1===t.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+t.sInstance+"_"+location.pathname))}catch(t){return{}}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(t,e){try{(-1===t.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+t.sInstance+"_"+location.pathname,JSON.stringify(e))}catch(t){}},fnStateSaveParams:null,iStateDuration:7200,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{orderable:": Activate to sort",orderableReverse:": Activate to invert sorting",orderableRemove:": Activate to remove sorting",paginate:{first:"First",last:"Last",next:"Next",previous:"Previous"}},oPaginate:{sFirst:"«",sLast:"»",sNext:"›",sPrevious:"‹"},entries:{_:"entries",1:"entry"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ _ENTRIES-TOTAL_",sInfoEmpty:"Showing 0 to 0 of 0 _ENTRIES-TOTAL_",sInfoFiltered:"(filtered from _MAX_ total _ENTRIES-MAX_)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"_MENU_ _ENTRIES_ per page",sLoadingRecords:"Loading...",sProcessing:"",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:a.extend({},l.models.oSearch),layout:{topStart:"pageLength",topEnd:"search",bottomStart:"info",bottomEnd:"paging"},sDom:null,searchDelay:null,sPaginationType:"full_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId",caption:null},B(l.defaults),l.defaults.column={aDataSort:null,iDataSort:-1,ariaTitle:"",asSorting:["asc","desc",""],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},B(l.defaults.column),l.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:!0,bLengthChange:!0,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollbarLeft:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},searchFixed:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",pagingControls:0,iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,bAjaxDataGet:!0,jqXHR:null,json:void 0,oAjaxData:void 0,sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==ie(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==ie(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var t=this._iDisplayLength,e=this._iDisplayStart,i=e+t,n=this.aiDisplay.length,s=this.oFeatures,o=s.bPaginate;return s.bServerSide?!1===o||-1===t?e+n:Math.min(e+t,this._iRecordsDisplay):!o||i>n||-1===t?n:i},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null,caption:"",captionNode:null,colgroup:null};var we=l.ext.pager;a.extend(we,{simple:function(){return["previous","next"]},full:function(){return["first","previous","next","last"]},numbers:function(){return["numbers"]},simple_numbers:function(){return["previous","numbers","next"]},full_numbers:function(){return["first","previous","numbers","next","last"]},first_last:function(){return["first","last"]},first_last_numbers:function(){return["first","numbers","last"]},_numbers:Ne,numbers_length:7}),a.extend(!0,l.ext.renderer,{pagingButton:{_:function(t,e,i,n,s){var o,r=t.oClasses.paging,l=[r.button];return n&&l.push(r.active),s&&l.push(r.disabled),{display:o="ellipsis"===e?a('<span class="ellipsis"></span>').html(i)[0]:a("<button>",{class:l.join(" "),role:"link",type:"button"}).html(i),clicker:o}}},pagingContainer:{_:function(t,e){return e}}});var Re=function(t,e){return function(i){return m(i)||"string"!=typeof i||(i=i.replace(c," "),t&&(i=R(i)),e&&(i=D(i,!1))),i}};function Ae(t){return t.replace(/[\W]/g,"_")}function De(t,e,i,n,s){return window.moment?t[e](s):window.luxon?t[i](s):n?t[n](s):t}var Te=!1;function Se(t,e,i){var n;if(window.moment){if(!(n=window.moment.utc(t,e,i,!0)).isValid())return null}else if(window.luxon){if(!(n=e&&"string"==typeof t?window.luxon.DateTime.fromFormat(t,e):window.luxon.DateTime.fromISO(t)).isValid)return null;n.setLocale(i)}else e?(Te||alert("DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17"),Te=!0):n=new Date(t);return n}function ke(t){return function(e,i,n,s){0===arguments.length?(n="en",i=null,e=null):1===arguments.length?(n="en",i=e,e=null):2===arguments.length&&(n=i,i=e,e=null);var o="datetime"+(i?"-"+Ae(i):"");return l.ext.type.order[o]||l.type(o,{detect:function(t){return t===o&&o},order:{pre:function(t){return t.valueOf()}},className:"dt-right"}),function(r,a){if(null==r)if("--now"===s){var l=new Date;r=new Date(Date.UTC(l.getFullYear(),l.getMonth(),l.getDate(),l.getHours(),l.getMinutes(),l.getSeconds()))}else r="";if("type"===a)return o;if(""===r)return"sort"!==a?"":Se("0000-01-01 00:00:00",null,n);if(null!==i&&e===i&&"sort"!==a&&"type"!==a&&!(r instanceof Date))return r;var d=Se(r,e,n);if(null===d)return r;if("sort"===a)return d;var c=null===i?De(d,"toDate","toJSDate","")[t]():De(d,"format","toFormat","toISOString",i);return"display"===a?A(c):c}}}var Be=",",Ve=".";if(void 0!==window.Intl)try{for(var je=(new Intl.NumberFormat).formatToParts(100000.1),Ee=0;Ee<je.length;Ee++)"group"===je[Ee].type?Be=je[Ee].value:"decimal"===je[Ee].type&&(Ve=je[Ee].value)}catch(t){}l.datetime=function(t,e){var i="datetime-detect-"+Ae(t);e||(e="en"),l.ext.type.order[i]||l.type(i,{detect:function(n){var s=Se(n,t,e);return!(""!==n&&!s)&&i},order:{pre:function(i){return Se(i,t,e)||0}},className:"dt-right"})},l.render={date:ke("toLocaleDateString"),datetime:ke("toLocaleString"),time:ke("toLocaleTimeString"),number:function(t,e,i,n,s){return null==t&&(t=Be),null==e&&(e=Ve),{display:function(o){if("number"!=typeof o&&"string"!=typeof o)return o;if(""===o||null===o)return o;var r=o<0?"-":"",a=parseFloat(o),l=Math.abs(a);if(l>=1e11||l<1e-4&&0!==l){var d=a.toExponential(i).split(/e\+?/);return d[0]+" x 10<sup>"+d[1]+"</sup>"}if(isNaN(a))return A(o);a=a.toFixed(i),o=Math.abs(a);var c=parseInt(o,10),u=i?e+(o-c).toFixed(i).substring(2):"";return 0===c&&0===parseFloat(u)&&(r=""),r+(n||"")+c.toString().replace(/\B(?=(\d{3})+(?!\d))/g,t)+u+(s||"")}}},text:function(){return{display:A,filter:A}}};var Pe=l.ext.type;l.type=function(t,e,i){if(!e)return{className:Pe.className[t],detect:Pe.detect.find((function(e){return e.name===t})),order:{pre:Pe.order[t+"-pre"],asc:Pe.order[t+"-asc"],desc:Pe.order[t+"-desc"]},render:Pe.render[t],search:Pe.search[t]};var n=function(e,i){Pe[e][t]=i},s=function(e){var i=function(i,n){var s=e(i,n);return!0===s?t:s};Object.defineProperty(i,"name",{value:t});var n=Pe.detect.findIndex((function(e){return e.name===t}));-1===n?Pe.detect.unshift(i):Pe.detect.splice(n,1,i)},o=function(e){Pe.order[t+"-pre"]=e.pre,Pe.order[t+"-asc"]=e.asc,Pe.order[t+"-desc"]=e.desc};void 0===i&&(i=e,e=null),"className"===e?n("className",i):"detect"===e?s(i):"order"===e?o(i):"render"===e?n("render",i):"search"===e?n("search",i):e||(i.className&&n("className",i.className),void 0!==i.detect&&s(i.detect),i.order&&o(i.order),void 0!==i.render&&n("render",i.render),void 0!==i.search&&n("search",i.search))},l.types=function(){return Pe.detect.map((function(t){return t.name}))},l.type("string",{detect:function(){return"string"},order:{pre:function(t){return m(t)?"":"string"==typeof t?t.toLowerCase():t.toString?t.toString():""}},search:Re(!1,!0)}),l.type("html",{detect:function(t){return m(t)||"string"==typeof t&&-1!==t.indexOf("<")?"html":null},order:{pre:function(t){return m(t)?"":t.replace?R(t).trim().toLowerCase():t+""}},search:Re(!0,!0)}),l.type("date",{className:"dt-type-date",detect:function(t){if(t&&!(t instanceof Date)&&!p.test(t))return null;var e=Date.parse(t);return null!==e&&!isNaN(e)||m(t)?"date":null},order:{pre:function(t){var e=Date.parse(t);return isNaN(e)?-1/0:e}}}),l.type("html-num-fmt",{className:"dt-type-numeric",detect:function(t,e){var i=e.oLanguage.sDecimal;return C(t,i,!0)?"html-num-fmt":null},order:{pre:function(t,e){var i=e.oLanguage.sDecimal;return Le(t,i,u,g)}},search:Re(!0,!0)}),l.type("html-num",{className:"dt-type-numeric",detect:function(t,e){var i=e.oLanguage.sDecimal;return C(t,i)?"html-num":null},order:{pre:function(t,e){var i=e.oLanguage.sDecimal;return Le(t,i,u)}},search:Re(!0,!0)}),l.type("num-fmt",{className:"dt-type-numeric",detect:function(t,e){var i=e.oLanguage.sDecimal;return y(t,i,!0)?"num-fmt":null},order:{pre:function(t,e){var i=e.oLanguage.sDecimal;return Le(t,i,g)}}}),l.type("num",{className:"dt-type-numeric",detect:function(t,e){var i=e.oLanguage.sDecimal;return y(t,i)?"num":null},order:{pre:function(t,e){var i=e.oLanguage.sDecimal;return Le(t,i)}}});var Le=function(t,e,i,n){if(0!==t&&(!t||"-"===t))return-1/0;var s=typeof t;return"number"===s||"bigint"===s?t:(e&&(t=b(t,e)),t.replace&&(i&&(t=t.replace(i,"")),n&&(t=t.replace(n,""))),1*t)};a.extend(!0,l.ext.renderer,{footer:{_:function(t,e,i){e.addClass(i.tfoot.cell)}},header:{_:function(t,e,i){e.addClass(i.thead.cell),t.oFeatures.bSort||e.addClass(i.order.none);var n=t.bSortCellsTop,s=e.closest("thead").find("tr"),o=e.parent().index();"disable"===e.attr("data-dt-order")||"disable"===e.parent().attr("data-dt-order")||!0===n&&0!==o||!1===n&&o!==s.length-1||a(t.nTable).on("order.dt.DT",(function(n,s,o){if(t===s){var r=i.order,a=s.api.columns(e),l=t.aoColumns[a.flatten()[0]],d=a.orderable().includes(!0),c="",u=a.indexes(),h=a.orderable(!0).flatten(),p=","+o.map((function(t){return t.col})).join(",")+",";e.removeClass(r.isAsc+" "+r.isDesc).toggleClass(r.none,!d).toggleClass(r.canAsc,d&&h.includes("asc")).toggleClass(r.canDesc,d&&h.includes("desc"));var f=p.indexOf(","+u.toArray().join(",")+",");if(-1!==f){var g=a.order();e.addClass(g.includes("asc")?r.isAsc:""+g.includes("desc")?r.isDesc:"")}if(0===f){var m=o[0],v=l.asSorting;e.attr("aria-sort","asc"===m.dir?"ascending":"descending"),c=v[m.index+1]?"Reverse":"Remove"}else e.removeAttr("aria-sort");e.attr("aria-label",d?l.ariaTitle+s.api.i18n("oAria.orderable"+c):l.ariaTitle),d&&(e.find(".dt-column-title").attr("role","button"),e.attr("tabindex",0))}}))}},layout:{_:function(t,e,i){var n=a("<div/>").addClass("dt-layout-row").appendTo(e);a.each(i,(function(t,e){var i=e.table?"":"dt-"+t+" ";e.table&&n.addClass("dt-layout-table"),a("<div/>").attr({id:e.id||null,class:"dt-layout-cell "+i+(e.className||"")}).append(e.contents).appendTo(n)}))}}}),l.feature={},l.feature.register=function(t,e,i){l.ext.features[t]=e,i&&n.feature.push({cFeature:i,fnInit:e})},l.feature.register("info",(function(t,e){if(!t.oFeatures.bInfo)return null;var i=t.oLanguage,n=t.sTableId,s=a("<div/>",{class:t.oClasses.info.container});return e=a.extend({callback:i.fnInfoCallback,empty:i.sInfoEmpty,postfix:i.sInfoPostFix,search:i.sInfoFiltered,text:i.sInfo},e),t.aoDrawCallback.push((function(t){!function(t,e,i){var n=t._iDisplayStart+1,s=t.fnDisplayEnd(),o=t.fnRecordsTotal(),r=t.fnRecordsDisplay(),a=r?e.text:e.empty;r!==o&&(a+=" "+e.search);a+=e.postfix,a=ne(t,a),e.callback&&(a=e.callback.call(t.oInstance,t,n,s,o,r,a));i.html(a),Zt(t,null,"info",[t,i[0],a])}(t,e,s)})),t._infoEl||(s.attr({"aria-live":"polite",id:n+"_info",role:"status"}),a(t.nTable).attr("aria-describedby",n+"_info"),t._infoEl=s),s}),"i");var Oe=0;function Ie(t,e,i){if(t._bInitComplete){for(var n=l.ext.pager[i.type],s=t.oLanguage.oAria.paginate||{},o=t._iDisplayStart,r=t._iDisplayLength,d=t.fnRecordsDisplay(),c=-1===r,u=c?0:Math.ceil(o/r),h=c?1:Math.ceil(d/r),p=n().map((function(t){return"numbers"===t?Ne(u,h,i.buttons,i.boundaryNumbers):t})).flat(),f=[],g=0;g<p.length;g++){var m=p[g],v=Fe(t,m,u,h),b=ee(t,"pagingButton")(t,m,v.display,v.active,v.disabled);a(b.clicker).attr({"aria-controls":t.sTableId,"aria-disabled":v.disabled?"true":null,"aria-current":v.active?"page":null,"aria-label":s[m],"data-dt-idx":m,tabIndex:v.disabled?-1:t.iTabIndex}),"number"!=typeof m&&a(b.clicker).addClass(m),Qt(b.clicker,{action:m},(function(e){e.preventDefault(),Bt(t,e.data.action,!0)})),f.push(b.display)}var y=ee(t,"pagingContainer")(t,f),C=e.find(document.activeElement).data("dt-idx");e.empty().append(y),void 0!==C&&e.find("[data-dt-idx="+C+"]").trigger("focus"),f.length&&i.numbers>1&&a(e).height()>=2*a(f[0]).outerHeight()-10&&Ie(t,e,a.extend({},i,{numbers:i.numbers-2}))}}function Fe(t,e,i,n){var s=t.oLanguage.oPaginate,o={display:"",active:!1,disabled:!1};switch(e){case"ellipsis":o.display="&#x2026;",o.disabled=!0;break;case"first":o.display=s.sFirst,0===i&&(o.disabled=!0);break;case"previous":o.display=s.sPrevious,0===i&&(o.disabled=!0);break;case"next":o.display=s.sNext,0!==n&&i!==n-1||(o.disabled=!0);break;case"last":o.display=s.sLast,0!==n&&i!==n-1||(o.disabled=!0);break;default:"number"==typeof e&&(o.display=t.fnFormatNumber(e+1),i===e&&(o.active=!0))}return o}function Ne(t,e,i,n){var s=[],o=Math.floor(i/2),r=n?2:1,a=n?1:0;return e<=i?s=M(0,e):1===i?s=[t]:3===i?t<=1?s=[0,1,"ellipsis"]:t>=e-2?(s=M(e-2,e)).unshift("ellipsis"):s=["ellipsis",t,"ellipsis"]:t<=o?((s=M(0,i-r)).push("ellipsis"),n&&s.push(e-1)):t>=e-1-o?((s=M(e-(i-r),e)).unshift("ellipsis"),n&&s.unshift(0)):((s=M(t-o+r,t+o-a)).push("ellipsis"),s.unshift("ellipsis"),n&&(s.push(e-1),s.unshift(0))),s}l.feature.register("search",(function(t,e){if(!t.oFeatures.bFilter)return null;var i=t.oClasses.search,n=t.sTableId,s=t.oLanguage,o=t.oPreviousSearch,r='<input type="search" class="'+i.input+'"/>';-1===(e=a.extend({placeholder:s.sSearchPlaceholder,text:s.sSearch},e)).text.indexOf("_INPUT_")&&(e.text+="_INPUT_"),e.text=ne(t,e.text);var d=e.text.match(/_INPUT_$/),c=e.text.match(/^_INPUT_/),u=e.text.replace(/_INPUT_/,""),h="<label>"+e.text+"</label>";c?h="_INPUT_<label>"+u+"</label>":d&&(h="<label>"+u+"</label>_INPUT_");var p=a("<div>").addClass(i.container).append(h.replace(/_INPUT_/,r));p.find("label").attr("for","dt-search-"+Oe),p.find("input").attr("id","dt-search-"+Oe),Oe++;var f=function(e){var i=this.value;o.return&&"Enter"!==e.key||i!=o.search&&(o.search=i,Mt(t,o),t._iDisplayStart=0,pt(t))},g=null!==t.searchDelay?t.searchDelay:0,m=a("input",p).val(o.search).attr("placeholder",e.placeholder).on("keyup.DT search.DT input.DT paste.DT cut.DT",g?l.util.debounce(f,g):f).on("mouseup.DT",(function(t){setTimeout((function(){f.call(m[0],t)}),10)})).on("keypress.DT",(function(t){if(13==t.keyCode)return!1})).attr("aria-controls",n);return a(t.nTable).on("search.dt.DT",(function(e,i){t===i&&m[0]!==document.activeElement&&m.val("function"!=typeof o.search?o.search:"")})),p}),"f"),l.feature.register("paging",(function(t,e){if(!t.oFeatures.bPaginate)return null;(e=a.extend({buttons:l.ext.pager.numbers_length,type:t.sPaginationType,boundaryNumbers:!0},e)).numbers&&(e.buttons=e.numbers);var i=a("<div/>").addClass(t.oClasses.paging.container+" paging_"+e.type),n=function(){Ie(t,i,e)};return t.aoDrawCallback.push(n),a(t.nTable).on("column-sizing.dt.DT",n),i}),"p");var Ye=0;l.feature.register("pageLength",(function(t,e){var i=t.oFeatures;if(!i.bPaginate||!i.bLengthChange)return null;e=a.extend({menu:t.aLengthMenu,text:t.oLanguage.sLengthMenu},e);var n,s=t.oClasses.length,o=t.sTableId,r=e.menu,l=[],d=[];if(Array.isArray(r[0]))l=r[0],d=r[1];else for(n=0;n<r.length;n++)a.isPlainObject(r[n])?(l.push(r[n].value),d.push(r[n].label)):(l.push(r[n]),d.push(r[n]));var c=e.text.match(/_MENU_$/),u=e.text.match(/^_MENU_/),h=e.text.replace(/_MENU_/,""),p="<label>"+e.text+"</label>";u?p="_MENU_<label>"+h+"</label>":c&&(p="<label>"+h+"</label>_MENU_");var f=a("<div/>").addClass(s.container).append(p.replace("_MENU_","<span></span>")),g=[];f.find("label")[0].childNodes.forEach((function(t){t.nodeType===Node.TEXT_NODE&&g.push({el:t,text:t.textContent})}));var m=function(e){g.forEach((function(i){i.el.textContent=ne(t,i.text,e)}))},v=a("<select/>",{name:o+"_length","aria-controls":o,class:s.select});for(n=0;n<l.length;n++)v[0][n]=new Option("number"==typeof d[n]?t.fnFormatNumber(d[n]):d[n],l[n]);return f.find("label").attr("for","dt-length-"+Ye),v.attr("id","dt-length-"+Ye),Ye++,f.find("span").replaceWith(v),a("select",f).val(t._iDisplayLength).on("change.DT",(function(){kt(t,a(this).val()),pt(t)})),a(t.nTable).on("length.dt.DT",(function(e,i,n){t===i&&(a("select",f).val(n),m(n))})),m(t._iDisplayLength),f}),"l"),a.fn.dataTable=l,l.$=a,a.fn.dataTableSettings=l.settings,a.fn.dataTableExt=l.ext,a.fn.DataTable=function(t){return a(this).dataTable(t).api()},a.each(l,(function(t,e){a.fn.DataTable[t]=e}));const Ke=l}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{"use strict";i.r(n);i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap/dist/js/bootstrap.esm.js"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery-validation/dist/jquery.validate.js"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.js"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap-icons/font/bootstrap-icons.css"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/datatables.net-bs5/css/dataTables.bootstrap5.css"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/country-select-js/build/css/countrySelect.min.css"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/node_modules/bootstrap-datepicker/dist/css/bootstrap-datepicker3.min.css"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/index.js"),i("../../../../../C\0# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/scss/site.scss")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
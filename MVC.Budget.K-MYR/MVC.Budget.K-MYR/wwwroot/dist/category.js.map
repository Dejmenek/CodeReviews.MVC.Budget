{"version":3,"file":"category.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,CAA4B;AACW;AACvC;AACwC;AACsB;AACH;AACT;AACmB;AAC1C;AAC3B;AACmB;AACI;;;;;;;;;;;;;;;;;ACXvB,CAA0G;AACzC;AACS;AACpC;AACtC,2CAAK,UAAU,wDAAkB,EAAE,gDAAU;AAC7C;AACA,uBAAuB,mDAAU;AACjC;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD,0BAA0B,qEAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA,sBAAsB,uEAAqB;AAC3C,yBAAyB,0EAAwB;AACjD;AACA,QAAQ,CAAC;AACT;AACA,+BAA+B,CAAC;AAChC;AACA;AACA,gCAAgC,CAAC;AACjC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B,QAAQ,2SAAwE;AAC7H;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,WAAW;AAChE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,CAAC;AAC/B;AACA,oCAAoC,qDAAe;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,CAAC;AAC/B;AACA;AACA,kCAAkC,oDAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uDAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;ACtLA,CAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://thebudgeteer/../../../../../C\u0000# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/category-entry.js","webpack://thebudgeteer/../../../../../C\u0000# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/category.js","webpack://thebudgeteer/../../../../../C\u0000# Academy Repos/CodeReviews.MVC.Budget/MVC.Budget.K-MYR/MVC.Budget.K-MYR/ClientApp/src/js/messageBox.js"],"sourcesContent":["﻿import 'jquery-validation';\r\nimport 'jquery-validation-unobtrusive';\r\n\r\nimport '../scss/bootstrap-imports.scss';\r\nimport 'datatables.net-bs5/css/dataTables.bootstrap5.min.css';\r\nimport 'country-select-js/build/css/countrySelect.min.css';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\nimport 'bootstrap-datepicker/dist/css/bootstrap-datepicker3.min.css';\r\nimport '../scss/site.scss';\r\n\r\nimport './site.js';\r\nimport './category.js';\r\n","﻿import { importChartDefaults, importBootstrapCollapses, importBootstrapModals } from './asyncComponents';\r\nimport { ArcElement, Chart, DoughnutController } from 'chart.js';\r\nimport { postTransaction, putTransaction, deleteTransaction } from './api'\r\nimport MessageBox from \"./messageBox\";\r\nChart.register(DoughnutController, ArcElement);\r\n\r\nconst messageBox = new MessageBox();\r\nmessageBox.addMessage({\r\n    iconId: \"#check-icon\",\r\n    text: \"Loading Dashboard...\"\r\n});\r\nmessageBox.addMessage({\r\n    iconId: \"#cross-icon\",\r\n    text: \"Failed Task\"\r\n});\r\nconst chartDefaultsTask = importChartDefaults();\r\n\r\nconst currentDate = new Date();\r\nconst categoryId = document.getElementById('category_Id');\r\n\r\nconst categoryDashboardPromise = getCategoryDashboard(categoryId.value, currentDate, JSON.parse(categoryId.dataset.object));\r\nconst modalsPromise = importBootstrapModals();\r\nconst collapsesPromise = importBootstrapCollapses()\r\n    .then(() => {\r\n        $('.accordion-head').on('click', function (event) {\r\n            if (event.target.id !== 'addTransaction-button') {\r\n                let collapse = $(this).next();\r\n                if (!collapse[0].classList.contains('collapsing')) {\r\n                    collapse.collapse('toggle');\r\n                    let caret = $('.accordion-caret', this)[0];\r\n                    caret.classList.toggle('rotate');\r\n                }               \r\n            }\r\n        });\r\n    });\r\n\r\nsetupDataTableHandlers(categoryDashboardPromise, modalsPromise)\r\ninitAddTransactionModal(categoryDashboardPromise, modalsPromise)\r\nsetupRerenderHandlers(categoryDashboardPromise);\r\n\r\nasync function getCategoryDashboard(id, date, data) {\r\n    try {\r\n        const { default: CategoryDashboard } = await import(/* webpackChunkName: \"categoryDashboard\"*/ './categoryDashboard');\r\n        await chartDefaultsTask;\r\n\r\n        return new CategoryDashboard(id, date, data);\r\n\r\n    } catch (error) {\r\n        console.error('Error loading category dashboard:', error);\r\n        throw error;\r\n    }\r\n} \r\n\r\nasync function setupRerenderHandlers(dashboardPromise) {\r\n    var dashBoard = await dashboardPromise;\r\n    await dashBoard.initPromise;\r\n    window.addEventListener('countryChanged', () => {\r\n        setTimeout(() => dashBoard.formatDashboard(), 0);\r\n    })\r\n}\r\n\r\nasync function setupDataTableHandlers(dashboardPromise, modalsPromise) {\r\n    var dashBoard = await dashboardPromise;\r\n    await dashBoard.initPromise;\r\n    var table = dashBoard.table;\r\n    var modals = await modalsPromise;\r\n\r\n    var updateTransactionModal = modals.find(m => m._element.id == 'updateTransaction-modal');\r\n    var deleteTransactionModal = modals.find(m => m._element.id == 'deleteTransaction-modal');\r\n\r\n    initUpdateTransactionModal(updateTransactionModal, table);\r\n    initDeleteTransactionModal(deleteTransactionModal, table);\r\n\r\n    var idUpdate = document.getElementById('updateTransaction_id');\r\n    var labelUpdate = document.getElementById('updateTransaction-label');\r\n    var title = document.getElementById('updateTransaction_title');\r\n    var dateTime = document.getElementById('updateTransaction_datetime');\r\n    var amount = document.getElementById('updateTransaction_amount');\r\n    var isHappy = document.getElementById('updateTransaction_isHappyTrue');\r\n    var isUnhappy = document.getElementById('updateTransaction_isHappyFalse');\r\n    var isNecessary = document.getElementById('updateTransaction_isNecessaryTrue');\r\n    var isUnnecessary = document.getElementById('updateTransaction_isNecessaryFalse');\r\n\r\n    var labelDelete = document.getElementById('deleteTransaction-label');\r\n    var idDelete = document.getElementById('deleteTransaction_id');\r\n    table.on('click', 'svg', function (event) {\r\n        var row = table.row(event.target.closest('tr'));\r\n        var data = row.data();\r\n        switch (this.dataset.icon) {\r\n            case 'edit':\r\n                idUpdate.value = data.id;\r\n                labelUpdate.textContent = `Edit '${data.title}'`;\r\n                title.value = data.title;\r\n                dateTime.value = data.dateTime.slice(0, 19);\r\n                amount.value = data.amount;\r\n                let element = data.isHappy ? isHappy : isUnhappy;\r\n                element.checked = true;\r\n                element = data.isNecessary ? isNecessary : isUnnecessary;\r\n                element.checked = true;\r\n                updateTransactionModal.show();\r\n                break;\r\n            case 'delete':\r\n                idDelete.value = data.id;\r\n                labelDelete.textContent = `Delete '${data.title}'`;\r\n                deleteTransactionModal.show();\r\n        }\r\n    });\r\n\r\n    var tableContainer = document.getElementById('table-container');\r\n    tableContainer.style = '';\r\n    table.columns.adjust();\r\n}\r\n\r\nasync function initAddTransactionModal(dashboardPromise, modalsPromise) {\r\n    var modals = await modalsPromise;\r\n    var dB = await dashboardPromise;\r\n    var modal = modals.find(m => m._element.id == 'addTransaction-modal');\r\n    var addTransactionModalCategoryId = document.getElementById('addTransaction_categoryId');\r\n    var form = document.getElementById('addTransaction-form');\r\n    form.addEventListener('submit', async function (event) {\r\n        event.preventDefault();\r\n        if (modal._isShown && $(this).valid()) {\r\n            modal.hide();\r\n            let transaction = await postTransaction(new FormData(this));\r\n            if (transaction) {\r\n                dB.addTransaction(transaction);\r\n            }\r\n        }\r\n    });\r\n\r\n    var addIcon = document.getElementById('addTransaction-button');\r\n    addIcon.addEventListener('click', function () {\r\n        addTransactionModalCategoryId.value = categoryId.value;\r\n        modal.show();\r\n    });\r\n}\r\n\r\nfunction initUpdateTransactionModal(modal, table) {\r\n    var form = document.getElementById('updateTransaction-form');\r\n    form.addEventListener('submit', async function (event) {\r\n        event.preventDefault();\r\n        if (modal._isShown && $(this).valid()) {\r\n            modal.hide();\r\n            let formData = new FormData(this);\r\n            let isUpdated = await putTransaction(formData);\r\n            if (isUpdated) {\r\n                let row = table.row((_, data) => data.id === parseInt(formData.get('Id')));\r\n                if (row) {\r\n                    let data = row.data();\r\n                    data.amount = parseFloat(formData.get('Amount'));\r\n                    data.title = formData.get('Title');\r\n                    data.dateTime = formData.get('DateTime');\r\n                    data.isHappy = formData.get('IsHappy') === 'true';\r\n                    data.isNecessary = formData.get('IsNecessary') === 'true';\r\n                    data.isEvaluated = formData.get('IsEvaluated') === 'true';\r\n                    data.previousIsHappy = formData.get('PreviousIsHappy') === 'true';\r\n                    data.PreviousIsNecessary = formData.get('PreviousIsNecessary') === 'true';\r\n                    row.invalidate();\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction initDeleteTransactionModal(modal, table) {\r\n    var form = document.getElementById('deleteTransaction-form');\r\n    form.addEventListener('submit', async function (event) {\r\n        event.preventDefault();\r\n        if (modal._isShown) {\r\n            modal.hide();\r\n            var formData = new FormData(this);\r\n            var id = parseInt(formData.get('Id'));\r\n            var token = formData.get('__RequestVerificationToken');\r\n            var isDeleted = await deleteTransaction(id, token);\r\n            if (isDeleted) {\r\n                let row = table.row((_, data) => data.id === parseInt(formData.get('Id')));\r\n                if (row) {\r\n                    row.remove().draw();\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n","﻿export default class MessageBox {\r\n    #messageBox;\r\n    #messages;\r\n    #index;\r\n    #container;\r\n    #icon;\r\n    #isClosing;\r\n    #newMessagesQueue;\r\n\r\n    constructor() {\r\n        this.#messageBox = document.getElementById('messageBox');\r\n        this.#container = document.getElementById('messageBox-scrollcontainer');\r\n        this.#icon = document.getElementById('messageBoxIcon');\r\n        this.#index = 0;\r\n        this.#isClosing = false;\r\n        this.#messages = [];\r\n        this.#newMessagesQueue = [];\r\n\r\n        var closeButton = document.getElementById('messageBoxClose-button');\r\n\r\n        closeButton.addEventListener('dblclick', () => {\r\n            this.#hide();\r\n        });\r\n\r\n        closeButton.addEventListener('click', () => {\r\n            if (this.#index === 0 && this.#container.childElementCount === 1) {\r\n                this.#hide();\r\n            } else {\r\n                this.#removeMessage();\r\n            }\r\n        });\r\n\r\n        this.#messageBox.addEventListener('transitionend', () => {\r\n            if (this.#isClosing) {\r\n                this.#clearMessages();\r\n                this.#isClosing = false;\r\n\r\n                if (this.#newMessagesQueue.length > 0) {\r\n                    this.#newMessagesQueue.forEach(message => this.addMessage(message));\r\n                    this.#newMessagesQueue = [];\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    addMessage(messageObject) {\r\n        if (this.#isClosing) {\r\n            this.#newMessagesQueue.push(messageObject);\r\n        } else {\r\n            var messageContainer = document.createElement('div');\r\n            messageContainer.className = 'messageBoxMessage';\r\n            var text = document.createElement('span');\r\n            text.textContent = messageObject.text;\r\n            messageContainer.appendChild(text);\r\n            this.#container.appendChild(messageContainer);\r\n            this.#messages.push(messageObject);\r\n            this.#show();\r\n        }\r\n    }\r\n\r\n    #removeMessage() { \r\n        var childToRemove = this.#container.children[this.#index];\r\n        if (childToRemove) {            \r\n            this.#container.removeChild(childToRemove);\r\n            this.#messages.splice(this.#index, 1);\r\n            if (this.#index > this.#container.childElementCount) {\r\n                index = this.#container.childElementCount;\r\n            }\r\n            this.#setIcon();\r\n        }              \r\n    }\r\n\r\n    #show() {\r\n        this.#setIcon(this.#index);\r\n        this.#messageBox.classList.add('show');\r\n    }\r\n\r\n    #hide() {\r\n        this.#isClosing = true; \r\n        this.#messageBox.classList.remove('show');\r\n    }\r\n\r\n    #clearMessages() {\r\n        this.#container.replaceChildren(); \r\n        this.#messages = [];            \r\n    }\r\n\r\n    #setIcon() {\r\n        var messageObject = this.#messages[this.#index];\r\n        if (messageObject) {\r\n            this.#icon.setAttribute('href', messageObject.iconId);\r\n        }\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}